Index: build/Install
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/Install,v
retrieving revision 1.30
retrieving revision 1.24
diff -r1.30 -r1.24
4c4
< #     $Id: Install,v 1.30 2005/10/05 19:38:49 rumsey Exp $
---
> #     $Id: Install,v 1.24 2003/09/12 15:30:30 biedron Exp $
82d81
< do_fastio=no    # default flag to not do fast I/O option
91d89
<     -fastio)            do_fastio=yes ;;
99,103c97,100
<        -single  create single precision executables
<        -no_opt  create executables with little optimization but fast compilation
<        -noredirect  disallow redirected input file; needed only for SP2 and sometimes on Linux with MPI
<        -purify  fortran memory checker: need 3rd party license for this
<        -fastio  fast I/O option when using MPI: creates cfl3d.out.reass file
---
>        -single
>        -no_opt
>        -noredirect
>        -purify
114,118c111,114
<        -single  create single precision executables
<        -no_opt  create executables with little optimization but fast compilation
<        -noredirect  disallow redirected input file; needed only for SP2 and sometimes on Linux with MPI
<        -purify  fortran memory checker: need 3rd party license for this
<        -fastio  fast I/O option when using MPI: creates cfl3d.out.reass file
---
>        -single
>        -no_opt
>        -noredirect
>        -purify
328c324,327
< #    "home" cgns directory (cgnsdir)
---
> #    "home" cgns directory
> #
> # ---> THIS ASSUMES THE DIRECTORY STRUCTURE CREATED BY UNTARRING <---
> # --->        THE CGNS PACKAGE IS MAINTAINED UNALTERED.          <---
334c333
< #                            XXX 
---
> #                            lib 
336,343c335,339
< # where XXX is the name of the system, as defined by the CGNS
< # makefile (for example XXX=LINUX, SGI64, IBM, SUN64, HP, etc.).  
< # The cgnslib_f.h file must be placed in the cgnsdir 
< # directory, and the compiled CGNS library, named libcgns.a, must
< # be located in the directory XXX (for CGNS Version 2.4 forward).
< # (For CGNS Versions 2.3 and earlier, the directory structure
< # and naming convention was different: the compiled library
< # was always in cgnsdir/lib/, and was called libcgns.XXX.a)
---
> # Note that if the user downloads the pre-compiled libraries from 
> # the CGNS website, rather than downloading the entire source code
> # tar file, then the user must create this directory structure. The
> # cgnslib_f.h file must be placed in the cgnsdir directory, and any
> # appropriate libraries must be placed in the lib directory.
456,459d451
<   CPPOPT_F=""
<   if [ $do_fastio = yes ] ; then
<     CPPOPT_F="-DFASTIO"
<   fi
521c513
<         CGNS_LLIBDIR=""
---
>         CGNS_LLIBDIR="-L$CGNS_HOME/lib"
599c591
<      FFLAG="-O2 -64 -mips4 -r10000 -align64 -OPT:Olimit=4300"
---
>      FFLAG="-O2 -64 -mips4 -r10000 -align64 -OPT:Olimit=4000"
612,613c604
<      CGNS_LLIBDIR="-L$CGNS_HOME/SGI64"
<      CGNS_LLIB="cgns"
---
>      CGNS_LLIB="cgns.mips64"
626,627c617
<        CGNS_LLIBDIR="-L$CGNS_HOME/SGI6"
<        CGNS_LLIB="cgns"
---
>        CGNS_LLIB="cgns.mips4"
656,657c646
<      CGNS_LLIBDIR="-L$CGNS_HOME/IBM"
<      CGNS_LLIB="cgns"
---
>      CGNS_LLIB="cgns.ibm"
674,675c663
<      CGNS_LLIBDIR="-L$CGNS_HOME/SUN64"
<      CGNS_LLIB="cgns"
---
>      CGNS_LLIB="cgns.sol"
702,703c690
<      CGNS_LLIBDIR="-L$CGNS_HOME/HP"
<      CGNS_LLIB="cgns"
---
>      CGNS_LLIB="cgns.hp"
713,714c700,701
<   FTN="mpif90"
< # Alternate compiler you may need if mpif90 doesn't
---
>   FTN="mpif77"
> # Alternate compiler you may need if mpif77 doesn't
735,736c722
<      CGNS_LLIBDIR="-L$CGNS_HOME/ALPHA"
<      CGNS_LLIB="cgns"
---
>      CGNS_LLIB="cgns.alpha"
785,786c771
<      CGNS_LLIBDIR="-L$CGNS_HOME/LINUX"
<      CGNS_LLIB="cgns"
---
>      CGNS_LLIB="cgns.linux"
788,789c773,774
<   FTN="mpif90"
<   CPPOPT_SP="$CPPOPT_SP -DINTEL"
---
>   FTN="mpif77"
>   CPPOPT_SP="-DP3D_SINGLE -DINTEL"
791c776
< # Alternate compiler choices you may need if mpif90 doesn't
---
> # Alternate compiler choices you may need if mpif77 doesn't
826,827c811
<         CGNS_LLIBDIR="-L$CGNS_HOME/LINUX"
<         CGNS_LLIB="cgns"
---
>         CGNS_LLIB="cgns.linux"
829,830c813,814
<      FTN="mpif90"
< # Alternate Intel compiler you may need if mpif90 doesn't
---
>      FTN="mpif77"
> # Alternate Intel compiler you may need if mpif77 doesn't
856,857c840
<         CGNS_LLIBDIR="-L$CGNS_HOME/LINUX"
<         CGNS_LLIB="cgns"
---
>         CGNS_LLIB="cgns.linux"
859,861c842,844
<      FTN="mpif90"
<      CPPOPT_SP="$CPPOPT_SP -DPG"
< # Alternate Portland group compiler you may need if mpif90 doesn't
---
>      FTN="mpif77"
>      CPPOPT_SP="-DP3D_SINGLE -DPG"
> # Alternate Portland group compiler you may need if mpif77 doesn't
887,888c870
<         CGNS_LLIBDIR="-L$CGNS_HOME/LINUX"
<         CGNS_LLIB="cgns"
---
>         CGNS_LLIB="cgns.linux"
890,892c872,874
<      FTN="mpif90"
<      CPPOPT_SP="$CPPOPT_SP -DLAHEY"
< # Alternate Lahey compiler you may need if mpif90 doesn't
---
>      FTN="mpif77"
>      CPPOPT_SP="-DP3D_SINGLE -DLAHEY"
> # Alternate Lahey compiler you may need if mpif77 doesn't
918,919c900
<         CGNS_LLIBDIR="-L$CGNS_HOME/ALPHA"
<         CGNS_LLIB="cgns"
---
>         CGNS_LLIB="cgns.alpha"
921,923c902,904
<      FTN="mpif90"
<      CPPOPT_SP="$CPPOPT_SP -DALPHA"
< # Alternate Alpha compiler you may need if mpif90 doesn't
---
>      FTN="mpif77"
>      CPPOPT_SP="-DP3D_SINGLE -DALPHA"
> # Alternate Alpha compiler you may need if mpif77 doesn't
1002d982
< s;@CPPOPT_F@;$CPPOPT_F;g
1100c1080
<    echo 'as mpif90 - if this does not work, you will need'
---
>    echo 'as mpif77 - if this does not work, you will need'
1118c1098
<    echo 'as mpif90 - if this does not work, you will need'
---
>    echo 'as mpif77 - if this does not work, you will need'
Index: build/Makefile.in
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/Makefile.in,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
2c2
< #     $Id: Makefile.in,v 1.4 2005/10/05 19:38:49 rumsey Exp $
---
> #     $Id: Makefile.in,v 1.3 2001/11/06 15:27:54 biedron Exp $
60c60
< CPPOPT       = @CPPOPT_F@ $(MPI_INCDIR) -DDIST_MPI $(PREC_MPI)
---
> CPPOPT       = $(MPI_INCDIR) -DDIST_MPI $(PREC_MPI)
Index: build/cfl/libs/makefile
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/cfl/libs/makefile,v
retrieving revision 1.11
retrieving revision 1.8
diff -r1.11 -r1.8
1c1
< #     $Id: makefile,v 1.11 2005/09/19 14:53:02 rumsey Exp $
---
> #     $Id: makefile,v 1.8 2003/07/07 14:14:41 biedron Exp $
96,98c96,97
< 	pltmode.F      bcnonin.F      initnonin.F    resnonin.F \
<         my_flush.F     bc2016.F       gfluxv1.F      hfluxv1.F \
<         ffluxv1.F      sijrate2d.F
---
> 	pltmode.F      bcnonin.F      initnonin.F     resnonin.F \
>         my_flush.F
Index: build/cfl/libs/makefile_cpp
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/cfl/libs/makefile_cpp,v
retrieving revision 1.12
retrieving revision 1.9
diff -r1.12 -r1.9
1c1
< #     $Id: makefile_cpp,v 1.12 2005/09/19 14:53:02 rumsey Exp $
---
> #     $Id: makefile_cpp,v 1.9 2003/07/07 14:14:41 biedron Exp $
104,105c104
<         my_flush.f     bc2016.f       gfluxv1.f      hfluxv1.f \
<         ffluxv1.f      sijrate2d.f
---
>         my_flush.f
Index: build/cfl/mpi/makefile
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/cfl/mpi/makefile,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
1c1
< #     $Id: makefile,v 1.4 2005/10/05 19:40:05 rumsey Exp $
---
> #     $Id: makefile,v 1.3 2001/11/06 15:30:15 biedron Exp $
43c43
< 	umalloc.F      reass.F
---
> 	umalloc.F
Index: build/cfl/mpi/makefile_cpp
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/cfl/mpi/makefile_cpp,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
1c1
< #     $Id: makefile_cpp,v 1.4 2005/10/05 19:40:05 rumsey Exp $
---
> #     $Id: makefile_cpp,v 1.3 2001/11/06 17:36:17 biedron Exp $
50c50
< 	umalloc.f      reass.f
---
> 	umalloc.f
Index: build/cfl/seq/makefile
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/cfl/seq/makefile,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
1c1
< #     $Id: makefile,v 1.4 2005/10/05 19:39:47 rumsey Exp $
---
> #     $Id: makefile,v 1.3 2001/11/06 15:30:02 biedron Exp $
43c43
< 	umalloc.F      reass.F
---
> 	umalloc.F
Index: build/cfl/seq/makefile_cpp
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/cfl/seq/makefile_cpp,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
1c1
< #     $Id: makefile_cpp,v 1.4 2005/10/05 19:39:46 rumsey Exp $
---
> #     $Id: makefile_cpp,v 1.3 2001/11/06 17:35:55 biedron Exp $
50c50
< 	umalloc.f      reass.f
---
> 	umalloc.f
Index: build/cflcmplx/libs/makefile
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/cflcmplx/libs/makefile,v
retrieving revision 1.9
retrieving revision 1.8
diff -r1.9 -r1.8
1c1
< #     $Id: makefile,v 1.9 2003/10/07 17:59:31 rumsey Exp $
---
> #     $Id: makefile,v 1.8 2003/07/07 14:14:44 biedron Exp $
97c97
< 	resnonin.F     my_flush.F     bc2016.F
---
> 	resnonin.F     my_flush.F
Index: build/cflcmplx/libs/makefile_cpp
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/cflcmplx/libs/makefile_cpp,v
retrieving revision 1.10
retrieving revision 1.9
diff -r1.10 -r1.9
1c1
< #     $Id: makefile_cpp,v 1.10 2003/10/07 17:59:32 rumsey Exp $
---
> #     $Id: makefile_cpp,v 1.9 2003/07/07 14:14:44 biedron Exp $
104c104
< 	resnonin.f     my_flush.f     bc2016.f
---
> 	resnonin.f     my_flush.f
Index: build/tools/seq/makefile
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/tools/seq/makefile,v
retrieving revision 1.7
retrieving revision 1.6
diff -r1.7 -r1.6
1c1
< #     $Id: makefile,v 1.7 2005/10/05 19:45:35 rumsey Exp $
---
> #     $Id: makefile,v 1.6 2003/07/07 14:14:53 biedron Exp $
74d73
< SOURCE16 = cgns_readhist.F
91d89
< OBJECT16 = $(SOURCE16:.F=.o)
123,124d120
< $(OBJECT16):
< 	$(FTN) $(CPPOPT) $(FFLAG) -c $*.F
142d137
< EXEC16 = cgns_readhist
189,191d183
< $(EXEC16): $(SOURCE16)  $(OBJECT16) $(LIBS)
< 	$(FTN) $(CPPOPT) $(LFLAG) -o $(EXEC16) $(OBJECT16) $(LIBS) $(LLIBS)
< 
194c186
<          $(EXEC15) $(EXEC16)
---
>          $(EXEC15)
217d208
< 	@ echo "                      $(DIR)/$(EXEC16)                        "
238c229
<          $(EXEC15) $(EXEC16)
---
>          $(EXEC15)
Index: build/tools/seq/makefile_cpp
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/build/tools/seq/makefile_cpp,v
retrieving revision 1.8
retrieving revision 1.7
diff -r1.8 -r1.7
1c1
< #     $Id: makefile_cpp,v 1.8 2005/10/05 19:45:35 rumsey Exp $
---
> #     $Id: makefile_cpp,v 1.7 2003/07/07 14:14:53 biedron Exp $
81d80
< SOURCE16 = cgns_readhist.f
98d96
< OBJECT16  = $(SOURCE16:.f=.o)
130,131d127
< $(OBJECT16):
< 	$(FTN) $(FFLAG) -c $*.f
148d143
< EXEC16 = cgns_readhist
195,197d189
< $(EXEC16): $(SOURCE16)  $(OBJECT16) $(LIBS)
< 	$(FTN) $(LFLAG) -o $(EXEC16) $(OBJECT16) $(LIBS) $(LLIBS)
< 
200c192
<          $(EXEC15) $(EXEC16)
---
>          $(EXEC15)
223d214
< 	@ echo "                      $(DIR)/$(EXEC16)                        "
244c235
<          $(EXEC15) $(EXEC16)
---
>          $(EXEC15)
Index: source/cfl3d/dist/calyplus.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/calyplus.F,v
retrieving revision 1.7
retrieving revision 1.6
diff -r1.7 -r1.6
9c9
< c     $Id: calyplus.F,v 1.7 2003/10/07 17:54:45 rumsey Exp $
---
> c     $Id: calyplus.F,v 1.6 2003/05/09 19:45:04 rumsey Exp $
167,168c167
<      .       abs(kbcinfo(nbl,nseg,1,m)) .eq. 2014 .or.
<      .       abs(kbcinfo(nbl,nseg,1,m)) .eq. 2016) then
---
>      .       abs(kbcinfo(nbl,nseg,1,m)) .eq. 2014) then
630,631c629
<      .       abs(jbcinfo(nbl,nseg,1,m)) .eq. 2014 .or.
<      .       abs(jbcinfo(nbl,nseg,1,m)) .eq. 2016) then
---
>      .       abs(jbcinfo(nbl,nseg,1,m)) .eq. 2014) then
1098,1099c1096
<      .       abs(ibcinfo(nbl,nseg,1,m)) .eq. 2014 .or.
<      .       abs(ibcinfo(nbl,nseg,1,m)) .eq. 2016) then
---
>      .       abs(ibcinfo(nbl,nseg,1,m)) .eq. 2014) then
Index: source/cfl3d/dist/cfl3d.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/cfl3d.F,v
retrieving revision 1.8
retrieving revision 1.4
diff -r1.8 -r1.4
6c6
<      .                 bou,nou,grid)
---
>      .                 bou,nou)
8c8
< c     $Id: cfl3d.F,v 1.8 2005/10/17 12:36:04 rumsey Exp $
---
> c     $Id: cfl3d.F,v 1.4 2003/05/15 20:23:42 rumsey Exp $
39,40d38
<       character*32 basedesired
<       character*80 grid
191c189
<       allocatable :: iskip(:,:)
---
>       allocatable :: iskip(:)
216c214
<       allocatable :: jskip(:,:)
---
>       allocatable :: jskip(:)
233c231
<       allocatable :: kskip(:,:)
---
>       allocatable :: kskip(:)
290,295c288
<       allocatable :: islavept(:,:,:)
<       allocatable :: nblelst(:,:)
<       allocatable :: iskmax(:)
<       allocatable :: jskmax(:)
<       allocatable :: kskmax(:)
<       allocatable :: ue(:)
---
>       allocatable :: slavept(:,:,:,:)
364c357
<       allocatable :: irdrea(:)
---
> 
367,371d359
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
<       common /cgns/ icgns,iccg,ibase,nzones,nsoluse,irind,jrind,krind
<       common /unit5/ iunit5
<       common /wrestq/ irest,irest2
665,666c653,654
<       allocate( iskip(maxbl,500),stat=stats )
<       call umalloc(500*maxbl,1,'iskip',memuse,stats)
---
>       allocate( iskip(maxbl),stat=stats )
>       call umalloc(maxbl,1,'iskip',memuse,stats)
715,716c703,704
<       allocate( jskip(maxbl,500),stat=stats )
<       call umalloc(500*maxbl,1,'jskip',memuse,stats)
---
>       allocate( jskip(maxbl),stat=stats )
>       call umalloc(maxbl,1,'jskip',memuse,stats)
749,750c737,738
<       allocate( kskip(maxbl,500),stat=stats )
<       call umalloc(500*maxbl,1,'kskip',memuse,stats)
---
>       allocate( kskip(maxbl),stat=stats )
>       call umalloc(maxbl,1,'kskip',memuse,stats)
863,874c851,852
<       allocate( islavept(nslave,nmaster,5),stat=stats )
<       call umalloc(nslave*nmaster*5,1,'islavept',memuse,stats)
<       allocate( nblelst(maxbl,2),stat=stats )
<       call umalloc(maxbl*2,1,'nblelst',memuse,stats)
<       allocate( iskmax(maxbl),stat=stats )
<       call umalloc(maxbl,1,'iskmax',memuse,stats)
<       allocate( jskmax(maxbl),stat=stats )
<       call umalloc(maxbl,1,'jskmax',memuse,stats)
<       allocate( kskmax(maxbl),stat=stats )
<       call umalloc(maxbl,1,'kskmax',memuse,stats)
<       allocate( ue(3*nslave),stat=stats )
<       call umalloc(3*nslave,0,'ue',memuse,stats)
---
>       allocate( slavept(nslave,3,nmaster,5),stat=stats )
>       call umalloc(nslave*3*nmaster*5,0,'slavept',memuse,stats)
1011,1012d988
<       allocate( irdrea(maxgr),stat=stats )
<       call umalloc(maxgr,1,'irdrea',memuse,stats)
1015c991
< c     initialize output buffer
---
> c     initiialize output buffer
1075c1051
<      .          aesrfdat,perturb,memuse,bcfiles,islavept,nslave,
---
>      .          aesrfdat,perturb,memuse,bcfiles,slavept,nslave,
1077a1054
> c    .          nmaster,aehist,timekeep)
1079c1056
<      .          icouple,nblelst,iskmax,jskmax,kskmax,ue,irdrea)
---
>      .          icouple)
1390,1395c1367
<          deallocate(islavept)
<          deallocate(nblelst)
<          deallocate(iskmax)
<          deallocate(jskmax)
<          deallocate(kskmax)
<          deallocate(ue)
---
>          deallocate(slavept)
1413,1430d1384
< c   Write input file used to CGNS file
< #if defined CGNS
<       if (icgns .eq. 1 .and. myid .eq. myhost) then
<         basedesired='Base'
<         idimdesired=3
<         call wopencgns(grid,basedesired,idimdesired,iccg,
<      .              ibase,nzones)
<         call writeinput(iccg,ibase,iunit5,irest)
<       end if
< #endif
< c   Close unit 11
<       close(11)
< #   ifdef FASTIO
<       if (myid.eq.myhost) then
<        call reass(maxgr,irdrea)
<       end if
< #   endif
<       deallocate(irdrea)
Index: source/cfl3d/dist/dynptch.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/dynptch.F,v
retrieving revision 1.6
retrieving revision 1.5
diff -r1.6 -r1.5
20c20
< c     $Id: dynptch.F,v 1.6 2005/10/05 19:42:57 rumsey Exp $
---
> c     $Id: dynptch.F,v 1.5 2003/07/07 14:14:56 biedron Exp $
309,314d308
< #   ifdef FASTIO
<          call writ_buffast(nbl,25,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,33)
<          call writ_buffast(nbl,9,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,33)
< #   else
319d312
< #   endif
Index: source/cfl3d/dist/findmin_new.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/findmin_new.F,v
retrieving revision 1.5
retrieving revision 1.4
diff -r1.5 -r1.4
8c8
< c     $Id: findmin_new.F,v 1.5 2003/10/07 17:54:46 rumsey Exp $
---
> c     $Id: findmin_new.F,v 1.4 2003/05/09 19:45:05 rumsey Exp $
174,175c174
<                if(abs(nbctype).eq.2004 .or. abs(nbctype).eq.2014 .or.
<      .            abs(nbctype).eq.2016) then
---
>                if(abs(nbctype).eq.2004 .or. abs(nbctype).eq.2014) then
288,289c287
<                if(abs(nbctype).eq.2004 .or. abs(nbctype).eq.2014 .or.
<      .            abs(nbctype).eq.2016) then
---
>                if(abs(nbctype).eq.2004 .or. abs(nbctype).eq.2014) then
402,403c400
<                if(abs(nbctype).eq.2004 .or. abs(nbctype).eq.2014 .or.
<      .            abs(nbctype).eq.2016) then
---
>                if(abs(nbctype).eq.2004 .or. abs(nbctype).eq.2014) then
Index: source/cfl3d/dist/main.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/main.F,v
retrieving revision 1.14
retrieving revision 1.12
diff -r1.14 -r1.12
3c3
< c     $Id: main.F,v 1.14 2005/10/05 19:42:57 rumsey Exp $
---
> c     $Id: main.F,v 1.12 2003/05/09 19:45:05 rumsey Exp $
159d158
< c           901.....cgnsinfo.out
180c179
< c        models), key off boundary condition type 2004/14/16 (viscous
---
> c        models), key off boundary condition type 2004/14 (viscous
299a299
>       character*32 basedesired
315,318d314
< #   ifdef FASTIO
<       common/rjbdbgi/lunfio0
<       lunfio0=8000
< #   endif
523,526d518
< #   ifdef CGNS
<       open(unit=901,file='cgnsinfo.out',form='formatted',
<      .  status='unknown')
< #   endif
683,684c675
<      .           nmds,maxaes,nslave,maxsegdg,nmaster,bcfiles,bou,nou,
<      .           grid)
---
>      .           nmds,maxaes,nslave,maxsegdg,nmaster,bcfiles,bou,nou)
688a680
> c   Write input file used to CGNS file
690d681
< c   Close data base
691a683,688
>         basedesired='Base'
>         idimdesired=3
>         call wopencgns(grid,basedesired,idimdesired,iccg,
>      .              ibase,nzones)
>         call writeinput(iccg,ibase,iunit5,irest)
> c   Close data base
Index: source/cfl3d/dist/mgbl.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/mgbl.F,v
retrieving revision 1.17
retrieving revision 1.14
diff -r1.17 -r1.14
47c47
<      .                aesrfdat,perturb,memuse,bcfiles,islavept,nslave,
---
>      .                aesrfdat,perturb,memuse,bcfiles,slavept,nslave,
51,52c51
<      .                zorgae0,icouple,nblelst,iskmax,jskmax,kskmax,ue,
<      .                irdrea)
---
>      .                zorgae0,icouple)
54c53
< c     $Id: mgbl.F,v 1.17 2005/10/05 19:42:57 rumsey Exp $
---
> c     $Id: mgbl.F,v 1.14 2003/07/07 14:14:56 biedron Exp $
97d95
<       integer irdrea(maxgr)
150,152c148,149
<       dimension aesrfdat(5,maxaes),islavept(nslave,nmaster,5)
<       dimension ue(3*nslave)
<       dimension iskip(maxbl,500),jskip(maxbl,500),kskip(maxbl,500)
---
>       dimension aesrfdat(5,maxaes),slavept(nslave,3,nmaster,5)
>       dimension iskip(maxbl),jskip(maxbl),kskip(maxbl)
226,229d222
<       dimension nblelst(maxbl,2)
<       dimension iskmax(maxbl)
<       dimension jskmax(maxbl)
<       dimension kskmax(maxbl)
259,260d251
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
461,463c452,454
<       nvalsr = 30*maxbl + maxbl*maxseg*72 + 55 + 11*nmds*maxaes
<      .       + 5*maxaes + 17*maxbl*maxsegdg + nkey
<       nvalsi =1550*maxbl+ 119      + 9*maxbl*maxsegdg + 48*maxbl*maxseg
---
>       nvalsr = 44*maxbl + maxbl*maxseg*42 + 52 + 11*nmds*maxaes
>      .       + 5*maxaes
>       nvalsi = 53*maxbl + 117       + 8*maxbl*maxsegdg + 48*maxbl*maxseg
548,551d538
< #   ifdef FASTIO
<                call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,
<      .                       myid,mycomm,mblk2nd,maxbl,01)
< #   else
554d540
< #   endif
604c590
<      .           maxbl,mxbli,maxgr,maxseg,nsub1,maxxe,intmax,
---
>      .           maxbl,maxgr,maxseg,nsub1,maxxe,intmax,
626c612
<      .           islavept,nslave,iskip,jskip,kskip,bmat,stm,stmi,
---
>      .           slavept,nslave,iskip,jskip,kskip,bmat,stm,stmi,
630,631c616
<      .           zorgae0,icouple,lfgm,nblk,limblk,isva,nblelst,iskmax,
<      .           jskmax,kskmax,ue,irdrea)
---
>      .           zorgae0,icouple,lfgm)
767c752
<      .              islavept,nslave,iskip,jskip,kskip,bmat,stm,stmi,
---
>      .              slavept,nslave,iskip,jskip,kskip,bmat,stm,stmi,
770,771c755
<      .              yorgae0,zorgae0,icouple,iprnsurf,nblelst,iskmax,
<      .              jskmax,kskmax,ue)
---
>      .              yorgae0,zorgae0,icouple,iprnsurf)
823,826d806
< c   meshdef = 1 if flow solution is to be bipassed, and mesh deformation only:
< c
<       if(meshdef.eq.1) goto 8100
< c
949d928
<  8100 continue
961,964d939
< c   meshdef = 1 if flow solution is to be bipassed, and mesh deformation only:
< c
<       if(meshdef.eq.1) goto 8110
< c
986d960
< 8110  continue
Index: source/cfl3d/dist/mgblk.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/mgblk.F,v
retrieving revision 1.21
retrieving revision 1.17
diff -r1.21 -r1.17
47c47
<      .                 perturb,islavept,nslave,iskip,jskip,kskip,bmat,
---
>      .                 perturb,slavept,nslave,iskip,jskip,kskip,bmat,
51c51
<      .                 iprnsurf,nblelst,iskmax,jskmax,kskmax,ue)
---
>      .                 iprnsurf)
53c53
< c     $Id: mgblk.F,v 1.21 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: mgblk.F,v 1.17 2003/05/15 20:23:43 rumsey Exp $
155,157c155,156
<       dimension aesrfdat(5,maxaes),islavept(nslave,nmaster,5)
<       dimension ue(3*nslave)
<       dimension iskip(maxbl,500),jskip(maxbl,500),kskip(maxbl,500)
---
>       dimension aesrfdat(5,maxaes),slavept(nslave,3,nmaster,5)
>       dimension iskip(maxbl),jskip(maxbl),kskip(maxbl)
228,231d226
<       dimension nblelst(maxbl,2)
<       dimension iskmax(maxbl)
<       dimension jskmax(maxbl)
<       dimension kskmax(maxbl)
278,281c273
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
728,738d719
< c
< c      if meshdef = 1, deform mesh and calculate volumes and metrics only
< c
<        if(meshdef.eq.1) then
<          if(myid.eq.myhost) then
<            write(11,10229) nt
< 10229      format(' Deforming mesh and calculating volumes and metrics,'
<      .             ,' time step ',i5)
<          end if
<        end if
< 
821,826c802,806
<      .                    aesrfdat,perturb,itrans,irotat,islavept,
<      .                    nslave,iskip,jskip,kskip,xs,xxn,nsegdfrm,
<      .                    idfrmseg,iaesurf,maxsegdg,iwk,nmaster,nt,
<      .                    xorig,yorig,zorig,xorgae0,yorgae0,zorgae0,
<      .                    icouple,iwk(maxbl+1),nnodes,nblelst,iskmax,
<      .                    jskmax,kskmax,ue)
---
>      .                    aesrfdat,perturb,itrans,irotat,slavept,nslave,
>      .                    iskip,jskip,kskip,xs,xxn,nsegdfrm,idfrmseg,
>      .                    iaesurf,maxsegdg,iwk,nmaster,nt,xorig,
>      .                    yorig,zorig,xorgae0,yorgae0,zorgae0,icouple,
>      .                    iwk(maxbl+1),nnodes)
1049,1052d1028
< c   meshdef = 1 if flow solution is to be bipassed, and mesh deformation only:
< c
<       if(meshdef.eq.1) goto 6998
< c
1280,1283d1255
< #   ifdef FASTIO
<          call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,02)
< #   else
1286d1257
< #   endif
1317,1320d1287
< #   ifdef FASTIO
<          call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,03)
< #   else
1323d1289
< #   endif
1503,1506d1468
< #   ifdef FASTIO
<          call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,04)
< #   else
1509d1470
< #   endif
1511,1514d1471
< #   ifdef FASTIO
<             call writ_buffast(nbl,14,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                    mycomm,mblk2nd,maxbl,05)
< #   else
1517d1473
< #   endif
1529,1532d1484
< #   ifdef FASTIO
<                call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,
<      .                       myid,mycomm,mblk2nd,maxbl,06)
< #   else
1535d1486
< #   endif
1543,1546d1493
< #   ifdef FASTIO
<                call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,
<      .                       myid,mycomm,mblk2nd,maxbl,07)
< #   else
1549d1495
< #   endif
1571,1574d1516
< #   ifdef FASTIO
<          call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,08)
< #   else
1577d1518
< #   endif
1944,1947d1884
< #   ifdef FASTIO
<          call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,09)
< #   else
1950d1886
< #   endif
2328,2331d2263
< #   ifdef FASTIO
<                   call writ_buffast(nblz,11,nou,bou,nbuf,ibufdim,myhost,
<      .                          myid,mycomm,mblk2nd,maxbl,10)
< #   else
2334d2265
< #   endif
2342,2345d2272
< #   ifdef FASTIO
<             call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                    mycomm,mblk2nd,maxbl,11)
< #   else
2348d2274
< #   endif
2471,2472c2397,2398
<                  write(901,'('' not enough memory for cgns Q write.'')')
<                  write(901,'('' nwork in wk='',i6,''.  Needed = '',i6)')
---
>                  write(11,'('' not enough memory for cgns Q write.'')')
>                  write(11,'('' nwork in wk='',i6,''.  Needed = '',i6)')
2517,2518d2442
< 6998  continue
< c
2572,2576d2495
< c
< c   meshdef = 1 if flow solution is to be bipassed, and mesh deformation only:
< c
<       if(meshdef.eq.1) goto 5990
< c
2639,2640c2558,2559
<                  write(901,'('' not enough memory for cgns Q write.'')')
<                  write(901,'('' nwork in wk='',i6,''.  Needed = '',i6)')
---
>                  write(11,'('' not enough memory for cgns Q write.'')')
>                  write(11,'('' nwork in wk='',i6,''.  Needed = '',i6)')
2697c2616
<                  write(901,'('' not enough memory for cgns'',
---
>                  write(11,'('' not enough memory for cgns'',
2699c2618
<                  write(901,'('' nwork in wk='',i6,''.  Needed = '',i6)')
---
>                  write(11,'('' nwork in wk='',i6,''.  Needed = '',i6)')
2745c2664
<                  write(901,'('' not enough memory for cgns'',
---
>                  write(11,'('' not enough memory for cgns'',
2747c2666
<                  write(901,'('' nwork in wk='',i6,''.  Needed = '',i6)')
---
>                  write(11,'('' nwork in wk='',i6,''.  Needed = '',i6)')
2808c2727
<                            write(901,'('' not enough room in wk for'',
---
>                            write(11,'('' not enough room in wk for'',
2895,2896d2813
< 5990  continue
< c
Index: source/cfl3d/dist/plot3t.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/plot3t.F,v
retrieving revision 1.11
retrieving revision 1.8
diff -r1.11 -r1.8
12c12
< c     $Id: plot3t.F,v 1.11 2005/09/16 12:54:20 rumsey Exp $
---
> c     $Id: plot3t.F,v 1.8 2003/05/09 19:45:07 rumsey Exp $
93,94c93
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
617c616
<             if (ivmx .le. 7 .or. ivmx .eq. 10 .or. ivmx .eq. 15) then
---
>             if (ivmx .le. 7 .or. ivmx .eq. 10) then
931,935d929
< c      Laminar Viscosity:
<       c2b=cbar/tinf
<       c2bp=c2b+1.0
<       tt=gamma*q(j,k,i,5)/q(j,k,i,1)
<       fnu=c2bp*tt*sqrt(tt)/(c2b+tt)
939c933
<         ske=sqrt(2.*xis)/(turre(j,k,i,1)*re)
---
>         ske=sqrt(xis)/(turre(j,k,i,1)*re)
942,945c936
<         ske=sqrt(2.*xis)*turre(j,k,i,2)/(turre(j,k,i,1)*re)
<       else if (ivmx.eq.15) then
<         ske=sqrt(2.*xis)*turre(j,k,i,2)*q(j,k,i,1)/
<      +    (fnu*turre(j,k,i,1)*re)
---
>         ske=sqrt(xis)*turre(j,k,i,2)/(turre(j,k,i,1)*re)
957,958d947
<       else if (ivmx.eq.15) then
<         povere=pk*q(j,k,i,1)/(fnu*turre(j,k,i,1)*re)
960c949,953
< c      Turb Reynolds number (4/9*k^2/(nu*epsilon), from NASA-CR 198221, 1995:
---
> c      Turb Reynolds number:
>       c2b=cbar/tinf
>       c2bp=c2b+1.0
>       tt=gamma*q(j,k,i,5)/q(j,k,i,1)
>       fnu=c2bp*tt*sqrt(tt)/(c2b+tt)
963c956
<         turbre=4.*q(j,k,i,1)*turre(j,k,i,2)/(9.*fnu*turre(j,k,i,1))
---
>         turbre=4.*q(j,k,i,1)*turre(j,k,i,2)**2/(9.*fnu*turre(j,k,i,1))
966,969c959
<         turbre=4.*q(j,k,i,1)*turre(j,k,i,2)**2/(9.*fnu*turre(j,k,i,1))
<       else if (ivmx.eq.15) then
<         turbre=4.*q(j,k,i,1)*q(j,k,i,1)*turre(j,k,i,2)**2/
<      +    (9.*fnu*fnu*turre(j,k,i,1))
---
>         turbre=4.*q(j,k,i,1)*turre(j,k,i,2)/(9.*fnu*turre(j,k,i,1))
Index: source/cfl3d/dist/pointers.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/pointers.F,v
retrieving revision 1.11
retrieving revision 1.7
diff -r1.11 -r1.7
12c12
< c     $Id: pointers.F,v 1.11 2005/09/19 14:52:27 rumsey Exp $
---
> c     $Id: pointers.F,v 1.7 2003/05/15 20:23:43 rumsey Exp $
57,58d56
<       common /konew/ ikoprod,isstdenom,pklimterm,ibeta8kzeta
<       common /curvat/ isarc2d,sarccr3,ieasmcc2d
708d705
< c        or for k-o/SST/k-e model when isstprod or isstdenom are active
714,718c711
<      .      ivisc(3).ge.11 .or. ivisc(2).ge.11 .or. ivisc(1).ge.11 .or.
<      .      ((ivmx.eq.6 .or. ivmx.eq.7 .or. ivmx.eq.10) .and. 
<      .      ikoprod.eq.1) .or. (ivmx.eq.7 .and. isstdenom.eq.1) .or.
<      .      ((ivisc(3).eq.5 .or. ivisc(2).eq.5 .or. ivisc(1).eq.5) .and.
<      .      isarc2d.eq.1))
---
>      .      ivisc(3).ge.11 .or. ivisc(2).ge.11 .or. ivisc(1).ge.11)
Index: source/cfl3d/dist/prntcp.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/prntcp.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
6c6
< c     $Id: prntcp.F,v 1.4 2003/10/07 17:55:16 rumsey Exp $
---
> c     $Id: prntcp.F,v 1.3 2003/05/09 19:45:08 rumsey Exp $
74,75c74
<      .       abs(ibcinfo(nbl,ns,1,1)).eq.2014 .or.
<      .       abs(ibcinfo(nbl,ns,1,1)).eq.2016) then
---
>      .       abs(ibcinfo(nbl,ns,1,1)).eq.2014) then
142,143c141
<      .       abs(ibcinfo(nbl,ns,1,2)).eq.2014 .or.
<      .       abs(ibcinfo(nbl,ns,1,2)).eq.2016) then
---
>      .       abs(ibcinfo(nbl,ns,1,2)).eq.2014) then
210,211c208
<      .       abs(jbcinfo(nbl,ns,1,1)).eq.2014 .or.
<      .       abs(jbcinfo(nbl,ns,1,1)).eq.2016) then
---
>      .       abs(jbcinfo(nbl,ns,1,1)).eq.2014) then
278,279c275
<      .       abs(jbcinfo(nbl,ns,1,2)).eq.2014 .or.
<      .       abs(jbcinfo(nbl,ns,1,2)).eq.2016) then
---
>      .       abs(jbcinfo(nbl,ns,1,2)).eq.2014) then
346,347c342
<      .       abs(kbcinfo(nbl,ns,1,1)).eq.2014 .or.
<      .       abs(kbcinfo(nbl,ns,1,1)).eq.2016) then
---
>      .       abs(kbcinfo(nbl,ns,1,1)).eq.2014) then
414,415c409
<      .       abs(kbcinfo(nbl,ns,1,2)).eq.2014 .or.
<      .       abs(kbcinfo(nbl,ns,1,2)).eq.2016) then
---
>      .       abs(kbcinfo(nbl,ns,1,2)).eq.2014) then
Index: source/cfl3d/dist/qinter.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/qinter.F,v
retrieving revision 1.5
retrieving revision 1.4
diff -r1.5 -r1.4
9c9
< c     $Id: qinter.F,v 1.5 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: qinter.F,v 1.4 2002/06/10 13:32:35 rumsey Exp $
198,201d197
< #   ifdef FASTIO
<          call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,13)
< #   else
204d199
< #   endif
455,458d449
< #   ifdef FASTIO
<          call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,14)
< #   else
461d451
< #   endif
Index: source/cfl3d/dist/resetg.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/resetg.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
14c14
< c     $Id: resetg.F,v 1.4 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: resetg.F,v 1.3 2002/05/10 14:01:41 rumsey Exp $
287,290d286
< #   ifdef FASTIO
<       call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .              mycomm,mblk2nd,maxbl,15)
< #   else
293d288
< #   endif
Index: source/cfl3d/dist/resp.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/resp.F,v
retrieving revision 1.6
retrieving revision 1.5
diff -r1.6 -r1.5
24c24
< c     $Id: resp.F,v 1.6 2004/01/08 19:34:59 biedron Exp $
---
> c     $Id: resp.F,v 1.5 2003/07/07 14:14:57 biedron Exp $
1197c1197
<                   else if (ihstry.eq.1) then
---
>                   else
1202,1207d1201
<                   else
<                      if (nout.eq.1) write(23,1002)
<                      write(23,1020) nout,log10(real(rmsb)),real(cltsub),
<      .               real(cdtsub),real(cxtsub),real(cytsub),
<      .               real(cztsub),real(cmxtsub),real(cmytsub),
<      .               real(cmztsub)
1227,1228d1220
<  1002 format(4x,5hsubit,3x,11hlog(subres),7x,2hcl,12x,2hcd,
<      .       12x,2hcx,12x,2hcy,12x,2hcz,11x,3hcmz,11x,3hcmy,11x,3hcmz)
1231c1223
<  1020 format(3x,i6,9e14.5)
---
>  1020 format(3x,i6,5e14.5)
Index: source/cfl3d/dist/rrest.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/rrest.F,v
retrieving revision 1.11
retrieving revision 1.9
diff -r1.11 -r1.9
10c10
< c     $Id: rrest.F,v 1.11 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: rrest.F,v 1.9 2003/05/09 19:45:08 rumsey Exp $
160,161c160,161
<       write(901,'('' cgns read in rrest'')')
<       write(901,'(''  ...reading conserved variables and'',
---
>       write(11,'('' cgns read in rrest'')')
>       write(11,'(''  ...reading conserved variables and'',
163c163
<       write(901,'(''  (this may result in machine-order differences'',
---
>       write(11,'(''  (this may result in machine-order differences'',
191c191
<         write(901,'('' cgns reading specific BC values'')')
---
>         write(11,'('' cgns reading specific BC values'')')
203c203
<           write(901,'('' ERROR, cgns restart file has different'',
---
>           write(11,'('' ERROR, cgns restart file has different'',
205c205
<           write(901,'('' rho0w,c0w,xlength0w='',3e15.5)')
---
>           write(11,'('' rho0w,c0w,xlength0w='',3e15.5)')
207c207
<           write(901,'('' Stopping.'')')
---
>           write(11,'('' Stopping.'')')
211c211
<           write(901,'('' ERROR, cgns restart file has different'',
---
>           write(11,'('' ERROR, cgns restart file has different'',
213,214c213,214
<           write(901,'('' vk0w='',e15.5)') vk0w
<           write(901,'('' Stopping.'')')
---
>           write(11,'('' vk0w='',e15.5)') vk0w
>           write(11,'('' Stopping.'')')
218,219c218,219
<           write(901,'('' WARNING:  changing tinf!'')')
<           write(901,'(''    old='',f12.5,'' new='',f12.5)')
---
>           write(11,'('' WARNING:  changing tinf!'')')
>           write(11,'(''    old='',f12.5,'' new='',f12.5)')
653,654c653,654
<           write(901,'('' WARNING:  changing gamma!'')')
<           write(901,'(''    old='',f12.5,'' new='',f12.5)')
---
>           write(11,'('' WARNING:  changing gamma!'')')
>           write(11,'(''    old='',f12.5,'' new='',f12.5)')
658,659c658,659
<           write(901,'('' WARNING:  changing pr!'')')
<           write(901,'(''    old='',f12.5,'' new='',f12.5)')
---
>           write(11,'('' WARNING:  changing pr!'')')
>           write(11,'(''    old='',f12.5,'' new='',f12.5)')
663,664c663,664
<           write(901,'('' WARNING:  changing prt!'')')
<           write(901,'(''    old='',f12.5,'' new='',f12.5)')
---
>           write(11,'('' WARNING:  changing prt!'')')
>           write(11,'(''    old='',f12.5,'' new='',f12.5)')
668,669c668,669
<           write(901,'('' WARNING:  changing cbar!'')')
<           write(901,'(''    old='',f12.5,'' new='',f12.5)')
---
>           write(11,'('' WARNING:  changing cbar!'')')
>           write(11,'(''    old='',f12.5,'' new='',f12.5)')
791,792c791,792
<       if ((ivmxold.ge.6.and.ivmxold.le.15) .and.
<      .    (ivmx.ge.6.and.ivmx.le.15)) iread = 1
---
>       if ((ivmxold.ge.6.and.ivmxold.le.14) .and.
>      .    (ivmx.ge.6.and.ivmx.le.14)) iread = 1
1007,1008c1007
<      .        iv1.eq.13.or.iv2.eq.13.or.iv3.eq.13.or.
<      .        iv1.eq.15.or.iv2.eq.15.or.iv3.eq.15)) then
---
>      .        iv1.eq.13.or.iv2.eq.13.or.iv3.eq.13)) then
1024,1025c1023
<      .        iv1.eq.13.or.iv2.eq.13.or.iv3.eq.13.or.
<      .        iv1.eq.15.or.iv2.eq.15.or.iv3.eq.15)) then
---
>      .        iv1.eq.13.or.iv2.eq.13.or.iv3.eq.13)) then
1040,1041c1038
<      .       ivisc(1).eq.13.or.ivisc(2).eq.13.or.ivisc(3).eq.13.or.
<      .       ivisc(1).eq.15.or.ivisc(2).eq.15.or.ivisc(3).eq.15)
---
>      .       ivisc(1).eq.13.or.ivisc(2).eq.13.or.ivisc(3).eq.13)
1058,1059c1055
<      .       ivisc(1).eq.13.or.ivisc(2).eq.13.or.ivisc(3).eq.13.or.
<      .       ivisc(1).eq.15.or.ivisc(2).eq.15.or.ivisc(3).eq.15)
---
>      .       ivisc(1).eq.13.or.ivisc(2).eq.13.or.ivisc(3).eq.13)
Index: source/cfl3d/dist/rrestg.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/rrestg.F,v
retrieving revision 1.11
retrieving revision 1.9
diff -r1.11 -r1.9
18c18
< c     $Id: rrestg.F,v 1.11 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: rrestg.F,v 1.9 2003/09/08 13:51:26 rumsey Exp $
115,116c115
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
181c180
<          write(901,'('' reading 2nd order time data from cgns'',
---
>          write(11,'('' reading 2nd order time data from cgns'',
376c375
<             write(901,'('' reading dynamic mesh data from cgns file'',
---
>             write(11,'('' reading dynamic mesh data from cgns file'',
589c588
<                   write(901,'('' reading deforming grid info from'',
---
>                   write(11,'('' reading deforming grid info from'',
Index: source/cfl3d/dist/setslave.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/setslave.F,v
retrieving revision 1.9
retrieving revision 1.4
diff -r1.9 -r1.4
1,10c1,8
<       subroutine setslave(lw,lw2,w,mgwk,wk,nwork,maxbl,mxbli,maxgr,
<      .                    maxseg,nbci0,nbcj0,nbck0,nbcidim,nbcjdim,
<      .                    nbckdim,ibcinfo,jbcinfo,kbcinfo,nblock,
<      .                    idefrm,iadvance,nou,bou,nbuf,ibufdim,myid,
<      .                    myhost,mycomm,mblk2nd,icsi,icsf,jcsi,
<      .                    jcsf,kcsi,kcsf,islavept,nslave,nsegdfrm,
<      .                    idfrmseg,maxsegdg,iwk,iwork,nmaster,ngrid,
<      .                    jskip,kskip,iskip,nblg,levelg,lfgm,nblk,
<      .                    limblk,isva,nblelst,nnodes,iskmax,jskmax,
<      .                    kskmax) 
---
>       subroutine setslave(lw,lw2,w,mgwk,wk,nwork,maxbl,maxgr,maxseg,
>      .                    nbci0,nbcj0,nbck0,nbcidim,nbcjdim,nbckdim,
>      .                    ibcinfo,jbcinfo,kbcinfo,nblock,idefrm,
>      .                    iadvance,nou,bou,nbuf,ibufdim,myid,myhost,
>      .                    mycomm,mblk2nd,icsi,icsf,jcsi,jcsf,kcsi,
>      .                    kcsf,slavept,nslave,nsegdfrm,idfrmseg,
>      .                    maxsegdg,iwk,iwork,nmaster,ngrid,jskip,kskip,
>      .                    iskip,nblg,levelg,lfgm)
12c10
< c     $Id: setslave.F,v 1.9 2005/10/07 01:19:22 rebart Exp $
---
> c     $Id: setslave.F,v 1.4 2003/05/09 19:45:08 rumsey Exp $
54,65c52,53
<       dimension iskip(maxbl,500),jskip(maxbl,500),kskip(maxbl,500)
<       dimension islavept(nslave,nmaster,5),levelg(maxbl)
<       dimension nblk(2,mxbli),limblk(2,6,mxbli),
<      .          isva(2,2,mxbli)
<       dimension nsgst1(2),nsgst(0:maxbl,2)
<       dimension nskp1(3),nskp(3),in(3),im(3),ig(3),id(3),
<      .          iss(3,2),ise(3,2),ijktot(2,3)
<       dimension n11i(20,nslave),iimax(nslave),iimx1(nslave)
<       dimension nblelst(maxbl,2)
<       dimension iskmax(maxbl)
<       dimension jskmax(maxbl)
<       dimension kskmax(maxbl)
---
>       dimension iskip(maxbl),jskip(maxbl),kskip(maxbl)
>       dimension slavept(nslave,3,nmaster,5),levelg(maxbl)
83,84c71
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
---
>       common /deformz/ beta1,ismooth,negvol
86a74,75
> #if defined DIST_MPI
> c     set baseline tag values
88,93c77,83
<       islavept = 0
<       if (iunst.gt.1 .or. idef_ss.gt.0) then
<        do iseq=1,mseq
<          do n = 1,nslave
<            iimax(n)    = 1
<          enddo
---
>       ioffset  = maxbl
>       itag_ns  = 1
>       itag_wk  = itag_ns + ioffset
>       itag_org = itag_wk + ioffset
> #endif
> c
>       do iseq=1,mseq
96a87,146
> c     get a list of all points on deforming solid surfaces. the
> c     list structure is as folllows: each successive 9 entries
> c     in the list give, in order, the x, y, z, deltx, delty, deltz,
> c     xnm1, ynm1, znm1 values for the surface point (where xnm1, 
> c     etc. are the points at time n-1); these 9 data are repeated
> c     for each solid surface point that undergoes deformation. Thus,
> c     if there are a total of nsurf solid surface points that undergo
> c     deformation, the list will be of dimension 9*nsurf
> c 
>       nsurf = 0
>       do nbl = 1,nblock
>          iwk(nbl) = 0
>          if ((levelg(nbl).ge.lglobal .and.
>      .      levelg(nbl).le.levelt(iseq))) then
>             if (idefrm(nbl).gt.0 .and. idefrm(nbl).lt.999) then
>                call lead(nbl,lw,lw2,maxbl)
>                if (myid.eq.mblk2nd(nbl)) then
>                   call getsurf(w(lx),w(ly),w(lz),w(ldeltj),
>      .                         w(ldeltk),w(ldelti),w(lxnm1),
>      .                         w(lynm1),w(lznm1),icsi,icsf,
>      .                         jcsi,jcsf,kcsi,kcsf,wk,nwork,
>      .                         nbl,idim,jdim,kdim,nsurf,iwk(nbl),
>      .                         nsegdfrm,maxbl,idfrmseg,maxsegdg)
>                end if
> #if defined DIST_MPI
>                mytag = itag_ns + nbl
>                nd_srce = mblk2nd(nbl)
>                if (myid.eq.mblk2nd(nbl)) then
>                   call MPI_Send(iwk(nbl),1,MPI_INTEGER,myhost,mytag,
>      .                          mycomm,ierr)
>                else if (myid.eq.myhost) then
>                   call MPI_Recv(iwk(nbl),1,MPI_INTEGER,nd_srce,mytag,
>      .                          mycomm,istat,ierr)
>                end if
>                if (iwk(nbl).gt.0) then
>                   mytag   = itag_wk + nbl
>                   nd_srce = mblk2nd(nbl)
>                   numdat  = 9*iwk(nbl)
>                   if (myid.eq.mblk2nd(nbl)) then
>                      call MPI_Send(wk,numdat,MY_MPI_REAL,
>      .                             myhost,mytag,mycomm,ierr) 
>                   else if (myid.eq.myhost) then
>                      ns = 9*nsurf+1
>                      call MPI_Recv(wk(ns),numdat,MY_MPI_REAL,
>      .                             nd_srce,mytag,mycomm,istat,ierr)
>                   end if
>                end if
> #endif
>                if (myid.eq.myhost) then
>                   nsurf = nsurf + iwk(nbl)
>                end if
>             end if
>          end if
>       end do
> c
> #if defined DIST_MPI
>       call MPI_Bcast (nsurf,1,MPI_INTEGER,myhost,mycomm,ierr) 
>       call MPI_Bcast (wk,nsurf*9,MY_MPI_REAL,
>      .                myhost,mycomm,ierr)
> #endif
97a148,153
>       if (nsurf.gt.iwork) then
>          nou(1) = min(nou(1)+1,ibufdim)
>          write(bou(nou(1),1),'(''stopping in setslave...parameter '',
>      .                         ''iwork too small'')')
>          call termn8(myid,-1,ibufdim,nbuf,bou,nou)
>       end if
99,105c155,156
<          do nbl = 0,nblock
<           do nn = 1,2
<             nsgst(nbl,nn) = 0
<           enddo
<          enddo
<          ivert     = 0
<          nbl2      = 1
---
>       if (iunst.gt.1 .or. idef_ss.gt.0) then
>          ivert = 0
109c160
< c           if (myid.eq.mblk2nd(nbl)) then
---
>             if (myid.eq.mblk2nd(nbl) .and. idefrm(nbl) .gt. 0) then
111,692d161
<                iskp = iskip(nbl,1)
<                jskp = jskip(nbl,1)
<                kskp = kskip(nbl,1)
<                if(abs(isktyp).eq.1) then
<                  iskmax(nbl) = (idim-1)/iskp + 1
<                  jskmax(nbl) = (jdim-1)/jskp + 1
<                  kskmax(nbl) = (kdim-1)/kskp + 1
<                  nsgst(nbl2,1) = nsgst(nbl2-1,1) + 
<      .              (jdim+jskp-1)*(kdim+kskp-1)*(idim+iskp-1)
<      .                 /jskp/kskp/iskp
<                  nsgst(nbl2,2) = nbl
<                  nbl2  = nbl2 + 1
<                  do i=1,idim,iskp 
<                    do k=1,kdim,kskp
<                      do j=1,jdim,jskp
<                        ll = j-1+jdim*(k-1)+jdim*kdim*(i-1) 
<                        ivert = ivert + 1
<                        if (ivert.gt.nslave) then
<                          nou(1) = min(nou(1)+1,ibufdim)
<                          write(bou(nou(1),1),
<      .                       '(''stopping...parameter nslave '',
<      .                              ''too small'')')
<                          call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<                        end if
<                        islavept(ivert,1,iseq) = ll  
<                        islavept(ivert,8,iseq) = 1
<                        islavept(ivert,9,iseq) = nbl 
<                        jm1 =-1
<                        km1 =-(jdim+jskp-1)/jskp
<                        im1 =-(jdim+jskp-1)*(kdim+kskp-1)/jskp/kskp
<                        jp1 = 1
<                        kp1 = (jdim+jskp-1)/jskp
<                        ip1 = (jdim+jskp-1)*(kdim+kskp-1)/jskp/kskp
<                        if(j.eq.   1) jm1 = 0 
<                        if(j.eq.jdim) jp1 = 0 
<                        if(k.eq.   1) km1 = 0 
<                        if(k.eq.kdim) kp1 = 0 
<                        if(i.eq.   1) im1 = 0 
<                        if(i.eq.idim) ip1 = 0 
<                        if(i2d.ne.0) goto 1000
<                          do nseg = 1,nbci0(nbl)
<                           ista = 1
<                           iend = 1
<                           jsta = ibcinfo(nbl,nseg,2,1)
<                           jend = ibcinfo(nbl,nseg,3,1)
<                           ksta = ibcinfo(nbl,nseg,4,1)
<                           kend = ibcinfo(nbl,nseg,5,1)
<                           if (ibcinfo(nbl,nseg,1,1).ne.2005) then     
<                            if(ibcinfo(nbl,nseg,1,1).eq.1005.or. 
<      .                        ibcinfo(nbl,nseg,1,1).eq.1006.or. 
<      .                        ibcinfo(nbl,nseg,1,1).eq.2004.or.   
<      .                        ibcinfo(nbl,nseg,1,1).eq.1002.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.1000.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.1003.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.1008.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2003.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2006.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2007.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2008.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2102) then
<                             if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                        and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                         then 
<                               islavept(ivert,8,iseq)=0
<                             end if
<                            end if
<                           end if
<                          enddo
<                          do nseg = 1,nbcidim(nbl)
<                           ista = idim
<                           iend = idim
<                           jsta = ibcinfo(nbl,nseg,2,2)
<                           jend = ibcinfo(nbl,nseg,3,2)
<                           ksta = ibcinfo(nbl,nseg,4,2)
<                           kend = ibcinfo(nbl,nseg,5,2)
<                           if (ibcinfo(nbl,nseg,1,2).ne.2005) then
<                            if(ibcinfo(nbl,nseg,1,2).eq.1005.or. 
<      .                        ibcinfo(nbl,nseg,1,2).eq.1006.or. 
<      .                        ibcinfo(nbl,nseg,1,2).eq.2004.or.   
<      .                        ibcinfo(nbl,nseg,1,2).eq.1002.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.1000.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.1003.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.1008.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2003.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2006.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2007.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2008.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2102) then
<                             if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                        and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                         then 
<                               islavept(ivert,8,iseq)=0
<                             end if
<                            end if
<                           end if
<                          enddo
< 1000                   continue
<                        do nseg = 1,nbcj0(nbl)
<                         ista = jbcinfo(nbl,nseg,2,1)
<                         iend = jbcinfo(nbl,nseg,3,1)
<                         jsta = 1
<                         jend = 1
<                         ksta = jbcinfo(nbl,nseg,4,1)
<                         kend = jbcinfo(nbl,nseg,5,1)
<                         if (jbcinfo(nbl,nseg,1,1).ne.2005) then
<                          if(jbcinfo(nbl,nseg,1,1).eq.1005.or. 
<      .                      jbcinfo(nbl,nseg,1,1).eq.1006.or. 
<      .                      jbcinfo(nbl,nseg,1,1).eq.2004.or.   
<      .                      jbcinfo(nbl,nseg,1,1).eq.1002.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.1000.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.1003.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.1008.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2003.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2006.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2007.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2008.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2102.or.
<      .                     (jbcinfo(nbl,nseg,1,1).eq.1013.and.   
<      .                      idim.eq.2)) then
<                           if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                       and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                       then 
<                             islavept(ivert,8,iseq)=0
<                           end if
<                          end if
<                         end if
<                        enddo
<                        do nseg = 1,nbcjdim(nbl)
<                         ista = jbcinfo(nbl,nseg,2,2)
<                         iend = jbcinfo(nbl,nseg,3,2)
<                         jsta = jdim
<                         jend = jdim
<                         ksta = jbcinfo(nbl,nseg,4,2)
<                         kend = jbcinfo(nbl,nseg,5,2)
<                         if (jbcinfo(nbl,nseg,1,2).ne.2005) then
<                          if(jbcinfo(nbl,nseg,1,2).eq.1005.or. 
<      .                      jbcinfo(nbl,nseg,1,2).eq.1006.or. 
<      .                      jbcinfo(nbl,nseg,1,2).eq.2004.or.   
<      .                      jbcinfo(nbl,nseg,1,2).eq.1002.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.1000.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.1003.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.1008.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2003.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2006.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2007.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2008.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2102.or.
<      .                     (jbcinfo(nbl,nseg,1,2).eq.1013.and.   
<      .                      idim.eq.2)) then
<                           if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                       and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                       then 
<                             islavept(ivert,8,iseq)=0
<                           end if
<                          end if
<                         end if
<                        enddo
<                        do nseg = 1,nbck0(nbl)
<                         ista = kbcinfo(nbl,nseg,2,1)
<                         iend = kbcinfo(nbl,nseg,3,1)
<                         jsta = kbcinfo(nbl,nseg,4,1)
<                         jend = kbcinfo(nbl,nseg,5,1)
<                         ksta = 1
<                         kend = 1
<                         if (kbcinfo(nbl,nseg,1,1).ne.2005) then
<                          if(kbcinfo(nbl,nseg,1,1).eq.1005.or. 
<      .                      kbcinfo(nbl,nseg,1,1).eq.1006.or. 
<      .                      kbcinfo(nbl,nseg,1,1).eq.2004.or.   
<      .                      kbcinfo(nbl,nseg,1,1).eq.1002.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.1000.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.1003.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.1008.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2003.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2006.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2007.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2008.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2102.or.
<      .                     (kbcinfo(nbl,nseg,1,1).eq.1013.and.   
<      .                      idim.eq.2)) then
<                           if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                       and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                       then 
<                             islavept(ivert,8,iseq)=0
<                           end if
<                          end if
<                         end if
<                        enddo
<                        do nseg = 1,nbckdim(nbl)
<                         ista = kbcinfo(nbl,nseg,2,2)
<                         iend = kbcinfo(nbl,nseg,3,2)
<                         jsta = kbcinfo(nbl,nseg,4,2)
<                         jend = kbcinfo(nbl,nseg,5,2)
<                         ksta = kdim
<                         kend = kdim
<                         if (kbcinfo(nbl,nseg,1,2).ne.2005) then
<                          if(kbcinfo(nbl,nseg,1,2).eq.1005.or. 
<      .                      kbcinfo(nbl,nseg,1,2).eq.1006.or. 
<      .                      kbcinfo(nbl,nseg,1,2).eq.2004.or.   
<      .                      kbcinfo(nbl,nseg,1,2).eq.1002.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.1000.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.1003.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.1008.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2003.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2006.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2007.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2008.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2102.or.
<      .                     (kbcinfo(nbl,nseg,1,2).eq.1013.and.   
<      .                      idim.eq.2)) then
<                           if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                       and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                       then 
<                             islavept(ivert,8,iseq)=0
<                           end if
<                          end if
<                         end if
<                        enddo
<                        islavept(ivert,2,iseq) = ivert+jm1  
<                        islavept(ivert,3,iseq) = ivert+jp1  
<                        islavept(ivert,4,iseq) = ivert+km1  
<                        islavept(ivert,5,iseq) = ivert+kp1  
<                        islavept(ivert,6,iseq) = ivert+im1  
<                        islavept(ivert,7,iseq) = ivert+ip1  
<                      end do
<                    end do
<                  end do
<                else
<                  do n = 1,500
<                    if(iskip(nbl,n).eq.0) then
<                       iskmax(nbl) = n - 1
<                       goto 10
<                    end if
<                  enddo
< 10               continue
<                  do n = 1,500
<                    if(jskip(nbl,n).eq.0) then
<                       jskmax(nbl) = n - 1
<                       goto 20
<                    end if
<                  enddo
< 20               continue
<                  do n = 1,500
<                    if(kskip(nbl,n).eq.0) then
<                       kskmax(nbl) = n - 1
<                       goto 30
<                    end if
<                  enddo
< 30               continue
<                  itot = iskmax(nbl) 
<                  jtot = jskmax(nbl) 
<                  ktot = kskmax(nbl) 
<                  nsgst(nbl2,1) = nsgst(nbl2-1,1) + itot*jtot*ktot 
<                  nsgst(nbl2,2) = nbl
<                  nbl2  = nbl2 + 1
<                  do i1=1,itot
<                    i = iskip(nbl,i1)
<                    do k1=1,ktot
<                      k = kskip(nbl,k1)
<                      do j1=1,jtot
<                        j = jskip(nbl,j1)
<                        ll = j-1+jdim*(k-1)+jdim*kdim*(i-1) 
<                        iwrap = 0
<                        jwrap = 0
<                        kwrap = 0
<                        ivert = ivert + 1
<                        if (ivert.gt.nslave) then
<                          nou(1) = min(nou(1)+1,ibufdim)
<                          write(bou(nou(1),1),
<      .                       '(''stopping...parameter nslave '',
<      .                              ''too small'')')
<                          call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<                        end if
<                        islavept(ivert,1,iseq) = ll  
<                        islavept(ivert,8,iseq) = 1
<                        islavept(ivert,9,iseq) = nbl 
<                        jm1 =-1
<                        km1 =-jtot
<                        im1 =-jtot*ktot
<                        jp1 = 1
<                        kp1 = jtot
<                        ip1 = jtot*ktot
<                        if(j.eq.   1) jm1 = 0 
<                        if(j.eq.jdim) jp1 = 0 
<                        if(k.eq.   1) km1 = 0 
<                        if(k.eq.kdim) kp1 = 0 
<                        if(i.eq.   1) im1 = 0 
<                        if(i.eq.idim) ip1 = 0 
<                        if(i2d.ne.0) goto 2000
<                          do nseg = 1,nbci0(nbl)
<                           ista = 1
<                           iend = 1
<                           jsta = ibcinfo(nbl,nseg,2,1)
<                           jend = ibcinfo(nbl,nseg,3,1)
<                           ksta = ibcinfo(nbl,nseg,4,1)
<                           kend = ibcinfo(nbl,nseg,5,1)
<                           if (ibcinfo(nbl,nseg,1,1).ne.2005) then     
<                            if(ibcinfo(nbl,nseg,1,1).eq.1005.or. 
<      .                        ibcinfo(nbl,nseg,1,1).eq.1006.or. 
<      .                        ibcinfo(nbl,nseg,1,1).eq.2004.or.   
<      .                        ibcinfo(nbl,nseg,1,1).eq.1002.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.1000.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.1003.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.1008.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2003.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2006.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2007.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2008.or.
<      .                        ibcinfo(nbl,nseg,1,1).eq.2102) then
<                             if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                        and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                         then 
<                               islavept(ivert,8,iseq)=0
<                             end if
<                            end if
<                           end if
<                          enddo
<                          do nseg = 1,nbcidim(nbl)
<                           ista = idim
<                           iend = idim
<                           jsta = ibcinfo(nbl,nseg,2,2)
<                           jend = ibcinfo(nbl,nseg,3,2)
<                           ksta = ibcinfo(nbl,nseg,4,2)
<                           kend = ibcinfo(nbl,nseg,5,2)
<                           if (ibcinfo(nbl,nseg,1,2).ne.2005) then
<                            if(ibcinfo(nbl,nseg,1,2).eq.1005.or. 
<      .                        ibcinfo(nbl,nseg,1,2).eq.1006.or. 
<      .                        ibcinfo(nbl,nseg,1,2).eq.2004.or.   
<      .                        ibcinfo(nbl,nseg,1,2).eq.1002.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.1000.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.1003.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.1008.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2003.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2006.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2007.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2008.or.
<      .                        ibcinfo(nbl,nseg,1,2).eq.2102) then
<                             if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                        and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                         then 
<                               islavept(ivert,8,iseq)=0
<                             end if
<                            end if
<                           end if
<                          enddo
< 2000                   continue
<                        do nseg = 1,nbcj0(nbl)
<                         ista = jbcinfo(nbl,nseg,2,1)
<                         iend = jbcinfo(nbl,nseg,3,1)
<                         jsta = 1
<                         jend = 1
<                         ksta = jbcinfo(nbl,nseg,4,1)
<                         kend = jbcinfo(nbl,nseg,5,1)
<                         if (jbcinfo(nbl,nseg,1,1).ne.2005) then
<                          if(jbcinfo(nbl,nseg,1,1).eq.1005.or. 
<      .                      jbcinfo(nbl,nseg,1,1).eq.1006.or. 
<      .                      jbcinfo(nbl,nseg,1,1).eq.2004.or.   
<      .                      jbcinfo(nbl,nseg,1,1).eq.1002.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.1000.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.1003.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.1008.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2003.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2006.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2007.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2008.or.
<      .                      jbcinfo(nbl,nseg,1,1).eq.2102.or.
<      .                     (jbcinfo(nbl,nseg,1,1).eq.1013.and.   
<      .                      idim.eq.2)) then
<                           if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                       and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                       then 
<                             islavept(ivert,8,iseq)=0
<                           end if
<                          end if
<                         end if
<                        enddo
<                        do nseg = 1,nbcjdim(nbl)
<                         ista = jbcinfo(nbl,nseg,2,2)
<                         iend = jbcinfo(nbl,nseg,3,2)
<                         jsta = jdim
<                         jend = jdim
<                         ksta = jbcinfo(nbl,nseg,4,2)
<                         kend = jbcinfo(nbl,nseg,5,2)
<                         if (jbcinfo(nbl,nseg,1,2).ne.2005) then
<                          if(jbcinfo(nbl,nseg,1,2).eq.1005.or. 
<      .                      jbcinfo(nbl,nseg,1,2).eq.1006.or. 
<      .                      jbcinfo(nbl,nseg,1,2).eq.2004.or.   
<      .                      jbcinfo(nbl,nseg,1,2).eq.1002.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.1000.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.1003.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.1008.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2003.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2006.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2007.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2008.or.
<      .                      jbcinfo(nbl,nseg,1,2).eq.2102.or.
<      .                     (jbcinfo(nbl,nseg,1,2).eq.1013.and.   
<      .                      idim.eq.2)) then
<                           if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                       and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                       then 
<                             islavept(ivert,8,iseq)=0
<                           end if
<                          end if
<                         end if
<                        enddo
<                        do nseg = 1,nbck0(nbl)
<                         ista = kbcinfo(nbl,nseg,2,1)
<                         iend = kbcinfo(nbl,nseg,3,1)
<                         jsta = kbcinfo(nbl,nseg,4,1)
<                         jend = kbcinfo(nbl,nseg,5,1)
<                         ksta = 1
<                         kend = 1
<                         if (kbcinfo(nbl,nseg,1,1).ne.2005) then
<                          if(kbcinfo(nbl,nseg,1,1).eq.1005.or. 
<      .                      kbcinfo(nbl,nseg,1,1).eq.1006.or. 
<      .                      kbcinfo(nbl,nseg,1,1).eq.2004.or.   
<      .                      kbcinfo(nbl,nseg,1,1).eq.1002.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.1000.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.1003.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.1008.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2003.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2006.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2007.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2008.or.
<      .                      kbcinfo(nbl,nseg,1,1).eq.2102.or.
<      .                     (kbcinfo(nbl,nseg,1,1).eq.1013.and.   
<      .                      idim.eq.2)) then
<                           if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                       and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                       then 
<                             islavept(ivert,8,iseq)=0
<                           end if
<                          end if
<                         end if
<                        enddo
<                        do nseg = 1,nbckdim(nbl)
<                         ista = kbcinfo(nbl,nseg,2,2)
<                         iend = kbcinfo(nbl,nseg,3,2)
<                         jsta = kbcinfo(nbl,nseg,4,2)
<                         jend = kbcinfo(nbl,nseg,5,2)
<                         ksta = kdim
<                         kend = kdim
<                         if (kbcinfo(nbl,nseg,1,2).ne.2005) then
<                          if(kbcinfo(nbl,nseg,1,2).eq.1005.or. 
<      .                      kbcinfo(nbl,nseg,1,2).eq.1006.or. 
<      .                      kbcinfo(nbl,nseg,1,2).eq.2004.or.   
<      .                      kbcinfo(nbl,nseg,1,2).eq.1002.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.1000.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.1003.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.1008.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2003.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2006.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2007.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2008.or.
<      .                      kbcinfo(nbl,nseg,1,2).eq.2102.or.
<      .                     (kbcinfo(nbl,nseg,1,2).eq.1013.and.   
<      .                      idim.eq.2)) then
<                           if(i.ge.ista.and.i.le.iend.and.j.ge.jsta.
<      .                       and.j.le.jend.and.k.ge.ksta.and.k.le.kend)
<      .                       then 
<                             islavept(ivert,8,iseq)=0
<                           end if
<                          end if
<                         end if
<                        enddo
<                        islavept(ivert,2,iseq) = ivert+jm1  
<                        islavept(ivert,3,iseq) = ivert+jp1  
<                        islavept(ivert,4,iseq) = ivert+km1  
<                        islavept(ivert,5,iseq) = ivert+kp1  
<                        islavept(ivert,6,iseq) = ivert+im1  
<                        islavept(ivert,7,iseq) = ivert+ip1  
<                      end do
<                    end do
<                  end do
<                end if
< c           end if
<           end if
<          end do 
<          do nbl = nblock,1,-1
<           nsgst(nbl,1) = nsgst(nbl-1,1)
<          enddo
<          ivert = 0
<          do m = 1,mxbli
<           nbl1 = nblk(1,m)
<           if ((levelg(nbl1).ge.lglobal .and.
<      .         levelg(nbl1).le.levelt(iseq))) then
<             do nbl = 1,nblock
<               if(nsgst(nbl,2).eq.nblk(1,m)) then
<                  nsgst12 = nsgst(nbl,2)
<                  nsgst11 = nsgst(nbl,1)
<               end if
<               if(nsgst(nbl,2).eq.nblk(2,m)) then
<                  nsgst22 = nsgst(nbl,2)
<                  nsgst21 = nsgst(nbl,1)
<               end if
<             enddo
<             call lead(nsgst12,lw,lw2,maxbl)
<             idim1 = idim 
<             jdim1 = jdim 
<             kdim1 = kdim 
<             call lead(nsgst22,lw,lw2,maxbl)
<             idim2 = idim 
<             jdim2 = jdim 
<             kdim2 = kdim 
< c
< c  Use limblk(2...) data as boundary data for this block
< c                
<             do nn = 1,3
<               iss(nn,1)= 0
<               ise(nn,1)= 0
<               iss(nn,2)= 0
<               ise(nn,2)= 0
<             enddo
<             isva21 = isva(2,1,m)
<             isva22 = isva(2,2,m)
<             isva11 = isva(1,1,m)
<             isva12 = isva(1,2,m)
<             if(isva(2,1,m).eq.1.and.isva(2,2,m).eq.2) then
<              isva23 = 3
<             else if(isva(2,2,m).eq.1.and.isva(2,1,m).eq.2) then
<              isva23 = 3
<             else if(isva(2,1,m).eq.2.and.isva(2,2,m).eq.3) then
<              isva23 = 1
<             else if(isva(2,2,m).eq.2.and.isva(2,1,m).eq.3) then
<              isva23 = 1
<             else if(isva(2,1,m).eq.1.and.isva(2,2,m).eq.3) then
<              isva23 = 2
<             else if(isva(2,2,m).eq.1.and.isva(2,1,m).eq.3) then
<              isva23 = 2
<             end if
<             if(isva(1,1,m).eq.1.and.isva(1,2,m).eq.2) then
<              isva13 = 3
<             else if(isva(1,2,m).eq.1.and.isva(1,1,m).eq.2) then
<              isva13 = 3
<             else if(isva(1,1,m).eq.2.and.isva(1,2,m).eq.3) then
<              isva13 = 1
<             else if(isva(1,2,m).eq.2.and.isva(1,1,m).eq.3) then
<              isva13 = 1
<             else if(isva(1,1,m).eq.1.and.isva(1,2,m).eq.3) then
<              isva13 = 2
<             else if(isva(1,2,m).eq.1.and.isva(1,1,m).eq.3) then
<              isva13 = 2
<             end if
<             lmb2210= limblk(2,isva21  ,m) 
<             lmb2213= limblk(2,isva21+3,m) 
<             lmb2220= limblk(2,isva22  ,m) 
<             lmb2223= limblk(2,isva22+3,m) 
<             lmb2230= limblk(2,isva23  ,m) 
<             lmb2233= limblk(2,isva23+3,m) 
<             lmb1110= limblk(1,isva11  ,m) 
<             lmb1113= limblk(1,isva11+3,m) 
<             lmb1120= limblk(1,isva12  ,m) 
<             lmb1123= limblk(1,isva12+3,m) 
<             lmb1130= limblk(1,isva13  ,m) 
<             lmb1133= limblk(1,isva13+3,m) 
<             iss(isva23,2) = lmb2230    
<             ise(isva23,2) = lmb2233 
<             if(lmb2210.le.lmb2213) then
<               if(lmb2220.le.lmb2223) then 
<                iss(isva21,2) = lmb2210    
<                ise(isva21,2) = lmb2213+1 
<                iss(isva22,2) = lmb2220    
<                ise(isva22,2) = lmb2223+1 
<               else
<                iss(isva21,2) = lmb2210    
<                ise(isva21,2) = lmb2213+1 
<                iss(isva22,2) = lmb2220+1    
<                ise(isva22,2) = lmb2223 
<               end if
<             else
<               if(lmb2220.le.lmb2223) then 
<                iss(isva21,2) = lmb2210+1    
<                ise(isva21,2) = lmb2213 
<                iss(isva22,2) = lmb2220    
<                ise(isva22,2) = lmb2223+1 
<               else
<                iss(isva21,2) = lmb2210+1    
<                ise(isva21,2) = lmb2213 
<                iss(isva22,2) = lmb2220+1    
<                ise(isva22,2) = lmb2223 
<               end if
<             end if
694,731c163,194
< c  Use limblk(1...) data as boundary data for this block
< c                
<             iss(isva13,1) = lmb1130    
<             ise(isva13,1) = lmb1133 
<             if(lmb1110.le.lmb1113) then 
<               if(lmb1120.le.lmb1123) then 
<                iss(isva11,1) = lmb1110    
<                ise(isva11,1) = lmb1113+1 
<                iss(isva12,1) = lmb1120    
<                ise(isva12,1) = lmb1123+1 
<               else
<                iss(isva11,1) = lmb1110    
<                ise(isva11,1) = lmb1113+1 
<                iss(isva12,1) = lmb1120+1    
<                ise(isva12,1) = lmb1123 
<               end if
<             else
<               if(lmb1120.le.lmb1123) then 
<                iss(isva11,1) = lmb1110+1    
<                ise(isva11,1) = lmb1113 
<                iss(isva12,1) = lmb1120    
<                ise(isva12,1) = lmb1123+1 
<               else
<                iss(isva11,1) = lmb1110+1    
<                ise(isva11,1) = lmb1113 
<                iss(isva12,1) = lmb1120+1    
<                ise(isva12,1) = lmb1123 
<               end if
<             end if
<             if(abs(isktyp).eq.1) then 
<               do ii = 1,3
<                 do jj = 1,2
<                   if(iss(ii,jj).eq.0.or.ise(ii,jj).eq.0) then
<                          nou(1) = min(nou(1)+1,ibufdim)
<                          write(bou(nou(1),1),
<      .          '(''stopping...deforming mesh control points do not '',
<      .                              ''match blocking end points'')')
<                          call termn8(myid,-1,ibufdim,nbuf,bou,nou)
---
> c              determine the master surface point for the 4 corner
> c              points of each block subface that is NOT on a solid
> c              surface.
> c
>                iskp = iskip(nbl)
>                jskp = jskip(nbl)
>                kskp = kskip(nbl)
> c
> c              i=1 subfaces
> c
>                do nseg=1,nbci0(nbl)
>                   ii     = 1
>                   ibctyp = ibcinfo(nbl,nseg,1,ii)
>                   if (abs(ibctyp).ne.2004 .and.
>      .                abs(ibctyp).ne.2014 .and.
>      .                abs(ibctyp).ne.1005 .and.
>      .                abs(ibctyp).ne.1006 .or.
>      .                real(beta1).lt.0.) then
>                       js = ibcinfo(nbl,nseg,2,ii)
>                       je = ibcinfo(nbl,nseg,3,ii)
>                       ks = ibcinfo(nbl,nseg,4,ii)
>                       ke = ibcinfo(nbl,nseg,5,ii)
>                       do j=js,je,jskp
>                          do k=ks,ke,kskp
>                             call setcorner(j,k,1,w(lx),w(ly),
>      .                                     w(lz),w(lx),w(ly),w(lz),
>      .                                     jdim,kdim,idim,wk,nsurf,1,
>      .                                     ivert,slavept,nslave,nou,
>      .                                     bou,ibufdim,nbuf,myid,
>      .                                     iwk,nmaster,iseq)
>                          end do
>                       end do
733,969c196,221
<                 enddo
<               enddo
<               iskp0  = iskip(nsgst12,1)
<               jskp0  = jskip(nsgst12,1) 
<               kskp0  = kskip(nsgst12,1) 
<               nskp(1)= iskip(nsgst12,1)
<               nskp(2)= jskip(nsgst12,1) 
<               nskp(3)= kskip(nsgst12,1) 
<               iskp2  = iskip(nsgst22,1)
<               jskp2  = jskip(nsgst22,1) 
<               kskp2  = kskip(nsgst22,1) 
<               nskp1(1)  = iskip(nsgst22,1)
<               nskp1(2)  = jskip(nsgst22,1) 
<               nskp1(3)  = kskip(nsgst22,1) 
<               do nn = 1,3
<                if(iss(nn,1).eq.ise(nn,1)) nskp(nn) = 0
<                if(iss(nn,1).gt.ise(nn,1)) nskp(nn) = -nskp(nn) 
<               enddo
<               do nn = 1,3
<                if(iss(nn,2).gt.ise(nn,2)) nskp1(nn) = -nskp1(nn) 
<               enddo
<               if     (iss(2,1).eq.ise(2,1).and.iss(2,1).eq.1    ) then
<                 inc1= 1
<                 jj1 = 2
<               else if(iss(2,1).eq.ise(2,1).and.iss(2,1).eq.jdim1) then
<                 inc1=-1
<                 jj1 = 3
<               else if(iss(3,1).eq.ise(3,1).and.iss(3,1).eq.1    ) then
<                 inc1= (jdim1+jskp0-1)/jskp0 
<                 jj1 = 4
<               else if(iss(3,1).eq.ise(3,1).and.iss(3,1).eq.kdim1) then
<                 inc1=-(jdim1+jskp0-1)/jskp0 
<                 jj1 = 5
<               else if(iss(1,1).eq.ise(1,1).and.iss(1,1).eq.1    ) then
<                 inc1= (jdim1+jskp0-1)*(kdim1+kskp0-1)/jskp0/kskp0 
<                 jj1 = 6
<               else
<                 inc1=-(jdim1+jskp0-1)*(kdim1+kskp0-1)/jskp0/kskp0 
<                 jj1 = 7
<               end if
<               if     (iss(2,2).eq.ise(2,2).and.iss(2,2).eq.1    ) then
<                 inc2= 1
<                 jj2 = 2
<               else if(iss(2,2).eq.ise(2,2).and.iss(2,2).eq.jdim2) then
<                 inc2=-1
<                 jj2 = 3
<               else if(iss(3,2).eq.ise(3,2).and.iss(3,2).eq.1    ) then
<                 inc2= (jdim2+jskp2-1)/jskp2 
<                 jj2 = 4
<               else if(iss(3,2).eq.ise(3,2).and.iss(3,2).eq.kdim2) then
<                 inc2=-(jdim2+jskp2-1)/jskp2 
<                 jj2 = 5
<               else if(iss(1,2).eq.ise(1,2).and.iss(1,2).eq.1    ) then
<                 inc2= (jdim2+jskp2-1)*(kdim2+kskp2-1)/jskp2/kskp2 
<                 jj2 = 6
<               else
<                 inc2=-(jdim2+jskp2-1)*(kdim2+kskp2-1)/jskp2/kskp2 
<                 jj2 = 7
<               end if
<               do nn = 1,2
<                in(nn) = isva(1,nn,m)
<                im(nn) = isva(2,nn,m)
<               enddo
<               in(3) = isva13
<               im(3) = isva23
<               id(in(1)) = iss(in(1),1)
<               do i2= iss(im(1),2),ise(im(1),2),nskp1(im(1))
<                 ig(im(1)) = i2
<                 id(in(3)) = iss(in(3),1)
<                 do k2= iss(im(3),2),ise(im(3),2),nskp1(im(3)) 
<                   ig(im(3)) = k2
<                   id(in(2)) = iss(in(2),1)
<                   do j2= iss(im(2),2),ise(im(2),2),nskp1(im(2)) 
<                     ig(im(2)) = j2
<                     ll1=(id(2)+jskp0-1)/jskp0 + 
<      .                  (jdim1+jskp0-1)*(id(3)      -1)/jskp0/kskp0+  
<      .                  (jdim1+jskp0-1)*(kdim1+kskp0-1)*
<      .                  (id(1)      -1)/jskp0/kskp0/iskp0 
<                     ll2=(ig(2)+jskp2-1)/jskp2 + 
<      .                  (jdim2+jskp2-1)*(ig(3)      -1)/jskp2/kskp2+  
<      .                  (jdim2+jskp2-1)*(kdim2+kskp2-1)*
<      .                  (ig(1)      -1)/jskp2/kskp2/iskp2 
<                     islavept(nsgst11+ll1,jj1,iseq)=nsgst21+ll2+inc2 
<                     if(nsgst11+ll1.ne.nsgst21+ll2) then
<                       iimax(nsgst11+ll1) = iimax(nsgst11+ll1) + 1
<                       ii3 = 10 + iimax(nsgst11+ll1) 
<                       islavept(nsgst11+ll1,ii3,iseq) = nsgst21+ll2 
<                       iimax(nsgst21+ll2) = iimax(nsgst21+ll2) + 1
<                       ii3 = 10 + iimax(nsgst21+ll2) 
<                       islavept(nsgst21+ll2,ii3,iseq) = nsgst11+ll1 
<                     end if
<                     islavept(nsgst21+ll2,jj2,iseq)=nsgst11+ll1+inc1  
<                     id(in(2)) = id(in(2)) + nskp(in(2))
<                   enddo
<                   id(in(3)) = id(in(3)) + nskp(in(3))
<                 enddo
<                 id(in(1)) = id(in(1)) + nskp(in(1))
<               enddo    
<             else
<               do ii = 1,3
<                 do jj = 1,2
<                   if(iss(ii,jj).eq.0.or.ise(ii,jj).eq.0) then
<                          nou(1) = min(nou(1)+1,ibufdim)
<                          write(bou(nou(1),1),
<      .          '(''stopping...deforming mesh control points do not '',
<      .                              ''match blocking end points'')')
<                          call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<                   end if
<                 enddo
<               enddo
<               do nn = 1,3
<                nskp(nn) = 1
<                if(iss(nn,1).eq.ise(nn,1)) nskp(nn) = 0
<                if(iss(nn,1).gt.ise(nn,1)) nskp(nn) = -1
<               enddo
<               do nn = 1,3
<                nskp1(nn) = 1
<                if(iss(nn,2).gt.ise(nn,2)) nskp1(nn) = -1
<               enddo
<               ijktot(1,1)= iskmax(nsgst12)
<               ijktot(1,2)= jskmax(nsgst12)
<               ijktot(1,3)= kskmax(nsgst12)
<               ijktot(2,1)= iskmax(nsgst22)
<               ijktot(2,2)= jskmax(nsgst22)
<               ijktot(2,3)= kskmax(nsgst22)
<               if     (iss(2,1).eq.ise(2,1).and.iss(2,1).eq.1    ) then
<                 inc1= 1
<                 jj1 = 2
<               else if(iss(2,1).eq.ise(2,1).and.iss(2,1).eq.jdim1) then
<                 inc1=-1
<                 jj1 = 3
<               else if(iss(3,1).eq.ise(3,1).and.iss(3,1).eq.1    ) then
<                 inc1= ijktot(1,2) 
<                 jj1 = 4
<               else if(iss(3,1).eq.ise(3,1).and.iss(3,1).eq.kdim1) then
<                 inc1=-ijktot(1,2) 
<                 jj1 = 5
<               else if(iss(1,1).eq.ise(1,1).and.iss(1,1).eq.1    ) then
<                 inc1= ijktot(1,2)*ijktot(1,3)
<                 jj1 = 6
<               else
<                 inc1=-ijktot(1,2)*ijktot(1,3)
<                 jj1 = 7
<               end if
<               if     (iss(2,2).eq.ise(2,2).and.iss(2,2).eq.1    ) then
<                 inc2= 1
<                 jj2 = 2
<               else if(iss(2,2).eq.ise(2,2).and.iss(2,2).eq.jdim2) then
<                 inc2=-1
<                 jj2 = 3
<               else if(iss(3,2).eq.ise(3,2).and.iss(3,2).eq.1    ) then
<                 inc2= ijktot(2,2)
<                 jj2 = 4
<               else if(iss(3,2).eq.ise(3,2).and.iss(3,2).eq.kdim2) then
<                 inc2=-ijktot(2,2)
<                 jj2 = 5
<               else if(iss(1,2).eq.ise(1,2).and.iss(1,2).eq.1    ) then
<                 inc2= ijktot(2,2)*ijktot(2,3)
<                 jj2 = 6
<               else
<                 inc2=-ijktot(2,2)*ijktot(2,3)
<                 jj2 = 7
<               end if
<               do nn = 1,2
<                in(nn) = isva(1,nn,m)
<                im(nn) = isva(2,nn,m)
<               enddo
<               in(3) = isva13
<               im(3) = isva23
<               do ii = 1,ijktot(1,1)  
<                  if(iss(1,1).eq.iskip(nsgst12,ii)) then
<                    issim11= ii
<                  end if
<                  if(ise(1,1).eq.iskip(nsgst12,ii)) then
<                    iseim11= ii
<                  end if
<               enddo
<               do ii = 1,ijktot(2,1)  
<                  if(iss(1,2).eq.iskip(nsgst22,ii)) then
<                    issim12= ii
<                  end if
<                  if(ise(1,2).eq.iskip(nsgst22,ii)) then
<                    iseim12= ii
<                  end if
<               enddo
<               do ii = 1,ijktot(1,2)  
<                  if(iss(2,1).eq.jskip(nsgst12,ii)) then
<                    issim21= ii
<                  end if
<                  if(ise(2,1).eq.jskip(nsgst12,ii)) then
<                    iseim21= ii
<                  end if
<               enddo
<               do ii = 1,ijktot(2,2)  
<                  if(iss(2,2).eq.jskip(nsgst22,ii)) then
<                    issim22= ii
<                  end if
<                  if(ise(2,2).eq.jskip(nsgst22,ii)) then
<                    iseim22= ii
<                  end if
<               enddo
<               do ii = 1,ijktot(1,3)  
<                  if(iss(3,1).eq.kskip(nsgst12,ii)) then
<                    issim31= ii
<                  end if
<                  if(ise(3,1).eq.kskip(nsgst12,ii)) then
<                    iseim31= ii
<                  end if
<               enddo
<               do ii = 1,ijktot(2,3)  
<                  if(iss(3,2).eq.kskip(nsgst22,ii)) then
<                    issim32= ii
<                  end if
<                  if(ise(3,2).eq.kskip(nsgst22,ii)) then
<                    iseim32= ii
<                  end if
<               enddo
<               iss(1,1) = issim11 
<               ise(1,1) = iseim11 
<               iss(2,1) = issim21 
<               ise(2,1) = iseim21
<               iss(3,1) = issim31 
<               ise(3,1) = iseim31 
<               iss(1,2) = issim12 
<               ise(1,2) = iseim12 
<               iss(2,2) = issim22 
<               ise(2,2) = iseim22
<               iss(3,2) = issim32 
<               ise(3,2) = iseim32 
<               do ii = 1,3
<                 do jj = 1,2
<                   if(iss(ii,jj).eq.0.or.ise(ii,jj).eq.0) then
<                          nou(1) = min(nou(1)+1,ibufdim)
<                          write(bou(nou(1),1),
<      .          '(''stopping...deforming mesh control points do not '',
<      .                              ''match blocking end points'')')
<                          call termn8(myid,-1,ibufdim,nbuf,bou,nou)
---
>                end do
> c
> c              i=idim subfaces
> c
>                do nseg=1,nbcidim(nbl)
>                   ii     = 2
>                   ibctyp = ibcinfo(nbl,nseg,1,ii)
>                   if (abs(ibctyp).ne.2004 .and.
>      .                abs(ibctyp).ne.2014 .and.
>      .                abs(ibctyp).ne.1005 .and.
>      .                abs(ibctyp).ne.1006 .or.
>      .                real(beta1).lt.0.) then
>                       js = ibcinfo(nbl,nseg,2,ii)
>                       je = ibcinfo(nbl,nseg,3,ii)
>                       ks = ibcinfo(nbl,nseg,4,ii)
>                       ke = ibcinfo(nbl,nseg,5,ii)
>                       do j=js,je,jskp
>                          do k=ks,ke,kskp
>                             call setcorner(j,k,idim,w(lx),w(ly),
>      .                                     w(lz),w(lx),w(ly),w(lz),
>      .                                     jdim,kdim,idim,wk,nsurf,1,
>      .                                     ivert,slavept,nslave,nou,
>      .                                     bou,ibufdim,nbuf,myid,
>      .                                     iwk,nmaster,iseq)
>                          end do
>                       end do
971,1004c223,225
<                 enddo
<               enddo
<               id(in(1)) = iss(in(1),1)
<               do i2= iss(im(1),2),ise(im(1),2),nskp1(im(1))
<                 ig(im(1)) = i2
<                 id(in(3)) = iss(in(3),1)
<                 do k2= iss(im(3),2),ise(im(3),2),nskp1(im(3)) 
<                   ig(im(3)) = k2
<                   id(in(2)) = iss(in(2),1)
<                   do j2= iss(im(2),2),ise(im(2),2),nskp1(im(2)) 
<                     ig(im(2)) = j2
<                     ll1=id(2)+(id(3)-1)*ijktot(1,2)+(id(1)-1)*
<      .                                      ijktot(1,2)*ijktot(1,3) 
<                     ll2=ig(2)+(ig(3)-1)*ijktot(2,2)+(ig(1)-1)*
<      .                                      ijktot(2,2)*ijktot(2,3) 
<                     islavept(nsgst11+ll1,jj1,iseq)=nsgst21+ll2+inc2 
<                     if(nsgst11+ll1.ne.nsgst21+ll2) then
<                       iimax(nsgst11+ll1) = iimax(nsgst11+ll1) + 1
<                       ii3 = 10 + iimax(nsgst11+ll1) 
<                       islavept(nsgst11+ll1,ii3,iseq) = nsgst21+ll2 
<                       iimax(nsgst21+ll2) = iimax(nsgst21+ll2) + 1
<                       ii3 = 10 + iimax(nsgst21+ll2) 
<                       islavept(nsgst21+ll2,ii3,iseq) = nsgst11+ll1 
<                     end if
<                     islavept(nsgst21+ll2,jj2,iseq)=nsgst11+ll1+inc1  
<                     id(in(2)) = id(in(2)) + nskp(in(2))
<                   enddo
<                   id(in(3)) = id(in(3)) + nskp(in(3))
<                 enddo
<                 id(in(1)) = id(in(1)) + nskp(in(1))
<               enddo    
<             end if
<           end if
<          enddo
---
>                end do
> c
>                if (i2d .eq. 0) then
1006,1007c227,333
< c   Determine the number of coincident points at block interfaces, starting
< c   with the first two coincident points.
---
> c                 j=1 subfaces
> c
>                   do nseg=1,nbcj0(nbl)
>                      jj     = 1
>                      jbctyp = jbcinfo(nbl,nseg,1,jj)
>                      if (abs(jbctyp).ne.2004 .and.
>      .                   abs(jbctyp).ne.2014 .and.
>      .                   abs(jbctyp).ne.1005 .and.
>      .                   abs(jbctyp).ne.1006 .or.
>      .                   real(beta1).lt.0.) then
>                          is = jbcinfo(nbl,nseg,2,jj)
>                          ie = jbcinfo(nbl,nseg,3,jj)
>                          ks = jbcinfo(nbl,nseg,4,jj)
>                          ke = jbcinfo(nbl,nseg,5,jj)
>                          do i=is,ie,iskp
>                             do k=ks,ke,kskp
>                                call setcorner(1,k,i,w(lx),w(ly),
>      .                                        w(lz),w(lx),w(ly),w(lz),
>      .                                        jdim,kdim,idim,wk,nsurf,1,
>      .                                        ivert,slavept,nslave,nou,
>      .                                        bou,ibufdim,nbuf,myid,
>      .                                        iwk,nmaster,iseq)
>                             end do
>                          end do
>                      end if
>                   end do
> c
> c                 j=jdim subfaces
> c
>                   do nseg=1,nbcjdim(nbl)
>                      jj     = 2
>                      jbctyp = jbcinfo(nbl,nseg,1,jj)
>                      if (abs(jbctyp).ne.2004 .and.
>      .                   abs(jbctyp).ne.2014 .and.
>      .                   abs(jbctyp).ne.1005 .and.
>      .                   abs(jbctyp).ne.1006 .or.
>      .                   real(beta1).lt.0.) then
>                          is = jbcinfo(nbl,nseg,2,jj)
>                          ie = jbcinfo(nbl,nseg,3,jj)
>                          ks = jbcinfo(nbl,nseg,4,jj)
>                          ke = jbcinfo(nbl,nseg,5,jj)
>                          do i=is,ie,iskp
>                             do k=ks,ke,kskp
>                                call setcorner(jdim,k,i,w(lx),w(ly),
>      .                                        w(lz),w(lx),w(ly),w(lz),
>      .                                        jdim,kdim,idim,wk,nsurf,1,
>      .                                        ivert,slavept,nslave,nou,
>      .                                        bou,ibufdim,nbuf,myid,
>      .                                        iwk,nmaster,iseq)
>                             end do
>                          end do
>                      end if
>                   end do
> c
> c                 k=1 subfaces
> c
>                   do nseg=1,nbck0(nbl)
>                      kk     = 1
>                      kbctyp = kbcinfo(nbl,nseg,1,kk)
>                      if (abs(kbctyp).ne.2004 .and.
>      .                   abs(kbctyp).ne.2014 .and.
>      .                   abs(kbctyp).ne.1005 .and.
>      .                   abs(kbctyp).ne.1006 .or.
>      .                   real(beta1).lt.0.) then
>                          is = kbcinfo(nbl,nseg,2,kk)
>                          ie = kbcinfo(nbl,nseg,3,kk)
>                          js = kbcinfo(nbl,nseg,4,kk)
>                          je = kbcinfo(nbl,nseg,5,kk)
>                          do i=is,ie,iskp
>                             do j=js,je,jskp
>                                call setcorner(j,1,i,w(lx),w(ly),
>      .                                        w(lz),w(lx),w(ly),w(lz),
>      .                                        jdim,kdim,idim,wk,nsurf,1,
>      .                                        ivert,slavept,nslave,nou,
>      .                                        bou,ibufdim,nbuf,myid,
>      .                                        iwk,nmaster,iseq)
>                             end do
>                          end do
>                      end if
>                   end do
> c
> c                 k=kdim subfaces
> c
>                   do nseg=1,nbckdim(nbl)
>                      kk     = 2
>                      kbctyp = kbcinfo(nbl,nseg,1,kk)
>                      if (abs(kbctyp).ne.2004 .and.
>      .                   abs(kbctyp).ne.2014 .and.
>      .                   abs(kbctyp).ne.1005 .and.
>      .                   abs(kbctyp).ne.1006 .or.
>      .                   real(beta1).lt.0.) then
>                          is = kbcinfo(nbl,nseg,2,kk)
>                          ie = kbcinfo(nbl,nseg,3,kk)
>                          js = kbcinfo(nbl,nseg,4,kk)
>                          je = kbcinfo(nbl,nseg,5,kk)
>                          do i=is,ie,iskp
>                             do j=js,je,jskp
>                                call setcorner(j,kdim,i,w(lx),w(ly),
>      .                                        w(lz),w(lx),w(ly),w(lz),
>      .                                        jdim,kdim,idim,wk,nsurf,1,
>      .                                        ivert,slavept,nslave,nou,
>      .                                        bou,ibufdim,nbuf,myid,
>      .                                        iwk,nmaster,iseq)
>                             end do
>                          end do
>                      end if
>                   end do
1009,1053d334
<          do n = 1,nslave
<            if(iimax(n).eq.1) iimax(n)= 0
<            islavept(n,11,iseq) = iimax(n)
<            if(islavept(n,11,iseq).gt.0) then
<              n11i(1,n)  = n
<              do ii3 = 2,iimax(n) 
<                n11i(ii3,n) = islavept(n,12+ii3-2,iseq)
<              enddo
<            end if
<          enddo
<          do n = 1,nslave
<            if(islavept(n,11,iseq).gt.0) then
<               iimx1(n) = iimax(n)
<               do n2 = 1,nslave
<                 if(n2.ne.n) then
<                  do ii3 = 1,iimax(n) 
<                    do ii4 = 1,iimax(n2)-1 
<                     if(n11i(ii3,n).eq.n11i(ii4,n2)) then
<                       do ii5 = 2,iimax(n) 
<                         if(n2.eq.n11i(ii5,n)) goto 2550
<                       enddo
<                       iimx1(n) = iimx1(n) + 1
<                       n11i(iimx1(n),n) = n2
<                       goto 2600
<                     end if
< 2550               continue
<                     if(n11i(ii3,n).eq.n2) then
<                       do ii5 = 2,iimax(n) 
<                         if(n11i(ii4,n2).eq.n11i(ii5,n)) goto 2600
<                       enddo
<                       iimx1(n) = iimx1(n)+ 1
<                       n11i(iimx1(n),n) = n11i(ii4,n2)
<                       goto 2600
<                     end if
<                    enddo
<                  enddo
< 2600             continue
<                  islavept(n,11,iseq) = iimx1(n) 
<                  if(iimx1(n).gt.iimax(n).and.iimax(n).gt.0) then
<                    ii4 = iimax(n)+1
<                    do ii = 10+iimax(n)+1,10+iimx1(n) 
<                      islavept(n,ii,iseq) = n11i(ii4,n)
<                      ii4 = ii4 + 1
<                    enddo
<                  end if 
1055,1148c336,339
<               enddo
< 2650          continue
<            end if
<          enddo
< c
< c   Establish the number of points in the ija and sa arrays for each
< c   node point.
< c
<       do n = 1,nslave
<        ipt1 = 0
<        ipt2 = 0
<        ii4  = 1
<        if(islavept(n,8,iseq).eq.0) ii4 = 0
<        if(ii4.ne.0) then
<          iimax(n) = islavept(n,11,iseq)
<          do ii2 = 2,iimax(n) 
<            ni3 = islavept(n,12+ii2-2,iseq)
<            if(islavept(ni3,8,iseq).eq.0) ii4 = 0
<          enddo
<        end if 
<        if(ii4.ne.0) then
<          ipt2 = 2
<          if(islavept(n,2,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,3,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,4,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,5,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,6,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,7,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,2,iseq).ne.n.and.islavept(n,4,iseq).ne.n) ipt1= 
<      .      ipt1+ 1
<          if(islavept(n,2,iseq).ne.n.and.islavept(n,6,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,4,iseq).ne.n.and.islavept(n,6,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,2,iseq).ne.n.and.islavept(n,4,iseq).ne.n.and.
<      .      islavept(n,6,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,2,iseq).ne.n.and.islavept(n,7,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,4,iseq).ne.n.and.islavept(n,7,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,2,iseq).ne.n.and.islavept(n,4,iseq).ne.n.and.
<      .      islavept(n,7,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,3,iseq).ne.n.and.islavept(n,4,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,3,iseq).ne.n.and.islavept(n,6,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,3,iseq).ne.n.and.islavept(n,4,iseq).ne.n.and.
<      .      islavept(n,6,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,3,iseq).ne.n.and.islavept(n,7,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,3,iseq).ne.n.and.islavept(n,4,iseq).ne.n.and.
<      .      islavept(n,7,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,2,iseq).ne.n.and.islavept(n,5,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,5,iseq).ne.n.and.islavept(n,6,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,2,iseq).ne.n.and.islavept(n,5,iseq).ne.n.and.
<      .      islavept(n,6,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,5,iseq).ne.n.and.islavept(n,7,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,2,iseq).ne.n.and.islavept(n,5,iseq).ne.n.and.
<      .      islavept(n,7,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,3,iseq).ne.n.and.islavept(n,5,iseq).ne.n) ipt1=
<      .      ipt1+ 1
<          if(islavept(n,3,iseq).ne.n.and.islavept(n,5,iseq).ne.n.and.
<      .      islavept(n,6,iseq).ne.n) ipt1= ipt1+ 1
<          if(islavept(n,3,iseq).ne.n.and.islavept(n,5,iseq).ne.n.and.
<      .      islavept(n,7,iseq).ne.n) ipt1= ipt1+ 1
<        end if
<          islavept(n,10,iseq) =  3*ipt1 + ipt2
<       enddo
< c
<         nblelst      = 0
<         ii           = 1
<         nblelst(ii,1) = islavept(1,9,iseq)
<         nblelst(ii,2) = 1
<         do n = 2,nslave
<           if(islavept(n,9,iseq).ne.islavept(n-1,9,iseq)) then
<            ii            = ii + 1
<            nblelst(ii,1) = islavept(n,9,iseq)
<            nblelst(ii,2) = n
<           end if
<         enddo
<         nblelst(ii+1,2) = nslave+1 
<        end do
<       end if
<       if(myid.eq.myhost) then
<         if(isktyp.gt.0.and.meshdef.eq.1) then
<           write(1000+myid,31029)
< 31029     format(' Iteration   Total Resid   N@Maxres  Max Resid')
<         else if(isktyp.gt.0.and.meshdef.eq.0) then
<           write(1000+myid,31028)
< 31028     format(' Iterations  Total Resid')
<         end if
---
> c
>             end if
>          end if
>          end do 
1150a342,343
>       end do
> c
Index: source/cfl3d/dist/setup.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/setup.F,v
retrieving revision 1.21
retrieving revision 1.17
diff -r1.21 -r1.17
1,2c1,2
<       subroutine setup(lw,lw2,w,mgwk,wk,nwork,iwk,iwork,itest,
<      .                 jtest,ktest,maxbl,mxbli,maxgr,maxseg,nsub1,
---
>       subroutine setup(lw,lw2,w,mgwk,wk,nwork,iwk,iwork,
>      .                 itest,jtest,ktest,maxbl,maxgr,maxseg,nsub1,
24c24
<      .                 aesrfdat,perturb,islavept,nslave,iskip,jskip,
---
>      .                 aesrfdat,perturb,slavept,nslave,iskip,jskip,
29,30c29
<      .                 icouple,lfgm,nblk,limblk,isva,nblelst,
<      .                 iskmax,jskmax,kskmax,ue,irdrea)
---
>      .                 icouple,lfgm)
32c31
< c     $Id: setup.F,v 1.21 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: setup.F,v 1.17 2003/05/15 20:23:44 rumsey Exp $
71,72d69
<       integer isndrea(2)
<       integer irdrea(maxgr)
128,130c125,126
<       dimension aesrfdat(5,maxaes),islavept(nslave,nmaster,5)
<       dimension iskip(maxbl,500),jskip(maxbl,500),kskip(maxbl,500)
<       dimension ue(3*nslave)
---
>       dimension aesrfdat(5,maxaes),slavept(nslave,3,nmaster,5)
>       dimension iskip(maxbl),jskip(maxbl),kskip(maxbl)
136,141d131
<       dimension nblk(2,mxbli),limblk(2,6,mxbli),
<      .          isva(2,2,mxbli)
<       dimension nblelst(maxbl,2)
<       dimension iskmax(maxbl)
<       dimension jskmax(maxbl)
<       dimension kskmax(maxbl)
173,174c163
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
---
>       common /deformz/ beta1,ismooth,negvol
220,224d208
<       if(iunst.gt.1) then
<         do ns = 1,3*nslave
<           ue(ns) = 0.
<         enddo
<       end if
266c250
<         write(901,'('' inconsistency between cgns # of zones & input.'',
---
>         write(11,'('' inconsistency between cgns # of zones & input.'',
282,283c266,267
<           write(901,'('' not enough memory for cgns grid read.'')')
<           write(901,'('' nwork in wk='',i6,''.  Needed = '',i6)')
---
>           write(11,'('' not enough memory for cgns grid read.'')')
>           write(11,'('' nwork in wk='',i6,''.  Needed = '',i6)')
286a271
>         write(11,100)igrid,idim,jdim,kdim
290,310d274
< #   ifdef FASTIO
<          mytag   = itag_flag + nbl
<          nd_scrc = mblk2nd(nbl)
<          if (mblk2nd(nbl).eq.myid) then
<             isndrea(1)=myid
<             isndrea(2)=igrid
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),100) igrid,idim,jdim,kdim
<             call MPI_Send (isndrea, 2, MPI_INTEGER,
<      *                     myhost, mytag, mycomm, ierr)
<          else if (myid.eq.myhost) then
<             call MPI_Recv (isndrea, 2, MPI_INTEGER,
<      *                     nd_scrc,mytag,mycomm,istat,ierr)
<             irdrea(isndrea(2))=isndrea(1)
<          end if
< #   else
<          if (myid.eq.mblk2nd(nbl)) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),100)igrid,idim,jdim,kdim
<          end if
< #   endif
321,337d284
<   100       format(13h reading grid,i4,24h of dimensions (I/J/K) :,3i4)
< #   ifdef FASTIO
<          mytag   = itag_flag + nbl
<          nd_scrc = mblk2nd(nbl)
<          if (myid.eq.mblk2nd(nbl)) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),100) igrid,idim,jdim,kdim
<             isndrea(1)=myid
<             isndrea(2)=igrid
<             call MPI_Send (isndrea, 2, MPI_INTEGER,
<      *                     myhost, mytag, mycomm, ierr)
<          else if (myid.eq.myhost) then
<             call MPI_Recv (isndrea, 2, MPI_INTEGER,
<      *                     nd_scrc,mytag,mycomm,istat,ierr)
<             irdrea(isndrea(2))=isndrea(1)
<          end if
< #   else
340a288
>   100       format(13h reading grid,i4,24h of dimensions (I/J/K) :,3i4)
342d289
< #   endif
394,409d340
< #   ifdef FASTIO
<          mytag   = itag_flag + nbl
<          nd_scrc = mblk2nd(nbl)
<          if (mblk2nd(nbl).eq.myid) then
<             isndrea(1)=myid
<             isndrea(2)=igrid
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),100) igrid,idim,jdim,kdim
<             call MPI_Send (isndrea, 2, MPI_INTEGER,
<      *                     myhost, mytag, mycomm, ierr)
<          else if (myid.eq.myhost) then
<             call MPI_Recv (isndrea, 2, MPI_INTEGER,
<      *                     nd_scrc,mytag,mycomm,istat,ierr)
<             irdrea(isndrea(2))=isndrea(1)
<          end if
< #   else
414d344
< #   endif
530,533d459
< #   ifdef FASTIO
<       call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .              mycomm,mblk2nd,maxbl,16)
< #   else
536d461
< #   endif
543c468
<          call setslave(lw,lw2,w,mgwk,wk,nwork,maxbl,mxbli,maxgr,maxseg,
---
>          call setslave(lw,lw2,w,mgwk,wk,nwork,maxbl,maxgr,maxseg,
548c473
<      .                 kcsf,islavept,nslave,nsegdfrm,idfrmseg,
---
>      .                 kcsf,slavept,nslave,nsegdfrm,idfrmseg,
550,551c475
<      .                 iskip,nblg,levelg,lfgm,nblk,limblk,isva,nblelst,
<      .                 nnodes,iskmax,jskmax,kskmax)
---
>      .                 iskip,nblg,levelg,lfgm)
687c611
<      .                 aesrfdat,perturb,itrans,irotat,islavept,nslave,
---
>      .                 aesrfdat,perturb,itrans,irotat,slavept,nslave,
691,692c615
<      .                 iwk(maxbl),nnodes,nblelst,iskmax,jskmax,kskmax,
<      .                 ue)
---
>      .                 iwk(maxbl),nnodes)
777,780d699
< #   ifdef FASTIO
<       call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .              mycomm,mblk2nd,maxbl,17)
< #   else
783d701
< #   endif
856,859d773
< #   ifdef FASTIO
<       call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .              mycomm,mblk2nd,maxbl,18)
< #   else
862d775
< #   endif
1494,1497d1406
< #   ifdef FASTIO
<       call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .              mycomm,mblk2nd,maxbl,19)
< #   else
1500d1408
< #   endif
1636,1639d1543
< #   ifdef FASTIO
<       call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .              mycomm,mblk2nd,maxbl,20)
< #   else
1642d1545
< #   endif
1877,1880d1779
< #   ifdef FASTIO
<                call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,
<      .                       myid,mycomm,mblk2nd,maxbl,21)
< #   else
1883d1781
< #   endif
2007,2010d1904
< #   ifdef FASTIO
<          call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,22)
< #   else
2013d1906
< #   endif
2166c2059
<              write(901,'('' not enough memory for cgns '',
---
>              write(11,'('' not enough memory for cgns '',
2168c2061
<              write(901,'('' nwork in wk='',i6,''.  Needed = '',i6)')
---
>              write(11,'('' nwork in wk='',i6,''.  Needed = '',i6)')
2206,2209d2098
< #   ifdef FASTIO
<                call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,
<      .                       myid,mycomm,mblk2nd,maxbl,23)
< #   else
2212d2100
< #   endif
2238,2241d2125
< #   ifdef FASTIO
<                      call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,
<      .                             myhost,myid,mycomm,mblk2nd,maxbl,24)
< #   else
2244d2127
< #   endif
2306c2189
<                  write(901,'('' not enough room in wk for'',
---
>                  write(11,'('' not enough room in wk for'',
2405,2408d2287
< #   ifdef FASTIO
<       call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .              mycomm,mblk2nd,maxbl,25)
< #   else
2411d2289
< #   endif
2484,2485c2362
<      .            abs(ibcinfo(nbl,iset,1,1)) .eq. 2014 .or.
<      .            abs(ibcinfo(nbl,iset,1,1)) .eq. 2016) goto 5860
---
>      .            abs(ibcinfo(nbl,iset,1,1)) .eq. 2014) goto 5860
2489,2490c2366
<      .            abs(ibcinfo(nbl,iset,1,2)) .eq. 2014 .or.
<      .            abs(ibcinfo(nbl,iset,1,2)) .eq. 2016) goto 5860
---
>      .            abs(ibcinfo(nbl,iset,1,2)) .eq. 2014) goto 5860
2494,2495c2370
<      .            abs(jbcinfo(nbl,iset,1,1)) .eq. 2014 .or.
<      .            abs(jbcinfo(nbl,iset,1,1)) .eq. 2016) goto 5860
---
>      .            abs(jbcinfo(nbl,iset,1,1)) .eq. 2014) goto 5860
2499,2500c2374
<      .            abs(jbcinfo(nbl,iset,1,2)) .eq. 2014 .or.
<      .            abs(jbcinfo(nbl,iset,1,2)) .eq. 2016) goto 5860
---
>      .            abs(jbcinfo(nbl,iset,1,2)) .eq. 2014) goto 5860
2504,2505c2378
<      .            abs(kbcinfo(nbl,iset,1,1)) .eq. 2014 .or.
<      .            abs(kbcinfo(nbl,iset,1,1)) .eq. 2016) goto 5860
---
>      .            abs(kbcinfo(nbl,iset,1,1)) .eq. 2014) goto 5860
2509,2510c2382
<      .            abs(kbcinfo(nbl,iset,1,2)) .eq. 2014 .or.
<      .            abs(kbcinfo(nbl,iset,1,2)) .eq. 2016) goto 5860
---
>      .            abs(kbcinfo(nbl,iset,1,2)) .eq. 2014) goto 5860
2532,2535c2404
<                   call cntsurf(ns2016,maxbl,maxgr,maxseg,ngrid,nblg,
<      .                         nbci0,nbcj0,nbck0,nbcidim,nbcjdim,
<      .                         nbckdim,ibcinfo,jbcinfo,kbcinfo,2016)
<                   nsurf=ns2004+ns2014+ns2016
---
>                   nsurf=ns2004+ns2014
2649,2652d2517
< #   ifdef FASTIO
<                   call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,
<      .                          myid,mycomm,mblk2nd,maxbl,26)
< #   else
2655d2519
< #   endif
2682,2685d2545
< #   ifdef FASTIO
<             call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                    mycomm,mblk2nd,maxbl,27)
< #   else
2688d2547
< #   endif
2950,2953d2808
< #   ifdef FASTIO
<       call writ_buffast(nblout,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .              mycomm,mblk2nd,maxbl,28)
< #   else
2956d2810
< #   endif
Index: source/cfl3d/dist/sizer.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/sizer.F,v
retrieving revision 1.23
retrieving revision 1.13
diff -r1.23 -r1.13
12c12
< c     $Id: sizer.F,v 1.23 2005/10/17 12:36:04 rumsey Exp $
---
> c     $Id: sizer.F,v 1.13 2003/07/07 14:14:57 biedron Exp $
20c20
< c     processors, based on the maximum requirement on any of the nodes.
---
> c     processors, based on the maximum requirement on any of the noodes.
138c138
<       allocatable :: iskip(:,:)
---
>       allocatable :: iskip(:)
154c154
<       allocatable :: jskip(:,:)
---
>       allocatable :: jskip(:)
164c164
<       allocatable :: kskip(:,:)
---
>       allocatable :: kskip(:)
280,285d279
<       common /turbconv/ cflturb,edvislim,iturbprod,nsubturb,nfreeze,
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
<       common /curvat/ isarc2d,sarccr3,ieasmcc2d
434,435c428,429
<       allocate( iskip(maxbl0,500), stat=stats )
<       call umalloc(500*maxbl0,1,'iskip',memuse,stats)
---
>       allocate( iskip(maxbl0), stat=stats )
>       call umalloc(maxbl0,1,'iskip',memuse,stats)
466,467c460,461
<       allocate( jskip(maxbl0,500), stat=stats )
<       call umalloc(500*maxbl0,1,'jskip',memuse,stats)
---
>       allocate( jskip(maxbl0), stat=stats )
>       call umalloc(maxbl0,1,'jskip',memuse,stats)
486,487c480,481
<       allocate( kskip(maxbl0,500), stat=stats )
<       call umalloc(500*maxbl0,1,'kskip',memuse,stats)
---
>       allocate( kskip(maxbl0), stat=stats )
>       call umalloc(maxbl0,1,'kskip',memuse,stats)
1180,1184c1174
<                if (iturbord .eq. 1) then
<                  iwk5=iwk1+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
<                else
<                  iwk5=iwk1+(jdim+3)*(kdim+3)*(idim+3-(4*i2d))
<                end if
---
>                iwk5=iwk1+(jdim+1)*(kdim+1)*(idim+1)
1207,1212c1197,1198
<                if (iturbord .eq. 1) then
<                  iwk3=iwk1+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
<                else
<                  iwk3=iwk1+(jdim+3)*(kdim+3)*(idim+3-(4*i2d))
<                end if
<                iwk4=iwk3+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
---
>                iwk3=iwk1+(jdim+1)*(kdim+1)*(idim+1)
>                iwk4=iwk3+(jdim+1)*(kdim+1)*(idim+1)
1230,1236c1216
<                iwk19=iwk18+inmx
<                if (isarc2d .eq. 1) then
<                  inmx=(jdim+1)*(kdim+1)*(idim-1)*4
<                else
<                  inmx=0
<                end if
<                itemp=iwk19+inmx
---
>                itemp=iwk18+inmx
1241,1246c1221,1222
<                if (iturbord .eq. 1) then
<                  iwk4=iwk1+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))*2
<                else
<                  iwk4=iwk1+(jdim+3)*(kdim+3)*(idim+3-(4*i2d))*2
<                end if
<                iwk5=iwk4+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
---
>                iwk4=iwk1+(jdim+1)*(kdim+1)*(idim+1)*2
>                iwk5=iwk4+(jdim+1)*(kdim+1)*(idim+1)
1279,1331d1254
<                inmx=(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
< c allocate for gradients of vorticity and turbulence - k-zeta only:
<                iwk34=iwk33+inmx
<                if (ivisc(1).eq.15 .or. ivisc(2).eq.15 .or. 
<      .         ivisc(3).eq.15) then
<                inmx=jdim
<                else
<                inmx=0
<                end if
<                iwk35=iwk34+inmx
<                iwk36=iwk35+inmx
<                iwk37=iwk36+inmx
<                iwk38=iwk37+inmx
<                iwk39=iwk38+inmx
<                iwk40=iwk39+inmx
<                iwk41=iwk40+inmx
<                iwk42=iwk41+inmx
<                iwk43=iwk42+inmx
<                iwk44=iwk43+inmx
<                iwk45=iwk44+inmx
<                iwk46=iwk45+inmx
<                iwk47=iwk46+inmx
<                iwk48=iwk47+inmx
<                iwk49=iwk48+inmx
<                iwk50=iwk49+inmx
<                iwk51=iwk50+inmx
<                iwk52=iwk51+inmx
<                iwk53=iwk52+inmx
<                iwk54=iwk53+inmx
<                iwk55=iwk54+inmx
<                iwk56=iwk55+inmx
<                iwk57=iwk56+inmx
<                iwk58=iwk57+inmx
<                iwk59=iwk58+inmx
<                iwk60=iwk59+inmx
<                iwk61=iwk60+inmx
<                iwk62=iwk61+inmx
<                iwk63=iwk62+inmx
<                iwk64=iwk63+inmx
<                iwk65=iwk64+inmx
<                iwk66=iwk65+inmx
<                iwk67=iwk66+inmx
<                iwk68=iwk67+inmx
<                iwk69=iwk68+inmx
<                iwk70=iwk69+inmx
<                iwk71=iwk70+inmx
<                iwk72=iwk71+inmx
<                iwk73=iwk72+inmx
<                iwk74=iwk73+inmx
<                iwk75=iwk74+inmx
<                iwk76=iwk75+inmx
<                if (ivisc(1).eq.15 .or. ivisc(2).eq.15 .or. 
<      .         ivisc(3).eq.15) then
1333,1352c1256
<                else
<                inmx=0
<                end if
<                iwk77=iwk76+inmx
<                iwk78=iwk77+inmx
<                iwk79=iwk78+inmx
<                if (ivisc(1).eq.15 .or. ivisc(2).eq.15 .or. 
<      .         ivisc(3).eq.15) then
<                inmx=(jdim+1)*(kdim+1)*(idim+1)*2
<                else
<                inmx=0
<                end if
<                iwk80=iwk79+inmx
< c allocate for easmcc2d
<                if (ieasmcc2d .eq. 1) then
<                  inmx=(jdim+1)*(kdim+1)*(idim-1)*4
<                else
<                  inmx=0
<                end if
<                itemp=iwk80+inmx
---
>                itemp=iwk33+inmx
1380,1383c1284
<          call cntsurf(ns2016,maxbl0,maxgr0,maxseg0,ngrid,nblg,
<      .                nbci0,nbcj0,nbck0,nbcidim,nbcjdim,
<      .                nbckdim,ibcinfo,jbcinfo,kbcinfo,2016)
<          nsurf=ns2004+ns2014+ns2016
---
>          nsurf=ns2004+ns2014
2327c2228
<       needi_trn =1550*lmaxbl       + 119      + 9*lmaxbl*lmxsegdg
---
>       needi_trn = 53*lmaxbl        + 118      + 9*lmaxbl*lmxsegdg
2370,2373c2271
<          call cntsurf(ns2016,maxbl0,maxgr0,maxseg0,ngrid,nblg,
<      .                nbci0,nbcj0,nbck0,nbcidim,nbcjdim,
<      .                nbckdim,ibcinfo,jbcinfo,kbcinfo,2016)
<          nsurf = ns2004 + ns2014 + ns1005 + ns1006 + ns2016
---
>          nsurf = ns2004 + ns2014 + ns1005 + ns1006
2463d2360
<       ivert = 0
2464a2362,2363
>       do inode = 1,nodel
>          ivert = 0
2466,2475c2365,2444
<           if (levelg(nbl).ge.lglobal) then
<             if(abs(isktyp).eq.1) then
<               call lead(nbl,lw,lw2,maxbl0)
<               iskp = iskip(nbl,1)
<               jskp = jskip(nbl,1)
<               kskp = kskip(nbl,1)
<               do i=1,idim,iskp
<                 do j=1,jdim,jskp
<                   do k=1,kdim,kskp
<                     ivert = ivert + 1
---
>             iskp = iskip(nbl)
>             jskp = jskip(nbl)
>             kskp = kskip(nbl)
>             if (mblk2nd(nbl).eq.inode) then
> c              i=1 subfaces
>                do nseg=1,nbci0(nbl)
>                   ii     = 1
>                   ibctyp = ibcinfo(nbl,nseg,1,ii)
>                   if (abs(ibctyp).ne.2004 .or.
>      .                abs(ibctyp).ne.2014 .or.
>      .                abs(ibctyp).ne.1005 .or.
>      .                abs(ibctyp).ne.1006) then
>                       js = ibcinfo(nbl,nseg,2,ii)
>                       je = ibcinfo(nbl,nseg,3,ii)
>                       ks = ibcinfo(nbl,nseg,4,ii)
>                       ke = ibcinfo(nbl,nseg,5,ii)
>                       do j=js,je,jskp
>                          do k=ks,ke,kskp
>                             ivert = ivert + 1
>                          end do
>                       end do
>                   end if
>                end do
> c              i=idim subfaces
>                do nseg=1,nbcidim(nbl)
>                   ii     = 2
>                   ibctyp = ibcinfo(nbl,nseg,1,ii)
>                   if (abs(ibctyp).ne.2004 .or.
>      .                abs(ibctyp).ne.2014 .or.
>      .                abs(ibctyp).ne.1005 .or.
>      .                abs(ibctyp).ne.1006) then
>                       js = ibcinfo(nbl,nseg,2,ii)
>                       je = ibcinfo(nbl,nseg,3,ii)
>                       ks = ibcinfo(nbl,nseg,4,ii)
>                       ke = ibcinfo(nbl,nseg,5,ii)
>                       do j=js,je,jskp
>                          do k=ks,ke,kskp
>                             ivert = ivert + 1
>                          end do
>                       end do
>                   end if
>                end do
>                if (i2d .eq. 0) then
> c                 j=1 subfaces
>                   do nseg=1,nbcj0(nbl)
>                      jj     = 1
>                      jbctyp = jbcinfo(nbl,nseg,1,jj)
>                      if (abs(jbctyp).ne.2004 .or.
>      .                   abs(jbctyp).ne.2014 .or.
>      .                   abs(jbctyp).ne.1005 .or.
>      .                   abs(jbctyp).ne.1006) then
>                          is = jbcinfo(nbl,nseg,2,jj)
>                          ie = jbcinfo(nbl,nseg,3,jj)
>                          ks = jbcinfo(nbl,nseg,4,jj)
>                          ke = jbcinfo(nbl,nseg,5,jj)
>                          do i=is,ie,iskp
>                             do k=ks,ke,kskp
>                                ivert = ivert + 1
>                             end do
>                          end do
>                      end if
>                   end do
> c                 j=jdim subfaces
>                   do nseg=1,nbcjdim(nbl)
>                      jj     = 2
>                      jbctyp = jbcinfo(nbl,nseg,1,jj)
>                      if (abs(jbctyp).ne.2004 .or.
>      .                   abs(jbctyp).ne.2014 .or.
>      .                   abs(jbctyp).ne.1005 .or.
>      .                   abs(jbctyp).ne.1006) then
>                          is = jbcinfo(nbl,nseg,2,jj)
>                          ie = jbcinfo(nbl,nseg,3,jj)
>                          ks = jbcinfo(nbl,nseg,4,jj)
>                          ke = jbcinfo(nbl,nseg,5,jj)
>                          do i=is,ie,iskp
>                             do k=ks,ke,kskp
>                                ivert = ivert + 1
>                             end do
>                          end do
>                      end if
2477,2498c2446,2484
<                 end do
<               end do
<             else if(abs(isktyp).eq.2) then
<               itot = 0
<               jtot = 0
<               ktot = 0
<               do ii = 1,500
<                 if(iskip(nbl,ii).eq.0) goto 300
<                 itot = itot + 1
<               enddo
< 300           continue
<               do ii = 1,500
<                 if(jskip(nbl,ii).eq.0) goto 320
<                 jtot = jtot + 1
<               enddo
< 320           continue
<               do ii = 1,500
<                 if(kskip(nbl,ii).eq.0) goto 340
<                 ktot = ktot + 1
<               enddo
< 340           continue
<               ivert = ivert + itot*jtot*ktot
---
> c                 k=1 subfaces
>                   do nseg=1,nbck0(nbl)
>                      kk     = 1
>                      kbctyp = kbcinfo(nbl,nseg,1,kk)
>                      if (abs(kbctyp).ne.2004 .or.
>      .                   abs(kbctyp).ne.2014 .or.
>      .                   abs(kbctyp).ne.1005 .or.
>      .                   abs(kbctyp).ne.1006) then
>                          is = kbcinfo(nbl,nseg,2,kk)
>                          ie = kbcinfo(nbl,nseg,3,kk)
>                          js = kbcinfo(nbl,nseg,4,kk)
>                          je = kbcinfo(nbl,nseg,5,kk)
>                          do i=is,ie,iskp
>                             do j=js,je,jskp
>                                ivert = ivert + 1
>                             end do
>                          end do
>                      end if
>                   end do
> c                 k=kdim subfaces
>                   do nseg=1,nbckdim(nbl)
>                      kk     = 2
>                      kbctyp = kbcinfo(nbl,nseg,1,kk)
>                      if (abs(kbctyp).ne.2004 .or.
>      .                   abs(kbctyp).ne.2014 .or.
>      .                   abs(kbctyp).ne.1005 .or.
>      .                   abs(kbctyp).ne.1006) then
>                          is = kbcinfo(nbl,nseg,2,kk)
>                          ie = kbcinfo(nbl,nseg,3,kk)
>                          js = kbcinfo(nbl,nseg,4,kk)
>                          je = kbcinfo(nbl,nseg,5,kk)
>                          do i=is,ie,iskp
>                             do j=js,je,jskp
>                                ivert = ivert + 1
>                             end do
>                          end do
>                      end if
>                   end do
>                end if
2500d2485
<           end if
2502d2486
<       end if
2504c2488,2491
<       lnslave = max(ivert,lnslave)
---
>          lnslave = max(ivert,lnslave)
> c
>       end do
>       end if
3098,3099c3085
<      .      abs(jbcinfo(nbl,mseg,1,1)) .eq. 2014 .or.
<      .      abs(jbcinfo(nbl,mseg,1,1)) .eq. 2016) ibcjmin=1 
---
>      .      abs(jbcinfo(nbl,mseg,1,1)) .eq. 2014) ibcjmin=1 
3103,3104c3089
<      .      abs(jbcinfo(nbl,mseg,1,2)) .eq. 2014 .or.
<      .      abs(jbcinfo(nbl,mseg,1,2)) .eq. 2016) ibcjmax=1 
---
>      .      abs(jbcinfo(nbl,mseg,1,2)) .eq. 2014) ibcjmax=1 
3111,3112c3096
<      .      abs(kbcinfo(nbl,mseg,1,1)) .eq. 2014 .or.
<      .      abs(kbcinfo(nbl,mseg,1,1)) .eq. 2016) ibckmin=1
---
>      .      abs(kbcinfo(nbl,mseg,1,1)) .eq. 2014) ibckmin=1
3116,3117c3100
<      .      abs(kbcinfo(nbl,mseg,1,2)) .eq. 2014 .or.
<      .      abs(kbcinfo(nbl,mseg,1,2)) .eq. 2016) ibckmax=1
---
>      .      abs(kbcinfo(nbl,mseg,1,2)) .eq. 2014) ibckmax=1
3124,3125c3107
<      .      abs(ibcinfo(nbl,mseg,1,1)) .eq. 2014 .or.
<      .      abs(ibcinfo(nbl,mseg,1,1)) .eq. 2016) ibcimin=1
---
>      .      abs(ibcinfo(nbl,mseg,1,1)) .eq. 2014) ibcimin=1
3129,3130c3111
<      .      abs(ibcinfo(nbl,mseg,1,2)) .eq. 2014 .or.
<      .      abs(ibcinfo(nbl,mseg,1,2)) .eq. 2016) ibcimax=1
---
>      .      abs(ibcinfo(nbl,mseg,1,2)) .eq. 2014) ibcimax=1
Index: source/cfl3d/dist/trnsfr_vals.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/trnsfr_vals.F,v
retrieving revision 1.24
retrieving revision 1.14
diff -r1.24 -r1.14
29c29
< c     $Id: trnsfr_vals.F,v 1.24 2005/09/19 14:52:27 rumsey Exp $
---
> c     $Id: trnsfr_vals.F,v 1.14 2003/05/15 20:23:45 rumsey Exp $
117c117
<       dimension iskip(maxbl,500),jskip(maxbl,500),kskip(maxbl,500)
---
>       dimension iskip(maxbl),jskip(maxbl),kskip(maxbl)
133,134d132
<       common /konew/ ikoprod,isstdenom,pklimterm,ibeta8kzeta
<       common /axisym/ iaxi2plane
136,137c134
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
---
>       common /deformz/ beta1,ismooth,negvol
173,174c170
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
187,188d182
<       common /fullns/ ifullns
<       common /curvat/ isarc2d,sarccr3,ieasmcc2d
301,304c295
<          work(nlast+53) = alpha1
<          work(nlast+54) = beta2
<          work(nlast+55) = alpha2
<          nlast = nlast + 55
---
>          nlast = nlast + 52
415,428d405
<          work(nlast+57) = ikoprod
<          work(nlast+58) = isstdenom
<          work(nlast+59) = pklimterm
<          work(nlast+60) = iaxi2plane
<          work(nlast+61) = iturbord
<          work(nlast+62) = tur2cut
<          work(nlast+63) = tur1cutlev
<          work(nlast+64) = tur2cutlev
<          work(nlast+65) = meshdef
<          work(nlast+66) = ifullns
<          work(nlast+67) = ibeta8kzeta
<          work(nlast+68) = isarc2d
<          work(nlast+69) = sarccr3
<          work(nlast+70) = ieasmcc2d
432c409
<       nvals = 30*maxbl + 72*maxbl*maxseg   + 55   + 11*nmds*maxaes
---
>       nvals = 30*maxbl + 72*maxbl*maxseg   + 52   + 11*nmds*maxaes
551,554c528
<          alpha1   = work(nlast+53)
<          beta2    = work(nlast+54)
<          alpha2   = work(nlast+55)
<          nlast = nlast + 55
---
>          nlast = nlast + 52
665,678d638
<          ikoprod   = int(work(nlast+57))
<          isstdenom = int(work(nlast+58))
<          pklimterm = work(nlast+59)
<          iaxi2plane= int(work(nlast+60))
<          iturbord  = int(work(nlast+61))
<          tur2cut   = work(nlast+62)
<          tur1cutlev= work(nlast+63)
<          tur2cutlev= work(nlast+64)
<          meshdef   = int(work(nlast+65))
<          ifullns   = int(work(nlast+66))
<          ibeta8kzeta=int(work(nlast+67))
<          isarc2d   = int(work(nlast+68))
<          sarccr3   = work(nlast+69)
<          ieasmcc2d = int(work(nlast+70))
743c703
<          iwork(nlast+52) = isktyp
---
>          iwork(nlast+52) = ismooth
745,746c705
<          iwork(nlast+54) = nsprgit
<          nlast = nlast + 54
---
>          nlast = nlast + 53
928,933c887,890
<          do j = 1,500
<           do nbl=1,maxbl
<             iwork(nlast+j+500*(nbl-1))           = iskip(nbl,j)
<             iwork(nlast+j+500*maxbl+500*(nbl-1)) = jskip(nbl,j)
<             iwork(nlast+j+1000*maxbl+500*(nbl-1))= kskip(nbl,j)
<           enddo
---
>          do nbl=1,maxbl
>             iwork(nlast+nbl)         = iskip(nbl)
>             iwork(nlast+nbl+maxbl)   = jskip(nbl)
>             iwork(nlast+nbl+2*maxbl) = kskip(nbl)
935c892
<          nlast = nlast + 1500*maxbl
---
>          nlast = nlast + 3*maxbl
939c896
<       nvals =1550*maxbl + 119      + 9*maxbl*maxsegdg + 48*maxbl*maxseg
---
>       nvals = 53*maxbl + 118       + 9*maxbl*maxsegdg + 48*maxbl*maxseg
1010c967
<          isktyp   = iwork(nlast+52)
---
>          ismooth  = iwork(nlast+52)
1012,1013c969
<          nsprgit  = iwork(nlast+54)
<          nlast = nlast + 54
---
>          nlast = nlast + 53
1195,1200c1151,1154
<          do j = 1,500
<           do nbl=1,maxbl
<             iskip(nbl,j) =  iwork(nlast+j+500*(nbl-1))
<             jskip(nbl,j) =  iwork(nlast+j+500*maxbl+500*(nbl-1))
<             kskip(nbl,j) =  iwork(nlast+j+1000*maxbl+500*(nbl-1))
<           end do
---
>          do nbl=1,maxbl
>             iskip(nbl) = iwork(nlast+nbl)
>             jskip(nbl) = iwork(nlast+nbl+maxbl)
>             kskip(nbl) = iwork(nlast+nbl+2*maxbl)
1202c1156
<          nlast = nlast + 1500*maxbl
---
>          nlast = nlast + 3*maxbl
Index: source/cfl3d/dist/updatedg.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/updatedg.F,v
retrieving revision 1.9
retrieving revision 1.5
diff -r1.9 -r1.5
10,15c10,14
<      .                    aesrfdat,perturb,itrans,irotat,islavept,
<      .                    nslave,iskip,jskip,kskip,xs,xxn,nsegdfrm,
<      .                    idfrmseg,iaesurf,maxsegdg,iwk,nmaster,nt,
<      .                    xorig,yorig,zorig,xorgae0,yorgae0,zorgae0,
<      .                    icouple,ireq,nnodes,nblelst,iskmax,jskmax,
<      .                    kskmax,ue)
---
>      .                    aesrfdat,perturb,itrans,irotat,slavept,nslave,
>      .                    iskip,jskip,kskip,xs,xxn,nsegdfrm,idfrmseg,
>      .                    iaesurf,maxsegdg,iwk,nmaster,nt,xorig,
>      .                    yorig,zorig,xorgae0,yorgae0,zorgae0,icouple,
>      .                    ireq,nnodes)
17c16
< c     $Id: updatedg.F,v 1.9 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: updatedg.F,v 1.5 2003/03/05 13:57:44 biedron Exp $
89,91c88,89
<       dimension aesrfdat(5,maxaes),islavept(nslave,nmaster,5)
<       dimension xst(nslave),yst(nslave),zst(nslave),ue(3*nslave)
<       dimension iskip(maxbl,500),jskip(maxbl,500),kskip(maxbl,500)
---
>       dimension aesrfdat(5,maxaes),slavept(nslave,3,nmaster,5)
>       dimension iskip(maxbl),jskip(maxbl),kskip(maxbl)
96,99d93
<       dimension nblelst(maxbl,2)
<       dimension iskmax(maxbl)
<       dimension jskmax(maxbl)
<       dimension kskmax(maxbl)
128,131d121
< #   ifdef FASTIO
<          call writ_buffast(1,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,29)
< #   else
134d123
< #   endif
268a258,319
>                  ist = icsi(nbl,is)
>                  ifn = icsf(nbl,is)
>                  jst = jcsi(nbl,is)
>                  jfn = jcsf(nbl,is)
>                  kst = kcsi(nbl,is)
>                  kfn = kcsf(nbl,is)
> c
> c              Are multiple segments defined. If yes increment start/end
> c              indices to eliminate doubling of displacement
> c
>                  if (jst .eq. jfn) then
>                   if(is.gt.1) then
>                    do is1 = 1,is-1
>                     if(jcsi(nbl,is1).eq.jst.and.jcsf(nbl,is1).
>      .                 eq.jst) then
>                      if(kcsf(nbl,is1).eq.kst) then
>                       kst = kst+1
>                      else if(kcsi(nbl,is1).eq.kfn) then
>                       kfn = kfn-1
>                      else if(icsf(nbl,is1).eq.ist) then
>                       ist = ist+1
>                      else if(icsi(nbl,is1).eq.ifn) then
>                       ifn = ifn-1
>                      end if
>                     end if
>                    enddo
>                   end if
>                  else if (kst .eq. kfn) then
>                   if(is.gt.1) then
>                    do is1 = 1,is-1
>                     if(kcsi(nbl,is1).eq.kst.and.kcsf(nbl,is1).
>      .                 eq.kst) then
>                      if(icsf(nbl,is1).eq.ist) then
>                       ist = ist+1
>                      else if(icsi(nbl,is1).eq.ifn) then
>                       ifn = ifn-1
>                      else if(jcsf(nbl,is1).eq.jst) then
>                       jst = jst+1
>                      else if(jcsi(nbl,is1).eq.jfn) then
>                       jfn = jfn-1
>                      end if
>                     end if
>                    enddo
>                   end if
>                  else if (ist .eq. ifn) then
>                   if(is.gt.1) then
>                    do is1 = 1,is-1
>                     if(icsi(nbl,is1).eq.ist.and.icsf(nbl,is1).
>      .                 eq.ist) then
>                      if(kcsf(nbl,is1).eq.kst) then
>                       kst = kst+1
>                      else if(kcsi(nbl,is1).eq.kfn) then
>                       kfn = kfn-1
>                      else if(jcsf(nbl,is1).eq.jst) then
>                       jst = jst+1
>                      else if(jcsi(nbl,is1).eq.jfn) then
>                       jfn = jfn-1
>                      end if
>                     end if
>                    enddo
>                   end if
>                  end if
290a342,403
>                  ist = icsi(nbl,is)
>                  ifn = icsf(nbl,is)
>                  jst = jcsi(nbl,is)
>                  jfn = jcsf(nbl,is)
>                  kst = kcsi(nbl,is)
>                  kfn = kcsf(nbl,is)
> c
> c              Are multiple segments defined. If yes increment start/end
> c              indices to eliminate doubling of displacement
> c
>                  if (jst .eq. jfn) then
>                   if(is.gt.1) then
>                    do is1 = 1,is-1
>                     if(jcsi(nbl,is1).eq.jst.and.jcsf(nbl,is1).
>      .                 eq.jst) then
>                      if(kcsf(nbl,is1).eq.kst) then
>                       kst = kst+1
>                      else if(kcsi(nbl,is1).eq.kfn) then
>                       kfn = kfn-1
>                      else if(icsf(nbl,is1).eq.ist) then
>                       ist = ist+1
>                      else if(icsi(nbl,is1).eq.ifn) then
>                       ifn = ifn-1
>                      end if
>                     end if
>                    enddo
>                   end if
>                  else if (kst .eq. kfn) then
>                   if(is.gt.1) then
>                    do is1 = 1,is-1
>                     if(kcsi(nbl,is1).eq.kst.and.kcsf(nbl,is1).
>      .                 eq.kst) then
>                      if(icsf(nbl,is1).eq.ist) then
>                       ist = ist+1
>                      else if(icsi(nbl,is1).eq.ifn) then
>                       ifn = ifn-1
>                      else if(jcsf(nbl,is1).eq.jst) then
>                       jst = jst+1
>                      else if(jcsi(nbl,is1).eq.jfn) then
>                       jfn = jfn-1
>                      end if
>                     end if
>                    enddo
>                   end if
>                 else if (ist .eq. ifn) then
>                   if(is.gt.1) then
>                    do is1 = 1,is-1
>                     if(icsi(nbl,is1).eq.ist.and.icsf(nbl,is1).
>      .                 eq.ist) then
>                      if(kcsf(nbl,is1).eq.kst) then
>                       kst = kst+1
>                      else if(kcsi(nbl,is1).eq.kfn) then
>                       kfn = kfn-1
>                      else if(jcsf(nbl,is1).eq.jst) then
>                       jst = jst+1
>                      else if(jcsi(nbl,is1).eq.jfn) then
>                       jfn = jfn-1
>                      end if
>                     end if
>                    enddo
>                   end if
>                  end if
314,321c427,429
<      .                  wk(lwk1),wk(lwk2),wk(lwk3),maxbl,maxseg,
<      .                  nmds,maxaes,aesrfdat,xs,xxn,icsi,icsf,
<      .                  jcsi,jcsf,kcsi,kcsf,nsegdfrm,idfrmseg,
<      .                  iaesurf,maxsegdg)
< c
<             do lll=lwk1,lwk4
<                wk(lll) = 1.
<             end do
---
>      .                  maxbl,maxseg,nmds,maxaes,aesrfdat,
>      .                  xs,xxn,icsi,icsf,jcsi,jcsf,kcsi,kcsf,
>      .                  nsegdfrm,idfrmseg,iaesurf,maxsegdg)
327,330d434
< #   ifdef FASTIO
<          call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,30)
< #   else
333d436
< #   endif
474,561d576
<       if (iunst.gt.1 .or. idef_ss.gt.0) then
<  
<          do 150 nbl = 1,nblock
<          if (myid.eq.mblk2nd(nbl) .and. (levelg(nbl).ge.lglobal .and.
<      .       levelg(nbl).le.levelt(iseqr))) then
< c
<             call lead(nbl,lw,lw2,maxbl)
< c
<             if (idefrm(nbl) .gt. 0) then
< c
< c              temporary storage locations:
< c              lvel  = start of grid point velocity array
< c              lacci = start of i-boundary point acceleration array
< c              laccj = start of j-boundary point acceleration array
< c              lacck = start of k-boundary point acceleration array
< c              lt1wk = start of work array for subroutine metric
< c              lt2wk = start of work array for subroutine metric
< c              lt3wk = start of work array for subroutine metric
< c              lt4wk = start of work array for subroutine cellvol
< c
<                lvel  = 9*nsurf + 1
<                lacci = jdim*kdim*idim*3+lvel
<                laccj = jdim*kdim*3*2+lacci
<                lacck = kdim*idim*3*2+laccj
<                lt1wk = jdim*idim*3*2+lacck
<                lt2wk = jdim*kdim*idim*3+lt1wk
<                lt3wk = jdim*kdim*6+lt2wk
<                lt4wk = jdim*kdim*idim*5+lt3wk 
< c
<                mdim  = jdim*kdim*idim*3
<                if (nwork.lt.mdim) then
<                   nou(1) = min(nou(1)+1,ibufdim)
<                   write(bou(nou(1),1),445)
<                   call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<                end if
< c
<                if (isklton.eq.1)then
<                   nou(1) = min(nou(1)+1,ibufdim)
<                   write(bou(nou(1),1),'('' deforming block  '',i4,
<      .                  '' to new shape'')') nbl
<                end if
< c
< 
<                nflag = 0
<                irst = 0
<                if (idef_ss .gt. 0) irst = 1
<                call deform_surf(nbl,idim,jdim,kdim,w(ldeltj),w(ldeltk),
<      .                          w(ldelti),lw,lw2,icsi,icsf,jcsi,jcsf,
<      .                          kcsi,kcsf,maxbl,mseq,time,dt,ita,nou,
<      .                          bou,nbuf,ibufdim,myid,idefrm,nbci0,
<      .                          nbcidim,nbcj0,nbcjdim,nbck0,nbckdim,
<      .                          ibcinfo,jbcinfo,kbcinfo,maxseg,wk,ue,
<      .                          nsurf,irst,nflag,islavept,nslave,
<      .                          nsegdfrm,idfrmseg,iaesurf,
<      .                          maxsegdg,nmaster,iseqr)
< 
< c
<             end if
<          end if
< 150      continue
<       end if
< c
< #if defined DIST_MPI
<       do nn = 1,maxbl
<         if(nblelst(nn,1).ne.0) then
<           nbl   = nblelst(nn,1)
<           n1    = nblelst(nn,2)
<           n2    = nblelst(nn+1,2)
<           nstrt = 3*(n1-1) + 1  
<           nend  = 3*(n2-1) + 1  
<           ndata = nend - nstrt
<           if (myid .eq. mblk2nd(nbl)) then 
<             mytag   = n1 
<             nd_dest = myhost
<             call MPI_Send (ue(nstrt),ndata,MY_MPI_REAL,
<      .                     nd_dest,mytag,mycomm,ierr)
<           else if (myid .eq. myhost) then 
<             mytag   = n1 
<             nd_srce = mblk2nd(nbl)
<             call MPI_Recv (ue(nstrt),ndata,MY_MPI_REAL,
<      .                     nd_srce,mytag,mycomm,istat,ierr)
<           end if
<         end if
<       enddo
<       call MPI_Bcast (ue,3*nslave,MY_MPI_REAL,myhost,
<      .                mycomm,ierr)
< #endif
< c
568,654d582
<  
<            do n = 1,nslave
<              nbl = islavept(n,9,iseqr)
<              ll  = islavept(n,1,iseqr)
<              if (myid .eq. mblk2nd(nbl)) then
<                call lead(nbl,lw,lw2,maxbl)
<                xst(n) = w(lx+ll)  
<                yst(n) = w(ly+ll)  
<                zst(n) = w(lz+ll)  
<              end if
<            enddo
< #if defined DIST_MPI
<            do nn = 1,maxbl
<              if(nblelst(nn,1).ne.0) then
<                nbl   = nblelst(nn,1)
<                nstrt = nblelst(nn,2) 
<                nend  = nblelst(nn+1,2) 
<                ndata = nend - nstrt
<                if (myid .eq. mblk2nd(nbl)) then
<                    mytag   = nstrt  
<                    nd_dest = myhost
<                    call MPI_Send (xst(nstrt),ndata,
<      .                            MY_MPI_REAL,nd_dest,
<      .                            mytag,mycomm,ierr)
<                else if (myid .eq. myhost) then
<                    mytag   = nstrt  
<                    nd_srce = mblk2nd(nbl)
<                    call MPI_Recv (xst(nstrt),ndata,
<      .                            MY_MPI_REAL,nd_srce,mytag,
<      .                            mycomm,istat,ierr)
<                end if
<              end if
<            enddo
<            do nn = 1,maxbl
<              if(nblelst(nn,1).ne.0) then
<                nbl   = nblelst(nn,1)
<                nstrt = nblelst(nn,2) 
<                nend  = nblelst(nn+1,2) 
<                ndata = nend - nstrt
<                if (myid .eq. mblk2nd(nbl)) then
<                    mytag   = nstrt  
<                    nd_dest = myhost
<                    call MPI_Send (yst(nstrt),ndata,
<      .                            MY_MPI_REAL,nd_dest,
<      .                            mytag,mycomm,ierr)
<                else if (myid .eq. myhost) then
<                    mytag   = nstrt  
<                    nd_srce = mblk2nd(nbl)
<                    call MPI_Recv (yst(nstrt),ndata,
<      .                            MY_MPI_REAL,nd_srce,mytag,
<      .                            mycomm,istat,ierr)
<                end if
<              end if
<            enddo
<            do nn = 1,maxbl
<              if(nblelst(nn,1).ne.0) then
<                nbl   = nblelst(nn,1)
<                nstrt = nblelst(nn,2) 
<                nend  = nblelst(nn+1,2) 
<                ndata = nend - nstrt
<                if (myid .eq. mblk2nd(nbl)) then
<                    mytag   = nstrt  
<                    nd_dest = myhost
<                    call MPI_Send (zst(nstrt),ndata,
<      .                            MY_MPI_REAL,nd_dest,
<      .                            mytag,mycomm,ierr)
<                else if (myid .eq. myhost) then
<                    mytag   = nstrt  
<                    nd_srce = mblk2nd(nbl)
<                    call MPI_Recv (zst(nstrt),ndata,
<      .                            MY_MPI_REAL,nd_srce,mytag,
<      .                            mycomm,istat,ierr)
<                end if
<              end if
<            enddo
<            call MPI_Bcast (xst,nslave,MY_MPI_REAL,myhost,
<      .                     mycomm,ierr)
<            call MPI_Bcast (yst,nslave,MY_MPI_REAL,myhost,
<      .                     mycomm,ierr)
<            call MPI_Bcast (zst,nslave,MY_MPI_REAL,myhost,
<      .                     mycomm,ierr)
< #endif
<          call deform_el(islavept,nslave,nmaster,ue,xst,yst,zst,
<      .                  nt,myhost,mycomm,myid,nnodes,mblk2nd,nblelst,
<      .                  maxbl,iseqr)
<       end if
<       if (iunst.gt.1 .or. idef_ss.gt.0) then
702,711c630,639
<      .                     w(lxnm2),w(lynm2),w(lznm2),w(lxnm1),
<      .                     w(lynm1),w(lznm1),w(ldeltj),w(ldeltk),
<      .                     w(ldelti),ue,wk(lvel),icsi,icsf,jcsi,
<      .                     jcsf,kcsi,kcsf,maxbl,dt,nou,bou,
<      .                     nbuf,ibufdim,myid,idefrm,nbci0,nbcidim,
<      .                     nbcj0,nbcjdim,nbck0,nbckdim,ibcinfo,jbcinfo,
<      .                     kbcinfo,maxseg,wk,nsurf,irst,nflag,
<      .                     islavept,nslave,iskip,jskip,kskip,nsegdfrm,
<      .                     idfrmseg,iaesurf,maxsegdg,nmaster,iseqr,
<      .                     iskmax,jskmax,kskmax,nt)
---
>      .                     w(lxnm2),w(lynm2),w(lznm2),
>      .                     w(lxnm1),w(lynm1),w(lznm1),
>      .                     w(ldeltj),w(ldeltk),w(ldelti),wk(lvel),
>      .                     icsi,icsf,jcsi,jcsf,kcsi,kcsf,maxbl,time,
>      .                     dt,ita,nou,bou,nbuf,ibufdim,myid,idefrm,
>      .                     nbci0,nbcidim,nbcj0,nbcjdim,nbck0,nbckdim,
>      .                     ibcinfo,jbcinfo,kbcinfo,maxseg,wk,nsurf,irst,
>      .                     nflag,ivert,slavept,nslave,iskip,jskip,
>      .                     kskip,nsegdfrm,idfrmseg,iaesurf,maxsegdg,
>      .                     nmaster,iseqr)
871,874d798
< #   ifdef FASTIO
<          call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,31)
< #   else
877d800
< #   endif
884,3259d806
<       subroutine elglobfe(sa,xst,yst,zst,xix,xiy,xiz,etax,etay,
<      .                    etaz,zetax,zetay,zetaz,ei,ej,ek,gij,gjk,
<      .                    gik,ooj,eps,stiffl,islavept,ija,nslave,
<      .                    nmaster,nnodes,myhost,myid,mycomm,mblk2nd,
<      .                    nblelst,maxbl,iseqr)
< #if defined DIST_MPI
< #     include "mpif.h"
< #   ifdef DBLE_PRECSN
< #      ifdef CMPLX
< #        define MY_MPI_REAL MPI_DOUBLE_COMPLEX
< #      else
< #        define MY_MPI_REAL MPI_DOUBLE_PRECISION
< #      endif
< #   else
< #      ifdef CMPLX
< #        define MY_MPI_REAL MPI_COMPLEX
< #      else
< #        define MY_MPI_REAL MPI_REAL
< #      endif
< #   endif
<       dimension istat(MPI_STATUS_SIZE)
< #endif
< c
<        dimension xst(nslave),yst(nslave),zst(nslave),xix(nslave),
<      .           xiy(nslave),xiz(nslave),etax(nslave),etay(nslave),
<      .           etaz(nslave),zetax(nslave),zetay(nslave),zetaz(nslave),
<      .           ei(nslave),ej(nslave),ek(nslave),gij(nslave),
<      .           gjk(nslave),gik(nslave),tinv(6,6),t(6,6),ul(6,6),
<      .           c(6,6),cjp1(6,6),cjm1(6,6),cim1(6,6),cip1(6,6),
<      .           ckm1(6,6),ckp1(6,6),ooj(nslave)
<       dimension sa(245*nslave+2),stiffl(24,24)
<       dimension ija(245*nslave+2)
<       dimension islavept(nslave,nmaster,5)
<       dimension n1(0:7),n2(0:7),n11(0:7),n11i(20,0:7),n33i(20,0:7),
<      .          iimax(0:7),n44i(0:7)
<       dimension mblk2nd(maxbl)
<       dimension nblelst(maxbl,2)
<       common /twod/ i2d
< c
< c
< c
<       isl1 = 8
<       isl2 = 2
<       isl3 = 3
<       isl4 = 4
<       isl5 = 5
<       if(i2d.ne.0) then
<         isl6 = 4
<         isl7 = 5
<       else
<         isl6 = 6
<         isl7 = 7
<       end if
<       n2(0) = 1
<       n2(1) = 4
<       n2(2) = 16
<       n2(3) = 13
<       n2(4) = 7
<       n2(5) = 19
<       n2(6) = 10
<       n2(7) = 22
< c
<        do 200 n = 1,nslave
< c
<         n1(0)    = n
<         n1(1)    = islavept(n,3,iseqr)
<         n1(2)    = islavept(n,5,iseqr)
<         n1(3)    = islavept(n1(2),3,iseqr)
<         n1(4)    = islavept(n,7,iseqr)
<         n1(5)    = islavept(n1(2),7,iseqr)
<         n1(6)    = islavept(n1(1),7,iseqr)
<         n1(7)    = islavept(n1(6),5,iseqr)
<         nbl = islavept(n,9,iseqr)
<         if(n1(1).ne.n.and.n1(2).ne.n.and.n1(4).ne.n.and.
<      .     islavept(n1(1),9,iseqr).eq.nbl.and.
<      .     islavept(n1(2),9,iseqr).eq.nbl.and.
<      .     islavept(n1(4),9,iseqr).eq.nbl) then
< c
<         xi =.25*(xst(n1(4))-xst(n1(0))+xst(n1(5))-xst(n1(2))
<      .          +xst(n1(6))-xst(n1(1))+xst(n1(7))-xst(n1(3)))
<         zi =.25*(zst(n1(4))-zst(n1(0))+zst(n1(5))-zst(n1(2))
<      .          +zst(n1(6))-zst(n1(1))+zst(n1(7))-zst(n1(3)))
<         yi =.25*(yst(n1(4))-yst(n1(0))+yst(n1(5))-yst(n1(2))
<      .          +yst(n1(6))-yst(n1(1))+yst(n1(7))-yst(n1(3)))
<         xj =.25*(xst(n1(1))-xst(n1(0))+xst(n1(3))-xst(n1(2))
<      .          +xst(n1(6))-xst(n1(4))+xst(n1(7))-xst(n1(5)))
<         yj =.25*(yst(n1(1))-yst(n1(0))+yst(n1(3))-yst(n1(2))
<      .          +yst(n1(6))-yst(n1(4))+yst(n1(7))-yst(n1(5)))
<         zj =.25*(zst(n1(1))-zst(n1(0))+zst(n1(3))-zst(n1(2))
<      .          +zst(n1(6))-zst(n1(4))+zst(n1(7))-zst(n1(5)))
<         denomi= sqrt(xi*xi+yi*yi+zi*zi)
<         xi = xi/denomi
<         yi = yi/denomi
<         zi = zi/denomi
<         denomj= sqrt(xj*xj+yj*yj+zj*zj)
<         xj = xj/denomj
<         yj = yj/denomj
<         zj = zj/denomj
<         xk = yi*zj - zi*yj
<         yk = zi*xj - xi*zj
<         zk = xi*yj - yi*xj
<         xi = yj*zk - zj*yk
<         yi = zj*xk - xj*zk
<         zi = xj*yk - yj*xk
< c
< c  Note the row-column ordering here because
< c  the transformation is from local coord to
< c  the x,y,z - coordinate system
< c
<         t11 = xi
<         t21 = yi
<         t31 = zi
<         t12 = xj
<         t22 = yj
<         t32 = zj
<         t13 = xk
<         t23 = yk
<         t33 = zk
<         t(1,1) = t11*t11
<         t(1,2) = t12*t12
<         t(1,3) = t13*t13
<         t(1,4) = 2.*t11*t12
<         t(1,5) = 2.*t12*t13
<         t(1,6) = 2.*t11*t13
<         t(2,1) = t21*t21
<         t(2,2) = t22*t22
<         t(2,3) = t23*t23
<         t(2,4) = 2.*t21*t22
<         t(2,5) = 2.*t22*t23
<         t(2,6) = 2.*t21*t23
<         t(3,1) = t31*t31
<         t(3,2) = t32*t32
<         t(3,3) = t33*t33
<         t(3,4) = 2.*t31*t32
<         t(3,5) = 2.*t32*t33
<         t(3,6) = 2.*t31*t33
<         t(4,1) = t11*t21
<         t(4,2) = t12*t22
<         t(4,3) = t13*t23
<         t(4,4) = t11*t22+t21*t12
<         t(4,5) = t12*t23+t13*t22
<         t(4,6) = t11*t23+t13*t21
<         t(5,1) = t31*t21
<         t(5,2) = t22*t32
<         t(5,3) = t23*t33
<         t(5,4) = t21*t32+t22*t31
<         t(5,5) = t22*t33+t32*t23
<         t(5,6) = t21*t33+t23*t31
<         t(6,1) = t11*t31
<         t(6,2) = t12*t32
<         t(6,3) = t13*t33
<         t(6,4) = t11*t32+t12*t31
<         t(6,5) = t12*t33+t13*t32
<         t(6,6) = t11*t33+t31*t13
<  
< c
< c  The inverse must be used:
< c
<         call INVDET(ul,t,6,DTNRM,DETM)
< c
<         do jj = 1,6
<          tinv(1,jj) =  ei(n) *ul(1,jj)
<          tinv(2,jj) =  ej(n) *ul(2,jj)
<          tinv(3,jj) =  ek(n) *ul(3,jj)
<          tinv(4,jj) =  gij(n)*ul(4,jj)
<          tinv(5,jj) =  gjk(n)*ul(5,jj)
<          tinv(6,jj) =  gik(n)*ul(6,jj)
<         enddo
<         do jj = 1,6
<           do ii = 1,6
<             sum = 0.
<             do kk = 1,6
<               sum = sum + t(ii,kk)*tinv(kk,jj)
<             enddo
<             c(ii,jj) = sum
<           enddo
<         enddo
< c
<       c0 = 1./2.
<       c1 = 1./6.
<       c2 = 1./9.
<       c3 = 1./12.
<       c4 = 1./18.
<       c5 = 1./24.
<       c6 = 1./36.
< c
< c    Rows 1-3
< c
<        term1 = xix(n)  *xix(n)  +etax(n) *etax(n) +zetax(n)*zetax(n)
<        term2 = etax(n) *xix(n)  +zetax(n)*xix(n)  +zetax(n)* etax(n)
<        term3 = xiy(n)  *xiy(n)  +etay(n) *etay(n) +zetay(n)*zetay(n)
<        term4 = etay(n) *xiy(n)  +zetay(n)*xiy(n)  +zetay(n)* etay(n)
<        term5 = xiz(n)  *xiz(n)  +etaz(n) *etaz(n) +zetaz(n)*zetaz(n)
<        term6 = etaz(n) *xiz(n)  +zetaz(n)*xiz(n)  +zetaz(n)* etaz(n)
<        term7 = xix(n)  *xiy(n)  +etay(n) *etax(n) +zetay(n)*zetax(n)
<        term8 = xix(n)  *etay(n) +xix(n)  *zetay(n)+xiy(n)  *etax(n)
<      .        +zetay(n)*etax(n) +xiy(n)  *zetax(n)+etay(n) *zetax(n)
<        term9 = xiz(n)  *xix(n)  +etaz(n) *etax(n) +zetaz(n)*zetax(n)
<        term10= xix(n)  *etaz(n) +xix(n)  *zetaz(n)+xiz(n)  *etax(n)
<      .        +zetaz(n)*etax(n) +xiz(n)  *zetax(n)+etaz(n) *zetax(n)
<        term11= xiz(n)  *xiy(n)  +etaz(n) *etay(n) +zetaz(n)*zetay(n)
<        term12= xiy(n)  *etaz(n) +xiy(n)  *zetaz(n)+xiz(n)  *etay(n)
<      .        +zetaz(n)*etay(n) +xiz(n)  *zetay(n)+etaz(n) *zetay(n)
<  
<  
<        term13 = c2*term1+c1*term2
<        term14 = c2*term3+c1*term4
<        term15 = c2*term5+c1*term6
<        term16 = c2*term7 +c3*term8
<        term17 = c2*term9 +c3*term10
<        term18 = c2*term11+c3*term12
<        stiffl(1,1)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16
<      .             +(c(1,6)+c(6,1))*term17
<      .             +(c(4,6)+c(6,4))*term18
<        stiffl(1,2)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(1,2)+c(4,4))*term16
<      .             +(c(1,5)+c(6,4))*term17
<      .             +(c(4,5)+c(6,2))*term18
<        stiffl(1,3)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(1,5)+c(4,6))*term16
<      .             +(c(1,3)+c(6,6))*term17
<      .             +(c(4,3)+c(6,5))*term18
<        stiffl(2,2)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16
<      .             +(c(2,5)+c(5,2))*term18
<      .             +(c(4,5)+c(5,4))*term17
<        stiffl(2,3)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16
<      .             +(c(2,3)+c(5,5))*term18
<      .             +(c(4,3)+c(5,6))*term17
<        stiffl(3,3)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(6,5)+c(5,6))*term16
<      .             +(c(3,5)+c(5,3))*term18
<      .             +(c(3,6)+c(6,3))*term17
<   
<        term13= -c2*xix(n)  *  xix(n)+c4* etax(n) *etax(n)
<      .         +c3*zetax(n)* etax(n)+c4*zetax(n)*zetax(n)
<        term14= -c2*xiy(n)  *  xiy(n)+c4* etay(n) *etay(n)
<      .         +c3*zetay(n)* etay(n)+c4*zetay(n)*zetay(n)
<        term15= -c2*xiz(n)  *  xiz(n)+c4* etaz(n) *etaz(n)
<      .         +c3*zetaz(n)* etaz(n)+c4*zetaz(n)*zetaz(n)
<        term16= -c2*xiy(n)  *  xix(n)+c4* etay(n) *etax(n)
<      .         +c5*zetay(n)* etax(n)+c5* etay(n)*zetax(n)
<      .         +c4*zetay(n)*zetax(n)
<        term17= c3*( etax(n)*  xiy(n)+   zetax(n)*  xiy(n)
<      .            -  xix(n)* etay(n)-     xix(n)*zetay(n))
<        term18= -c2*xiz(n)  *  xix(n)+c4* etaz(n) *etax(n)
<      .         +c5*zetaz(n)* etax(n)+c5* etaz(n)*zetax(n)
<      .         +c4*zetaz(n)*zetax(n)
<        term19= c3*( etax(n)*  xiz(n)+   zetax(n)*  xiz(n)
<      .            -  xix(n)* etaz(n)-     xix(n)*zetaz(n))
<        term20= -c2*xiz(n)  *  xiy(n)+c4* etaz(n) *etay(n)
<      .         +c5*zetaz(n)* etay(n)+c5* etaz(n)*zetay(n)
<      .         +c4*zetaz(n)*zetay(n)
<        term21= c3*( etay(n)*  xiz(n)+   zetay(n)*  xiz(n)
<      .            -  xiy(n)* etaz(n)-     xiy(n)*zetaz(n))
<        stiffl(1,4)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(4,1)-c(1,4))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(6,1)-c(1,6))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(6,4)-c(4,6))*term21
<        stiffl(2,4)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(2,1)-c(4,4))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(5,1)-c(4,6))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(5,4)-c(2,6))*term21
<        stiffl(3,4)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(5,1)-c(6,4))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(3,1)-c(6,6))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(3,4)-c(5,6))*term21
<        stiffl(3,5)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(5,4)-c(6,2))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(3,4)-c(6,5))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(3,2)-c(5,5))*term21
<        stiffl(2,5)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(2,4)-c(4,2))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(5,4)-c(4,5))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(5,2)-c(2,5))*term21
<        stiffl(1,5)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(4,4)-c(1,2))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(6,4)-c(1,5))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(6,2)-c(4,5))*term21
<        stiffl(3,6)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(5,6)-c(6,5))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(3,6)-c(6,3))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(3,5)-c(5,3))*term21
<        stiffl(2,6)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(2,6)-c(4,5))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(5,6)-c(4,3))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(5,5)-c(2,3))*term21
<        stiffl(1,6)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(4,6)-c(1,5))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(6,6)-c(1,3))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(6,5)-c(4,3))*term21
<   
<        term13=  c4*xix(n)  *  xix(n)+c4* etax(n) *etax(n)
<      .         +c3*  xix(n)* etax(n)-c2*zetax(n)*zetax(n)
<        term14=  c4*xiy(n)  *  xiy(n)+c4* etay(n) *etay(n)
<      .         +c3*  xiy(n)* etay(n)-c2*zetay(n)*zetay(n)
<        term15=  c4*xiz(n)  *  xiz(n)+c4* etaz(n) *etaz(n)
<      .         +c3*  xiz(n)* etaz(n)-c2*zetaz(n)*zetaz(n)
<        term16=  c4*xiy(n)  *  xix(n)+c5* etay(n) * xix(n)
<      .         +c5*  xiy(n)* etax(n)+c4* etay(n)* etax(n)
<      .         -c2*zetay(n)*zetax(n)
<        term17= c3*(zetax(n)*  xiy(n)+   zetax(n)* etay(n)
<      .            -  xix(n)*zetay(n)-    etax(n)*zetay(n))
<        term18=  c4*xiz(n)  *  xix(n)+c5* etaz(n) * xix(n)
<      .         +c5*  xiz(n)* etax(n)+c4* etaz(n)* etax(n)
<      .         -c2*zetaz(n)*zetax(n)
<        term19= c3*(zetax(n)*  xiz(n)+   zetax(n)* etaz(n)
<      .            -  xix(n)*zetaz(n)-    etax(n)*zetaz(n))
<        term20=  c4*xiz(n)  *  xiy(n)+c5* etaz(n) * xiy(n)
<      .         +c5*  xiz(n)* etay(n)+c4* etaz(n)* etay(n)
<      .         -c2*zetaz(n)*zetay(n)
<        term21= c3*(zetay(n)*  xiz(n)+   zetay(n)* etaz(n)
<      .            -  xiy(n)*zetaz(n)-    etay(n)*zetaz(n))
<        stiffl(1,7)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(2,7)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(3,7)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(3,8)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(2,8)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(1,8)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(3,9)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(2,9)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(1,9)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
<        term13= -c4*xix(n)  *  xix(n)+c6* etax(n) *etax(n)
<      .         -c1*  xix(n)*zetax(n)-c4*zetax(n)*zetax(n)
<        term14= -c4*xiy(n)  *  xiy(n)+c6* etay(n) *etay(n)
<      .         -c1*  xiy(n)*zetay(n)-c4*zetay(n)*zetay(n)
<        term15= -c4*xiz(n)  *  xiz(n)+c6* etaz(n) *etaz(n)
<      .         -c1*  xiz(n)*zetaz(n)-c4*zetaz(n)*zetaz(n)
<        term16= -c4*xiy(n)  *  xix(n)-c3*zetay(n) * xix(n)
<      .         +c6* etay(n)* etax(n)-c3*  xiy(n)*zetax(n)
<      .         -c4*zetay(n)*zetax(n)
<        term17= c5*(-etax(n)*  xiy(n)+     xix(n)* etay(n)
<      .            +zetax(n)* etay(n)-    etax(n)*zetay(n))
<        term18= -c4*xiz(n)  *  xix(n)-c3*zetaz(n) * xix(n)
<      .         +c6* etaz(n)* etax(n)-c3*  xiz(n)*zetax(n)
<      .         -c4*zetaz(n)*zetax(n)
<        term19= c5*(-etax(n)*  xiz(n)+     xix(n)* etaz(n)
<      .            +zetax(n)* etaz(n)-    etax(n)*zetaz(n))
<        term20= -c4*xiz(n)  *  xiy(n)-c3*zetaz(n) * xiy(n)
<      .         +c6* etaz(n)* etay(n)-c3*  xiz(n)*zetay(n)
<      .         -c4*zetaz(n)*zetay(n)
<        term21= c5*(-etay(n)*  xiz(n)+     xiy(n)* etaz(n)
<      .            +zetay(n)* etaz(n)-    etay(n)*zetaz(n))
<        stiffl(1,10)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(2,10)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(3,10)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(3,11)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(2,11)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(1,11)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(3,12)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(2,12)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(1,12)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c4*xix(n)  *  xix(n)-c4* etax(n) *etax(n)
<      .         -c1*  xix(n)* etax(n)+c6*zetax(n)*zetax(n)
<        term14= -c4*xiy(n)  *  xiy(n)-c4* etay(n) *etay(n)
<      .         -c1*  xiy(n)* etay(n)+c6*zetay(n)*zetay(n)
<        term15= -c4*xiz(n)  *  xiz(n)-c4* etaz(n) *etaz(n)
<      .         -c1*  xiz(n)* etaz(n)+c6*zetaz(n)*zetaz(n)
<        term16= -c4*xiy(n)  *  xix(n)-c3* etay(n) * xix(n)
<      .         -c3*  xiy(n)* etax(n)-c4* etay(n)* etax(n)
<      .         +c6*zetay(n)*zetax(n)
<        term17= c5*(-zetax(n)*  xiy(n) -  zetax(n)* etay(n)
<      .             +zetay(n)*  xix(n) +   etax(n)*zetay(n))
<        term18= -c4*xiz(n)  *  xix(n)-c3* etaz(n) * xix(n)
<      .         -c3*  xiz(n)* etax(n)-c4* etaz(n)* etax(n)
<      .         +c6*zetaz(n)*zetax(n)
<        term19= c5*(-zetax(n)*  xiz(n) -  zetax(n)* etaz(n)
<      .             +zetaz(n)*  xix(n) +   etax(n)*zetaz(n))
<        term20= -c4*xiz(n)  *  xiy(n)-c3* etaz(n) * xiy(n)
<      .         -c3*  xiz(n)* etay(n)-c4* etaz(n)* etay(n)
<      .         +c6*zetaz(n)*zetay(n)
<        term21= c5*(-zetay(n)*  xiz(n) -  zetay(n)* etaz(n)
<      .             +zetaz(n)*  xiy(n) +   etay(n)*zetaz(n))
<        stiffl(1,13)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(2,13)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(3,13)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(3,14)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(2,14)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(1,14)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(3,15)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(2,15)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(1,15)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13=  c4*xix(n)  *  xix(n)-c2* etax(n) *etax(n)
<      .         +c3*  xix(n)*zetax(n)+c4*zetax(n)*zetax(n)
<        term14=  c4*xiy(n)  *  xiy(n)-c2* etay(n) *etay(n)
<      .         +c3*  xiy(n)*zetay(n)+c4*zetay(n)*zetay(n)
<        term15=  c4*xiz(n)  *  xiz(n)-c2* etaz(n) *etaz(n)
<      .         +c3*  xiz(n)*zetaz(n)+c4*zetaz(n)*zetaz(n)
<        term16=  c4*xiy(n)  *  xix(n)+c5*zetay(n) * xix(n)
<      .         +c5*  xiy(n)*zetax(n)-c2* etay(n)* etax(n)
<      .         +c4*zetay(n)*zetax(n)
<        term17= c3*(-etay(n)*  xix(n) +   etax(n)*  xiy(n)
<      .             +etax(n)*zetay(n) -  zetax(n)* etay(n))
<        term18=  c4*xiz(n)  *  xix(n)+c5*zetaz(n) * xix(n)
<      .         +c5*  xiz(n)*zetax(n)-c2* etaz(n)* etax(n)
<      .         +c4*zetaz(n)*zetax(n)
<        term19= c3*(-etaz(n)*  xix(n) +   etax(n)*  xiz(n)
<      .             +etax(n)*zetaz(n) -  zetax(n)* etaz(n))
<        term20=  c4*xiz(n)  *  xiy(n)+c5*zetaz(n) * xiy(n)
<      .         +c5*  xiz(n)*zetay(n)-c2* etaz(n)* etay(n)
<      .         +c4*zetaz(n)*zetay(n)
<        term21= c3*(-etaz(n)*  xiy(n) +   etay(n)*  xiz(n)
<      .             +etay(n)*zetaz(n) -  zetay(n)* etaz(n))
<        stiffl(1,16)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(2,16)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(3,16)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(3,17)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(2,17)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(1,17)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(3,18)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(2,18)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(1,18)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13=  c6*xix(n)  *  xix(n)-c4* etax(n) *etax(n)
<      .         -c1*zetax(n)* etax(n)-c4*zetax(n)*zetax(n)
<        term14=  c6*xiy(n)  *  xiy(n)-c4* etay(n) *etay(n)
<      .         -c1*zetay(n)* etay(n)-c4*zetay(n)*zetay(n)
<        term15=  c6*xiz(n)  *  xiz(n)-c4* etaz(n) *etaz(n)
<      .         -c1*zetaz(n)* etaz(n)-c4*zetaz(n)*zetaz(n)
<        term16=  c6*xiy(n)  *  xix(n)-c4* etay(n) *etax(n)
<      .         -c3*zetay(n)* etax(n)-c3* etay(n)*zetax(n)
<      .         -c4*zetay(n)*zetax(n)
<        term17= c5*( etax(n)*  xiy(n) +  zetax(n)*  xiy(n)
<      .            -  xix(n)* etay(n) -    xix(n)*zetay(n))
<        term18=  c6*xiz(n)  *  xix(n)-c4* etaz(n) *etax(n)
<      .         -c3*zetaz(n)* etax(n)-c3* etaz(n)*zetax(n)
<      .         -c4*zetaz(n)*zetax(n)
<        term19= c5*( etax(n)*  xiz(n) +  zetax(n)*  xiz(n)
<      .            -  xix(n)* etaz(n) -    xix(n)*zetaz(n))
<        term20=  c6*xiz(n)  *  xiy(n)-c4* etaz(n) *etay(n)
<      .         -c3*zetaz(n)* etay(n)-c3* etaz(n)*zetay(n)
<      .         -c4*zetaz(n)*zetay(n)
<        term21= c5*( etay(n)*  xiz(n) +  zetay(n)*  xiz(n)
<      .            -  xiy(n)* etaz(n) -    xiy(n)*zetaz(n))
<        stiffl(1,19)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(2,19)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(3,19)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(3,20)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(2,20)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(1,20)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(3,21)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(2,21)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(1,21)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c6*xix(n)  *  xix(n)-c3* etax(n) * xix(n)
<      .         -c3*zetax(n)*  xix(n)-c6* etax(n)* etax(n)
<      .         -c3*zetax(n)* etax(n)-c6*zetax(n)*zetax(n)
<        term14= -c6*xiy(n)  *  xiy(n)-c3* etay(n) * xiy(n)
<      .         -c3*zetay(n)*  xiy(n)-c6* etay(n)* etay(n)
<      .         -c3*zetay(n)* etay(n)-c6*zetay(n)*zetay(n)
<        term15= -c6*xiz(n)  *  xiz(n)-c3* etaz(n) * xiz(n)
<      .         -c3*zetaz(n)*  xiz(n)-c6* etaz(n)* etaz(n)
<      .         -c3*zetaz(n)* etaz(n)-c6*zetaz(n)*zetaz(n)
<        term16= -c6*xiy(n)  *  xix(n)-c6* etay(n) *etax(n)
<      .         -c6*zetay(n)*zetax(n)
<        term17= c5*(-etay(n)*  xix(n) -  zetay(n)*  xix(n)
<      .            -  xiy(n)* etax(n) -  zetay(n)* etax(n)
<      .            -  xiy(n)*zetax(n) -   etay(n)*zetax(n))
<        term18= -c6*xiz(n)  *  xix(n)-c6* etaz(n) *etax(n)
<      .         -c6*zetaz(n)*zetax(n)
<        term19= c5*(-etaz(n)*  xix(n) -  zetaz(n)*  xix(n)
<      .            -  xiz(n)* etax(n) -  zetaz(n)* etax(n)
<      .            -  xiz(n)*zetax(n) -   etaz(n)*zetax(n))
<        term20= -c6*xiz(n)  *  xiy(n)-c6* etaz(n) *etay(n)
<      .         -c6*zetaz(n)*zetay(n)
<        term21= c5*(-etaz(n)*  xiy(n) -  zetaz(n)*  xiy(n)
<      .            -  xiz(n)* etay(n) -  zetaz(n)* etay(n)
<      .            -  xiz(n)*zetay(n) -   etaz(n)*zetay(n))
<        stiffl(1,22)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)+c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)+c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)+c(6,4))*term21
<        stiffl(2,22)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)+c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)+c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)+c(5,4))*term21
<        stiffl(3,22)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)+c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)+c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)+c(3,4))*term21
<        stiffl(3,23)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)+c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)+c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)+c(3,2))*term21
<        stiffl(2,23)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)+c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)+c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)+c(5,2))*term21
<        stiffl(1,23)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)+c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)+c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)+c(6,2))*term21
<        stiffl(3,24)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)+c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)+c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)+c(3,5))*term21
<        stiffl(2,24)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)+c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)+c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)+c(5,5))*term21
<        stiffl(1,24)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)+c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)+c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)+c(6,5))*term21
< c
< c
< c    Rows 4-6
< c
<        term1 = xix(n)  *xix(n)  +etax(n) *etax(n) +zetax(n)*zetax(n)
<        term2 =-etax(n) *xix(n)  -zetax(n)*xix(n)  +zetax(n)* etax(n)
<        term3 = xiy(n)  *xiy(n)  +etay(n) *etay(n) +zetay(n)*zetay(n)
<        term4 =-etay(n) *xiy(n)  -zetay(n)*xiy(n)  +zetay(n)* etay(n)
<        term5 = xiz(n)  *xiz(n)  +etaz(n) *etaz(n) +zetaz(n)*zetaz(n)
<        term6 =-etaz(n) *xiz(n)  -zetaz(n)*xiz(n)  +zetaz(n)* etaz(n)
<        term7 = xix(n)  *xiy(n)  +etay(n) *etax(n) +zetay(n)*zetax(n)
<        term8 =-xix(n)  *etay(n) -xix(n)  *zetay(n)-xiy(n)  *etax(n)
<      .        +zetay(n)*etax(n) -xiy(n)  *zetax(n)+etay(n) *zetax(n)
<        term9 = xiz(n)  *xix(n)  +etaz(n) *etax(n) +zetaz(n)*zetax(n)
<        term10=-xix(n)  *etaz(n) -xix(n)  *zetaz(n)-xiz(n)  *etax(n)
<      .        +zetaz(n)*etax(n) -xiz(n)  *zetax(n)+etaz(n) *zetax(n)
<        term11= xiz(n)  *xiy(n)  +etaz(n) *etay(n) +zetaz(n)*zetay(n)
<        term12=-xiz(n)  *etay(n) -xiz(n)  *zetay(n)-xiy(n)  *etaz(n)
<      .        +zetay(n)*etaz(n) -xiy(n)  *zetaz(n)+etay(n) *zetaz(n)
<        term13 = c2*term1+c1*term2
<        term14 = c2*term3+c1*term4
<        term15 = c2*term5+c1*term6
<        term16 = c2*term7 +c3*term8
<        term17 = c2*term9 +c3*term10
<        term18 = c2*term11+c3*term12
<        stiffl(4,4)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16
<      .             +(c(1,6)+c(6,1))*term17
<      .             +(c(4,6)+c(6,4))*term18
<        stiffl(4,5)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(1,2)+c(4,4))*term16
<      .             +(c(1,5)+c(6,4))*term17
<      .             +(c(4,5)+c(6,2))*term18
<        stiffl(4,6)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(1,5)+c(4,6))*term16
<      .             +(c(1,3)+c(6,6))*term17
<      .             +(c(4,3)+c(6,5))*term18
<        stiffl(5,5)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16
<      .             +(c(4,5)+c(5,4))*term17
<      .             +(c(2,5)+c(5,2))*term18
<        stiffl(5,6)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16
<      .             +(c(4,3)+c(5,6))*term17
<      .             +(c(2,3)+c(5,5))*term18
<        stiffl(6,6)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(6,5)+c(5,6))*term16
<      .             +(c(3,6)+c(6,3))*term17
<      .             +(c(3,5)+c(5,3))*term18
<   
<        term13= -c4*xix(n)  *  xix(n)+c6* etax(n) *etax(n)
<      .         +c1*  xix(n)*zetax(n)-c4*zetax(n)*zetax(n)
<        term14= -c4*xiy(n)  *  xiy(n)+c6* etay(n) *etay(n)
<      .         +c1*  xiy(n)*zetay(n)-c4*zetay(n)*zetay(n)
<        term15= -c4*xiz(n)  *  xiz(n)+c6* etaz(n) *etaz(n)
<      .         +c1*  xiz(n)*zetaz(n)-c4*zetaz(n)*zetaz(n)
<        term16= -c4*xiy(n)  *  xix(n)+c3*zetay(n) * xix(n)
<      .         +c3*  xiy(n)*zetax(n)+c6* etay(n)* etax(n)
<      .         -c4*zetay(n)*zetax(n)
<        term17= c5*( etax(n)*  xiy(n)-     xix(n)* etay(n)
<      .            +zetax(n)* etay(n)-    etax(n)*zetay(n))
<        term18= -c4*xiz(n)  *  xix(n)+c3*zetaz(n) * xix(n)
<      .         +c3*  xiz(n)*zetax(n)+c6* etaz(n)* etax(n)
<      .         -c4*zetaz(n)*zetax(n)
<        term19= c5*( etax(n)*  xiz(n)-     xix(n)* etaz(n)
<      .            +zetax(n)* etaz(n)-    etax(n)*zetaz(n))
<        term20= -c4*xiz(n)  *  xiy(n)+c3*zetaz(n) * xiy(n)
<      .         +c3*  xiz(n)*zetay(n)+c6* etaz(n)* etay(n)
<      .         -c4*zetaz(n)*zetay(n)
<        term21= c5*( etay(n)*  xiz(n)-     xiy(n)* etaz(n)
<      .            +zetay(n)* etaz(n)-    etay(n)*zetaz(n))
<        stiffl(4,7)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(5,7)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(6,7)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(6,8)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(5,8)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(4,8)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(6,9)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(5,9)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(4,9)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
<  
<        term13=  c4*xix(n)  *  xix(n)+c4* etax(n) *etax(n)
<      .         -c3*  xix(n)* etax(n)-c2*zetax(n)*zetax(n)
<        term14=  c4*xiy(n)  *  xiy(n)+c4* etay(n) *etay(n)
<      .         -c3*  xiy(n)* etay(n)-c2*zetay(n)*zetay(n)
<        term15=  c4*xiz(n)  *  xiz(n)+c4* etaz(n) *etaz(n)
<      .         -c3*  xiz(n)* etaz(n)-c2*zetaz(n)*zetaz(n)
<        term16=  c4*xiy(n)  *  xix(n)-c5* etax(n) * xiy(n)
<      .         +c4* etay(n)* etax(n)-c5*  xix(n)* etay(n)
<      .         -c2*zetay(n)*zetax(n)
<        term17= c3*(zetay(n)*  xix(n)-   zetay(n)* etax(n)
<      .            -zetax(n)*  xiy(n)+    etay(n)*zetax(n))
<        term18=  c4*xiz(n)  *  xix(n)-c5* etax(n) * xiz(n)
<      .         +c4* etaz(n)* etax(n)-c5*  xix(n)* etaz(n)
<      .         -c2*zetaz(n)*zetax(n)
<        term19= c3*(zetaz(n)*  xix(n)-   zetaz(n)* etax(n)
<      .            -zetax(n)*  xiz(n)+    etaz(n)*zetax(n))
<        term20=  c4*xiz(n)  *  xiy(n)-c5* etay(n) * xiz(n)
<      .         +c4* etaz(n)* etay(n)-c5*  xiy(n)* etaz(n)
<      .         -c2*zetaz(n)*zetay(n)
<        term21= c3*(zetaz(n)*  xiy(n)-   zetaz(n)* etay(n)
<      .            -zetay(n)*  xiz(n)+    etaz(n)*zetay(n))
<        stiffl(4,10)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(5,10)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(6,10)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(6,11)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(5,11)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(4,11)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(6,12)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(5,12)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(4,12)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13=  c4*xix(n)  *  xix(n)-c3*zetax(n) * xix(n)
<      .         -c2* etax(n)* etax(n)+c4*zetax(n)*zetax(n)
<        term14=  c4*xiy(n)  *  xiy(n)-c3*zetay(n) * xiy(n)
<      .         -c2* etay(n)* etay(n)+c4*zetay(n)*zetay(n)
<        term15=  c4*xiz(n)  *  xiz(n)-c3*zetaz(n) * xiz(n)
<      .         -c2* etaz(n)* etaz(n)+c4*zetaz(n)*zetaz(n)
<        term16=  c4*xiy(n)  *  xix(n)-c5*zetay(n) * xix(n)
<      .         -c2* etay(n)* etax(n)-c5*  xiy(n)*zetax(n)
<      .         +c4*zetay(n)*zetax(n)
<        term17= c3*(- etax(n)*  xiy(n) +    xix(n)* etay(n)
<      .             -zetax(n)* etay(n) +   etax(n)*zetay(n))
<        term18=  c4*xiz(n)  *  xix(n)-c5*zetaz(n) * xix(n)
<      .         -c2* etaz(n)* etax(n)-c5*  xiz(n)*zetax(n)
<      .         +c4*zetaz(n)*zetax(n)
<        term19= c3*(- etax(n)*  xiz(n) +    xix(n)* etaz(n)
<      .             -zetax(n)* etaz(n) +   etax(n)*zetaz(n))
<        term20=  c4*xiz(n)  *  xiy(n)-c5*zetaz(n) * xiy(n)
<      .         -c2* etaz(n)* etay(n)-c5*  xiz(n)*zetay(n)
<      .         +c4*zetaz(n)*zetay(n)
<        term21= c3*(- etay(n)*  xiz(n) +    xiy(n)* etaz(n)
<      .             -zetay(n)* etaz(n) +   etay(n)*zetaz(n))
<        stiffl(4,13)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(5,13)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(6,13)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(6,14)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(5,14)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(4,14)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(6,15)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(5,15)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(4,15)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c4*xix(n)  *  xix(n)+c1* etax(n) * xix(n)
<      .         -c4* etax(n)* etax(n)+c6*zetax(n)*zetax(n)
<        term14= -c4*xiy(n)  *  xiy(n)+c1* etay(n) * xiy(n)
<      .         -c4* etay(n)* etay(n)+c6*zetay(n)*zetay(n)
<        term15= -c4*xiz(n)  *  xiz(n)+c1* etaz(n) * xiz(n)
<      .         -c4* etaz(n)* etaz(n)+c6*zetaz(n)*zetaz(n)
<        term16= -c4*xiy(n)  *  xix(n)+c3* etay(n) * xix(n)
<      .         +c3*  xiy(n)* etax(n)-c4* etay(n)* etax(n)
<      .         +c6*zetay(n)*zetax(n)
<        term17= c5*(zetax(n)*  xiy(n) -  zetax(n)* etay(n)
<      .             - xix(n)*zetay(n) +   etax(n)*zetay(n))
<        term18= -c4*xiz(n)  *  xix(n)+c3* etaz(n) * xix(n)
<      .         +c3*  xiz(n)* etax(n)-c4* etaz(n)* etax(n)
<      .         +c6*zetaz(n)*zetax(n)
<        term19= c5*(zetax(n)*  xiz(n) -  zetax(n)* etaz(n)
<      .             - xix(n)*zetaz(n) +   etax(n)*zetaz(n))
<        term20= -c4*xiz(n)  *  xiy(n)+c3* etaz(n) * xiy(n)
<      .         +c3*  xiz(n)* etay(n)-c4* etaz(n)* etay(n)
<      .         +c6*zetaz(n)*zetay(n)
<        term21= c5*(zetay(n)*  xiz(n) -  zetay(n)* etaz(n)
<      .             - xiy(n)*zetaz(n) +   etay(n)*zetaz(n))
<        stiffl(4,16)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(5,16)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(6,16)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(6,17)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(5,17)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(4,17)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(6,18)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(5,18)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(4,18)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c6*(xix(n)  *  xix(n)+ etax(n) *etax(n)
<      .           +zetax(n)  *zetax(n))
<      .        + c3*(etax(n) *  xix(n)+zetax(n) * xix(n)
<      .        -     zetax(n)* etax(n))
<        term14= -c6*(xiy(n)  *  xiy(n)+ etay(n) *etay(n)
<      .           +zetay(n)  *zetay(n))
<      .        + c3*(etay(n) *  xiy(n)+zetay(n) * xiy(n)
<      .        -     zetay(n)* etay(n))
<        term15= -c6*(xiz(n)  *  xiz(n)+ etaz(n) *etaz(n)
<      .           +zetaz(n)  *zetaz(n))
<      .        + c3*(etaz(n) *  xiz(n)+zetaz(n) * xiz(n)
<      .        -     zetaz(n)* etaz(n))
<        term16= -c6*xiy(n)  *  xix(n)-c4* etay(n) *etax(n)
<      .         -c6*zetay(n)*zetax(n)+c5* etay(n)*  xix(n)
<      .         +c5*zetay(n)*  xix(n)
<        term17= c5*( etax(n)*  xiy(n) -   etax(n)*zetay(n)
<      .            +  xiy(n)*zetax(n) -   etay(n)*zetax(n))
<        term18= -c6*xiz(n)  *  xix(n)-c4* etaz(n) *etax(n)
<      .         -c6*zetaz(n)*zetax(n)+c5* etaz(n)*  xix(n)
<      .         +c5*zetaz(n)*  xix(n)
<        term19= c5*( etax(n)*  xiz(n) -   etax(n)*zetaz(n)
<      .            +  xiz(n)*zetax(n) -   etaz(n)*zetax(n))
<        term20= -c6*xiz(n)  *  xiy(n)-c4* etaz(n) *etay(n)
<      .         -c6*zetaz(n)*zetay(n)+c5* etay(n)*  xiz(n)
<      .         +c5*zetay(n)*  xiz(n)
<        term21= c5*( etaz(n)*  xiy(n) -   etaz(n)*zetay(n)
<      .            +  xiy(n)*zetaz(n) -   etay(n)*zetaz(n))
<        stiffl(4,19)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)+c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)+c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)+c(6,4))*term21
<        stiffl(5,19)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)+c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)+c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)+c(5,4))*term21
<        stiffl(6,19)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)+c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)+c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)+c(3,4))*term21
<        stiffl(6,20)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)+c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)+c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)+c(3,2))*term21
<        stiffl(5,20)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)+c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)+c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)+c(5,2))*term21
<        stiffl(4,20)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)+c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)+c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)+c(6,2))*term21
<        stiffl(6,21)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)+c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)+c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)+c(3,5))*term21
<        stiffl(5,21)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)+c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)+c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)+c(5,5))*term21
<        stiffl(4,21)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)+c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)+c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)+c(6,5))*term21
< c
<        term13=  c6*xix(n)  *  xix(n)-c4* etax(n) *etax(n)
<      .         -c1*zetax(n)* etax(n)-c4*zetax(n)*zetax(n)
<        term14=  c6*xiy(n)  *  xiy(n)-c4* etay(n) *etay(n)
<      .         -c1*zetay(n)* etay(n)-c4*zetay(n)*zetay(n)
<        term15=  c6*xiz(n)  *  xiz(n)-c4* etaz(n) *etaz(n)
<      .         -c1*zetaz(n)* etaz(n)-c4*zetaz(n)*zetaz(n)
<        term16=  c6*xiy(n)  *  xix(n)-c4* etay(n) *etax(n)
<      .         -c3*zetay(n)* etax(n)-c3* etay(n)*zetax(n)
<      .         -c4*zetay(n)*zetax(n)
<        term17= c5*(-etax(n)*  xiy(n) -  zetax(n)*  xiy(n)
<      .            +  xix(n)* etay(n) +  zetay(n)*  xix(n))
<        term18=  c6*xiz(n)  *  xix(n)-c4* etaz(n) *etax(n)
<      .         -c3*zetaz(n)* etax(n)-c3* etaz(n)*zetax(n)
<      .         -c4*zetaz(n)*zetax(n)
<        term19= c5*(-etax(n)*  xiz(n) -  zetax(n)*  xiz(n)
<      .            +  xix(n)* etaz(n) +  zetaz(n)*  xix(n))
<        term20=  c6*xiz(n)  *  xiy(n)-c4* etaz(n) *etay(n)
<      .         -c3*zetaz(n)* etay(n)-c3* etaz(n)*zetay(n)
<      .         -c4*zetaz(n)*zetay(n)
<        term21= c5*(-etay(n)*  xiz(n) -  zetay(n)*  xiz(n)
<      .            +  xiy(n)* etaz(n) +  zetaz(n)*  xiy(n))
<        stiffl(4,22)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(5,22)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(6,22)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(6,23)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(5,23)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(4,23)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(6,24)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(5,24)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(4,24)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
< c
< c    Rows 7-9
< c
<        term13=  c2*xix(n)  *  xix(n)+c2* etax(n) *etax(n)
<      .                              +c2*zetax(n)*zetax(n)
<      .         +c1* etax(n)*  xix(n)-c1*zetax(n) * xix(n)
<      .         -c1*zetax(n)* etax(n)
<        term14=  c2*xiy(n)  *  xiy(n)+c2* etay(n) *etay(n)
<      .                              +c2*zetay(n)*zetay(n)
<      .         +c1* etay(n)*  xiy(n)-c1*zetay(n) * xiy(n)
<      .         -c1*zetay(n)* etay(n)
<        term15=  c2*xiz(n)  *  xiz(n)+c2* etaz(n) *etaz(n)
<      .                              +c2*zetaz(n)*zetaz(n)
<      .         +c1* etaz(n)*  xiz(n)-c1*zetaz(n) * xiz(n)
<      .         -c1*zetaz(n)* etaz(n)
<        term16=  c2*xiy(n)  *  xix(n)+c2* etay(n)* etax(n)
<      .         +c2*zetay(n)*zetax(n)+c3* etay(n)*  xix(n)
<      .         -c3*zetay(n)*  xix(n)+c3*  xiy(n)* etax(n)
<      .         -c3*zetay(n)* etax(n)-c3*  xiy(n)*zetax(n)
<      .         -c3* etay(n)*zetax(n)
<        term18=  c2*xiz(n)  *  xix(n)+c2* etaz(n)* etax(n)
<      .         +c2*zetaz(n)*zetax(n)+c3* etaz(n)*  xix(n)
<      .         -c3*zetaz(n)*  xix(n)+c3*  xiz(n)* etax(n)
<      .         -c3*zetaz(n)* etax(n)-c3*  xiz(n)*zetax(n)
<      .         -c3* etaz(n)*zetax(n)
<        term20=  c2*xiz(n)  *  xiy(n)+c2* etaz(n)* etay(n)
<      .         +c2*zetaz(n)*zetay(n)+c3* etaz(n)*  xiy(n)
<      .         -c3*zetaz(n)*  xiy(n)+c3*  xiz(n)* etay(n)
<      .         -c3*zetaz(n)* etay(n)-c3*  xiz(n)*zetay(n)
<      .         -c3* etaz(n)*zetay(n)
<        stiffl(7,7)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16
<      .             +(c(1,6)+c(6,1))*term18
<      .             +(c(4,6)+c(6,4))*term20
<        stiffl(8,8)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16
<      .             +(c(5,4)+c(4,5))*term18
<      .             +(c(5,2)+c(2,5))*term20
<        stiffl(7,8)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16
<      .             +(c(6,4)+c(1,5))*term18
<      .             +(c(6,2)+c(4,5))*term20
<        stiffl(9,9)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16
<      .             +(c(3,6)+c(6,3))*term18
<      .             +(c(3,5)+c(5,3))*term20
<        stiffl(8,9)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16
<      .             +(c(5,6)+c(4,3))*term18
<      .             +(c(5,5)+c(2,3))*term20
<        stiffl(7,9)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16
<      .             +(c(6,6)+c(1,3))*term18
<      .             +(c(6,5)+c(4,3))*term20
<  
<        term13= -c2*  xix(n)*  xix(n)+c4* etax(n) *etax(n)
<      .         -c3*zetax(n)* etax(n)+c4*zetax(n)*zetax(n)
<        term14= -c2*  xiy(n)*  xiy(n)+c4* etay(n) *etay(n)
<      .         -c3*zetay(n)* etay(n)+c4*zetay(n)*zetay(n)
<        term15= -c2*  xiz(n)*  xiz(n)+c4* etaz(n) *etaz(n)
<      .         -c3*zetaz(n)* etaz(n)+c4*zetaz(n)*zetaz(n)
<        term16= -c2*  xiy(n)*  xix(n)+c4* etay(n)* etax(n)
<      .         -c5*zetay(n)* etax(n)-c5* etay(n)*zetax(n)
<      .         +c4*zetay(n)*zetax(n)
<        term17= -c3* etax(n)*  xiy(n)+c3*zetax(n)*  xiy(n)
<      .         +c3*  xix(n)* etay(n)-c3*  xix(n)*zetay(n)
<        term18= -c2*  xiz(n)*  xix(n)+c4* etaz(n)* etax(n)
<      .         -c5*zetaz(n)* etax(n)-c5* etaz(n)*zetax(n)
<      .         +c4*zetaz(n)*zetax(n)
<        term19= -c3* etax(n)*  xiz(n)+c3*zetax(n)*  xiz(n)
<      .         +c3*  xix(n)* etaz(n)-c3*  xix(n)*zetaz(n)
<        term20= -c2*  xiz(n)*  xiy(n)+c4* etaz(n)* etay(n)
<      .         -c5*zetaz(n)* etay(n)-c5* etaz(n)*zetay(n)
<      .         +c4*zetaz(n)*zetay(n)
<        term21= -c3* etay(n)*  xiz(n)+c3*zetay(n)*  xiz(n)
<      .         +c3*  xiy(n)* etaz(n)-c3*  xiy(n)*zetaz(n)
<        stiffl(7,10)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(8,10)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(9,10)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(9,11)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(8,11)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(7,11)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(9,12)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(8,12)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(7,12)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c6*xix(n)  *  xix(n)-c6* etax(n) *etax(n)
<      .                              -c6*zetax(n)*zetax(n)
<      .         -c3* etax(n)*  xix(n)+c3*zetax(n) * xix(n)
<      .         +c3*zetax(n)* etax(n)
<        term14= -c6*xiy(n)  *  xiy(n)-c6* etay(n) *etay(n)
<      .                              -c6*zetay(n)*zetay(n)
<      .         -c3* etay(n)*  xiy(n)+c3*zetay(n) * xiy(n)
<      .         +c3*zetay(n)* etay(n)
<        term15= -c6*xiz(n)  *  xiz(n)-c6* etaz(n) *etaz(n)
<      .                              -c6*zetaz(n)*zetaz(n)
<      .         -c3* etaz(n)*  xiz(n)+c3*zetaz(n) * xiz(n)
<      .         +c3*zetaz(n)* etaz(n)
<        term16= -c6*xiy(n)  *  xix(n)-c6* etay(n)* etax(n)
<      .         -c6*zetay(n)*zetax(n)-c5* etay(n)*  xix(n)
<      .         +c5*zetay(n)*  xix(n)-c5*  xiy(n)* etax(n)
<      .         +c5*zetay(n)* etax(n)+c5*  xiy(n)*zetax(n)
<      .         +c5* etay(n)*zetax(n)
<        term18= -c6*xiz(n)  *  xix(n)-c6* etaz(n)* etax(n)
<      .         -c6*zetaz(n)*zetax(n)-c5* etaz(n)*  xix(n)
<      .         +c5*zetaz(n)*  xix(n)-c5*  xiz(n)* etax(n)
<      .         +c5*zetaz(n)* etax(n)+c5*  xiz(n)*zetax(n)
<      .         +c5* etaz(n)*zetax(n)
<        term20= -c6*xiz(n)  *  xiy(n)-c6* etaz(n)* etay(n)
<      .         -c6*zetaz(n)*zetay(n)-c5* etaz(n)*  xiy(n)
<      .         +c5*zetaz(n)*  xiy(n)-c5*  xiz(n)* etay(n)
<      .         +c5*zetaz(n)* etay(n)+c5*  xiz(n)*zetay(n)
<      .         +c5* etaz(n)*zetay(n)
<        stiffl(7,13)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16
<      .             +(c(1,6)+c(6,1))*term18
<      .             +(c(4,6)+c(6,4))*term20
<        stiffl(8,13)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16
<      .             +(c(5,1)+c(4,6))*term18
<      .             +(c(5,4)+c(2,6))*term20
<        stiffl(9,13)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16
<      .             +(c(3,1)+c(6,6))*term18
<      .             +(c(3,4)+c(5,6))*term20
<        stiffl(9,14)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16
<      .             +(c(3,4)+c(6,5))*term18
<      .             +(c(3,2)+c(5,5))*term20
<        stiffl(8,14)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16
<      .             +(c(5,4)+c(4,5))*term18
<      .             +(c(5,2)+c(2,5))*term20
<        stiffl(7,14)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16
<      .             +(c(6,4)+c(1,5))*term18
<      .             +(c(6,2)+c(4,5))*term20
<        stiffl(9,15)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16
<      .             +(c(3,6)+c(6,3))*term18
<      .             +(c(3,5)+c(5,3))*term20
<        stiffl(8,15)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16
<      .             +(c(5,6)+c(4,3))*term18
<      .             +(c(5,5)+c(2,3))*term20
<        stiffl(7,15)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16
<      .             +(c(6,6)+c(1,3))*term18
<      .             +(c(6,5)+c(4,3))*term20
< c
<        term13=  c6*  xix(n)*  xix(n)-c4* etax(n) *etax(n)
<      .         +c1*zetax(n)* etax(n)-c4*zetax(n)*zetax(n)
<        term14=  c6*  xiy(n)*  xiy(n)-c4* etay(n) *etay(n)
<      .         +c1*zetay(n)* etay(n)-c4*zetay(n)*zetay(n)
<        term15=  c6*  xiz(n)*  xiz(n)-c4* etaz(n) *etaz(n)
<      .         +c1*zetaz(n)* etaz(n)-c4*zetaz(n)*zetaz(n)
<        term16=  c6*  xiy(n)*  xix(n)-c4* etay(n)* etax(n)
<      .         +c3*zetay(n)* etax(n)+c3* etay(n)*zetax(n)
<      .         -c4*zetay(n)*zetax(n)
<        term17= -c5* etay(n)*  xix(n)+c5*zetay(n)*  xix(n)
<      .         +c5*  xiy(n)* etax(n)-c5*  xiy(n)*zetax(n)
<        term18=  c6*  xiz(n)*  xix(n)-c4* etaz(n)* etax(n)
<      .         +c3*zetaz(n)* etax(n)+c3* etaz(n)*zetax(n)
<      .         -c4*zetaz(n)*zetax(n)
<        term19= -c5* etaz(n)*  xix(n)+c5*zetaz(n)*  xix(n)
<      .         +c5*  xiz(n)* etax(n)-c5*  xiz(n)*zetax(n)
<        term20=  c6*  xiz(n)*  xiy(n)-c4* etaz(n)* etay(n)
<      .         +c3*zetaz(n)* etay(n)+c3* etaz(n)*zetay(n)
<      .         -c4*zetaz(n)*zetay(n)
<        term21= -c5* etaz(n)*  xiy(n)+c5*zetaz(n)*  xiy(n)
<      .         +c5*  xiz(n)* etay(n)-c5*  xiz(n)*zetay(n)
<        stiffl(7,16)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(8,16)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(9,16)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(9,17)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(8,17)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(7,17)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(9,18)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(8,18)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(7,18)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13=  c4*  xix(n)*  xix(n)-c3*zetax(n)*  xix(n)
<      .         -c2* etax(n)* etax(n)+c4*zetax(n)*zetax(n)
<        term14=  c4*  xiy(n)*  xiy(n)-c3*zetay(n)*  xiy(n)
<      .         -c2* etay(n)* etay(n)+c4*zetay(n)*zetay(n)
<        term15=  c4*  xiz(n)*  xiz(n)-c3*zetaz(n)*  xiz(n)
<      .         -c2* etaz(n)* etaz(n)+c4*zetaz(n)*zetaz(n)
<        term16=  c4*  xiy(n)*  xix(n)-c5*zetay(n)*  xix(n)
<      .         -c2* etay(n)* etax(n)-c5*  xiy(n)*zetax(n)
<      .         +c4*zetay(n)*zetax(n)
<        term17= c3*(  xiy(n)* etax(n) -    xix(n)* etay(n)
<      .            +zetax(n)* etay(n) -   etax(n)*zetay(n))
<        term18=  c4*  xiz(n)*  xix(n)-c5*zetaz(n)*  xix(n)
<      .         -c2* etaz(n)* etax(n)-c5*  xiz(n)*zetax(n)
<      .         +c4*zetaz(n)*zetax(n)
<        term19= c3*(  xiz(n)* etax(n) -    xix(n)* etaz(n)
<      .            +zetax(n)* etaz(n) -   etax(n)*zetaz(n))
<        term20=  c4*  xiz(n)*  xiy(n)-c5*zetaz(n)*  xiy(n)
<      .         -c2* etaz(n)* etay(n)-c5*  xiz(n)*zetay(n)
<      .         +c4*zetaz(n)*zetay(n)
<        term21= c3*(  xiz(n)* etay(n) -    xiy(n)* etaz(n)
<      .            +zetay(n)* etaz(n) -   etay(n)*zetaz(n))
<        stiffl(7,19)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(8,19)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(9,19)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(9,20)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(8,20)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(7,20)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(9,21)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(8,21)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(7,21)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c4*  xix(n)*  xix(n)-c4* etax(n)* etax(n)
<      .         -c1* etax(n)*  xix(n)+c6*zetax(n)*zetax(n)
<        term14= -c4*  xiy(n)*  xiy(n)-c4* etay(n)* etay(n)
<      .         -c1* etay(n)*  xiy(n)+c6*zetay(n)*zetay(n)
<        term15= -c4*  xiz(n)*  xiz(n)-c4* etaz(n)* etaz(n)
<      .         -c1* etaz(n)*  xiz(n)+c6*zetaz(n)*zetaz(n)
<        term16= -c4*  xiy(n)*  xix(n)-c3* etay(n)*  xix(n)
<      .         -c3*  xiy(n)* etax(n)-c4* etay(n)* etax(n)
<      .         +c6*zetay(n)*zetax(n)
<        term17= c5*(- xix(n)*zetay(n) -   etax(n)*zetay(n)
<      .            +zetax(n)*  xiy(n) +  zetax(n)* etay(n))
<        term18= -c4*  xiz(n)*  xix(n)-c3* etaz(n)*  xix(n)
<      .         -c3*  xiz(n)* etax(n)-c4* etaz(n)* etax(n)
<      .         +c6*zetaz(n)*zetax(n)
<        term19= c5*(- xix(n)*zetaz(n) -   etax(n)*zetaz(n)
<      .            +zetax(n)*  xiz(n) +  zetax(n)* etaz(n))
<        term20= -c4*  xiz(n)*  xiy(n)-c3* etaz(n)*  xiy(n)
<      .         -c3*  xiz(n)* etay(n)-c4* etaz(n)* etay(n)
<      .         +c6*zetaz(n)*zetay(n)
<        term21= c5*(- xiy(n)*zetaz(n) -   etay(n)*zetaz(n)
<      .            +zetay(n)*  xiz(n) +  zetay(n)* etaz(n))
<        stiffl(7,22)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(8,22)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(9,22)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(9,23)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(8,23)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(7,23)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(9,24)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(8,24)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(7,24)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
< c     Rows 10-12
< c
<        term13=  c2*  xix(n)*  xix(n)+c2* etax(n)* etax(n)
<      .         -c1* etax(n)*  xix(n)+c1*zetax(n)*  xix(n)
<      .         -c1*zetax(n)* etax(n)+c2*zetax(n)*zetax(n)
<        term14=  c2*  xiy(n)*  xiy(n)+c2* etay(n)* etay(n)
<      .         -c1* etay(n)*  xiy(n)+c1*zetay(n)*  xiy(n)
<      .         -c1*zetay(n)* etay(n)+c2*zetay(n)*zetay(n)
<        term15=  c2*  xiz(n)*  xiz(n)+c2* etaz(n)* etaz(n)
<      .         -c1* etaz(n)*  xiz(n)+c1*zetaz(n)*  xiz(n)
<      .         -c1*zetaz(n)* etaz(n)+c2*zetaz(n)*zetaz(n)
<        term16=  c2*  xiy(n)*  xix(n)-c3* etay(n)*  xix(n)
<      .         +c3*zetay(n)*  xix(n)-c3*  xiy(n)* etax(n)
<      .         +c2* etay(n)* etax(n)-c3*zetay(n)* etax(n)
<      .         +c3*  xiy(n)*zetax(n)-c3* etay(n)*zetax(n)
<      .         +c2*zetay(n)*zetax(n)
<        term17= 0.
<        term18=  c2*  xiz(n)*  xix(n)-c3* etaz(n)*  xix(n)
<      .         +c3*zetaz(n)*  xix(n)-c3*  xiz(n)* etax(n)
<      .         +c2* etaz(n)* etax(n)-c3*zetaz(n)* etax(n)
<      .         +c3*  xiz(n)*zetax(n)-c3* etaz(n)*zetax(n)
<      .         +c2*zetaz(n)*zetax(n)
<        term19= 0.
<        term20=  c2*  xiz(n)*  xiy(n)-c3* etaz(n)*  xiy(n)
<      .         +c3*zetaz(n)*  xiy(n)-c3*  xiz(n)* etay(n)
<      .         +c2* etaz(n)* etay(n)-c3*zetaz(n)* etay(n)
<      .         +c3*  xiz(n)*zetay(n)-c3* etaz(n)*zetay(n)
<      .         +c2*zetaz(n)*zetay(n)
<        term21= 0.
<        stiffl(10,10)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(11,11)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(10,11)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(12,12)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(11,12)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(10,12)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13=  c6*xix(n)  *  xix(n)-c4* etax(n) *etax(n)
<      .                              -c4*zetax(n)*zetax(n)
<      .         +c1*zetax(n)* etax(n)
<        term14=  c6*xiy(n)  *  xiy(n)-c4* etay(n) *etay(n)
<      .                              -c4*zetay(n)*zetay(n)
<      .         +c1*zetay(n)* etay(n)
<        term15=  c6*xiz(n)  *  xiz(n)-c4* etaz(n) *etaz(n)
<      .                              -c4*zetaz(n)*zetaz(n)
<      .         +c1*zetaz(n)* etaz(n)
<        term16=  c6*  xiy(n)*  xix(n)-c4* etay(n)* etax(n)
<      .         +c3*zetay(n)* etax(n)+c3* etay(n)*zetax(n)
<      .         -c4*zetay(n)*zetax(n)
<        term17= -c5* etax(n)*  xiy(n)+c5*zetax(n)*  xiy(n)
<      .         +c5*  xix(n)* etay(n)-c5*  xix(n)*zetay(n)
<        term18=  c6*  xiz(n)*  xix(n)-c4* etaz(n)* etax(n)
<      .         +c3*zetaz(n)* etax(n)+c3* etaz(n)*zetax(n)
<      .         -c4*zetaz(n)*zetax(n)
<        term19= -c5* etax(n)*  xiz(n)+c5*zetax(n)*  xiz(n)
<      .         +c5*  xix(n)* etaz(n)-c5*  xix(n)*zetaz(n)
<        term20=  c6*  xiz(n)*  xiy(n)-c4* etaz(n)* etay(n)
<      .         +c3*zetaz(n)* etay(n)+c3* etaz(n)*zetay(n)
<      .         -c4*zetaz(n)*zetay(n)
<        term21= -c5* etay(n)*  xiz(n)+c5*zetay(n)*  xiz(n)
<      .         +c5*  xiy(n)* etaz(n)-c5*  xiy(n)*zetaz(n)
<        stiffl(10,13)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(11,13)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(4,4)+c(2,1))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(4,6)+c(5,1))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(2,6)+c(5,4))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(12,13)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(6,4)+c(5,1))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(6,6)+c(3,1))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(5,6)+c(3,4))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(12,14)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(6,2)+c(5,4))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(6,5)+c(3,4))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(5,5)+c(3,2))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(11,14)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(4,2)+c(2,4))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(4,5)+c(5,4))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(2,5)+c(5,2))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(10,14)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(1,2)+c(4,4))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(1,5)+c(6,4))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(4,5)+c(6,2))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(12,15)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(6,5)+c(5,6))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(6,3)+c(3,6))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(5,3)+c(3,5))*term20+(c(5,3)-c(3,5))*term20
<        stiffl(11,15)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(4,5)+c(2,6))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(4,3)+c(5,6))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(2,3)+c(5,5))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(10,15)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(1,5)+c(4,6))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(1,3)+c(6,6))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(4,3)+c(6,5))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c6*  xix(n)*  xix(n)+c3* etax(n) * xix(n)
<      .         -c3*zetax(n)*  xix(n)-c6* etax(n)* etax(n)
<      .         +c3*zetax(n)* etax(n)-c6*zetax(n)*zetax(n)
<        term14= -c6*  xiy(n)*  xiy(n)+c3* etay(n) * xiy(n)
<      .         -c3*zetay(n)*  xiy(n)-c6* etay(n)* etay(n)
<      .         +c3*zetay(n)* etay(n)-c6*zetay(n)*zetay(n)
<        term15= -c6*  xiz(n)*  xiz(n)+c3* etaz(n) * xiz(n)
<      .         -c3*zetaz(n)*  xiz(n)-c6* etaz(n)* etaz(n)
<      .         +c3*zetaz(n)* etaz(n)-c6*zetaz(n)*zetaz(n)
<        term16= -c6*  xiy(n)*  xix(n)+c5* etay(n)*  xix(n)
<      .         -c5*zetay(n)*  xix(n)+c5*  xiy(n)* etax(n)
<      .         -c6* etay(n)* etax(n)+c5*zetay(n)* etax(n)
<      .         -c5*  xiy(n)*zetax(n)+c5* etay(n)*zetax(n)
<      .         -c6*zetay(n)*zetax(n)
<        term17= 0.
<        term18= -c6*  xiz(n)*  xix(n)+c5* etaz(n)*  xix(n)
<      .         -c5*zetaz(n)*  xix(n)+c5*  xiz(n)* etax(n)
<      .         -c6* etaz(n)* etax(n)+c5*zetaz(n)* etax(n)
<      .         -c5*  xiz(n)*zetax(n)+c5* etaz(n)*zetax(n)
<      .         -c6*zetaz(n)*zetax(n)
<        term19= 0.
<        term20= -c6*  xiz(n)*  xiy(n)+c5* etaz(n)*  xiy(n)
<      .         -c5*zetaz(n)*  xiy(n)+c5*  xiz(n)* etay(n)
<      .         -c6* etaz(n)* etay(n)+c5*zetaz(n)* etay(n)
<      .         -c5*  xiz(n)*zetay(n)+c5* etaz(n)*zetay(n)
<      .         -c6*zetaz(n)*zetay(n)
<        term21= 0.
<        stiffl(10,16)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(11,16)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(12,16)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(12,17)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(11,17)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(10,17)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(12,18)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(11,18)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(10,18)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c4*  xix(n)*  xix(n)+c1* etax(n)*  xix(n)
<      .         -c4* etax(n)* etax(n)+c6*zetax(n)*zetax(n)
<        term14= -c4*  xiy(n)*  xiy(n)+c1* etay(n)*  xiy(n)
<      .         -c4* etay(n)* etay(n)+c6*zetay(n)*zetay(n)
<        term15= -c4*  xiz(n)*  xiz(n)+c1* etaz(n)*  xiz(n)
<      .         -c4* etaz(n)* etaz(n)+c6*zetaz(n)*zetaz(n)
<        term16= -c4*  xiy(n)*  xix(n)+c3* etay(n)*  xix(n)
<      .         +c3*  xiy(n)* etax(n)-c4* etay(n)* etax(n)
<      .         +c6*zetay(n)*zetax(n)
<        term17= c5*(-zetax(n)*  xiy(n) + zetax(n)* etay(n)
<      .             +  xix(n)*zetay(n) -  etax(n)*zetay(n))
<        term18= -c4*  xiz(n)*  xix(n)+c3* etaz(n)*  xix(n)
<      .         +c3*  xiz(n)* etax(n)-c4* etaz(n)* etax(n)
<      .         +c6*zetaz(n)*zetax(n)
<        term19= c5*(-zetax(n)*  xiz(n) + zetax(n)* etaz(n)
<      .             +  xix(n)*zetaz(n) -  etax(n)*zetaz(n))
<        term20= -c4*  xiz(n)*  xiy(n)+c3* etaz(n)*  xiy(n)
<      .         +c3*  xiz(n)* etay(n)-c4* etaz(n)* etay(n)
<      .         +c6*zetaz(n)*zetay(n)
<        term21= c5*(-zetay(n)*  xiz(n) + zetay(n)* etaz(n)
<      .             +  xiy(n)*zetaz(n) -  etay(n)*zetaz(n))
<        stiffl(10,19)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(11,19)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(12,19)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(12,20)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(11,20)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(10,20)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(12,21)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(11,21)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(10,21)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13=  c4*  xix(n)*  xix(n)+c3*zetax(n)*  xix(n)
<      .         -c2* etax(n)* etax(n)+c4*zetax(n)*zetax(n)
<        term14=  c4*  xiy(n)*  xiy(n)+c3*zetay(n)*  xiy(n)
<      .         -c2* etay(n)* etay(n)+c4*zetay(n)*zetay(n)
<        term15=  c4*  xiz(n)*  xiz(n)+c3*zetaz(n)*  xiz(n)
<      .         -c2* etaz(n)* etaz(n)+c4*zetaz(n)*zetaz(n)
<        term16=  c4*  xiy(n)*  xix(n)+c5*zetay(n)*  xix(n)
<      .         -c2* etay(n)* etax(n)+c5*  xiy(n)*zetax(n)
<      .         +c4*zetay(n)*zetax(n)
<        term17= c3*(-etax(n)*  xiy(n) +    xix(n)* etay(n)
<      .            +zetax(n)* etay(n) -   etax(n)*zetay(n))
<        term18=  c4*  xiz(n)*  xix(n)+c5*zetaz(n)*  xix(n)
<      .         -c2* etaz(n)* etax(n)+c5*  xiz(n)*zetax(n)
<      .         +c4*zetaz(n)*zetax(n)
<        term19= c3*(-etax(n)*  xiz(n) +    xix(n)* etaz(n)
<      .            +zetax(n)* etaz(n) -   etax(n)*zetaz(n))
<        term20=  c4*  xiz(n)*  xiy(n)+c5*zetaz(n)*  xiy(n)
<      .         -c2* etaz(n)* etay(n)+c5*  xiz(n)*zetay(n)
<      .         +c4*zetaz(n)*zetay(n)
<        term21= c3*(-etay(n)*  xiz(n) +    xiy(n)* etaz(n)
<      .            +zetay(n)* etaz(n) -   etay(n)*zetaz(n))
<        stiffl(10,22)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(11,22)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(12,22)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(12,23)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(11,23)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(10,23)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(12,24)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(11,24)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(10,24)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
< c
< c     Rows 13-15
< c
< c
<        term13=  c2*  xix(n)*  xix(n)+c2* etax(n) *etax(n)
<      .                              +c2*zetax(n)*zetax(n)
<      .         +c1* etax(n)*  xix(n)-c1*zetax(n)*  xix(n)
<      .         -c1*zetax(n)* etax(n)
<        term14=  c2*  xiy(n)*  xiy(n)+c2* etay(n) *etay(n)
<      .                              +c2*zetay(n)*zetay(n)
<      .         +c1* etay(n)*  xiy(n)-c1*zetay(n)*  xiy(n)
<      .         -c1*zetay(n)* etay(n)
<        term15=  c2*  xiz(n)*  xiz(n)+c2* etaz(n) *etaz(n)
<      .                              +c2*zetaz(n)*zetaz(n)
<      .         +c1* etaz(n)*  xiz(n)-c1*zetaz(n)*  xiz(n)
<      .         -c1*zetaz(n)* etaz(n)
<        term16=  c2*  xiy(n)*  xix(n)+c3* etay(n)*  xix(n)
<      .         -c3*zetay(n)*  xix(n)+c3*  xiy(n)* etax(n)
<      .         +c2* etay(n)* etax(n)-c3*zetay(n)* etax(n)
<      .         -c3*  xiy(n)*zetax(n)-c3* etay(n)*zetax(n)
<      .         +c2*zetay(n)*zetax(n)
<        term17= 0.
<        term18=  c2*  xiz(n)*  xix(n)+c3* etaz(n)*  xix(n)
<      .         -c3*zetaz(n)*  xix(n)+c3*  xiz(n)* etax(n)
<      .         +c2* etaz(n)* etax(n)-c3*zetaz(n)* etax(n)
<      .         -c3*  xiz(n)*zetax(n)-c3* etaz(n)*zetax(n)
<      .         +c2*zetaz(n)*zetax(n)
<        term19= 0.
<        term20=  c2*  xiz(n)*  xiy(n)+c3* etaz(n)*  xiy(n)
<      .         -c3*zetaz(n)*  xiy(n)+c3*  xiz(n)* etay(n)
<      .         +c2* etaz(n)* etay(n)-c3*zetaz(n)* etay(n)
<      .         -c3*  xiz(n)*zetay(n)-c3* etaz(n)*zetay(n)
<      .         +c2*zetaz(n)*zetay(n)
<        term21= 0.
<        stiffl(13,13)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(14,14)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(4,2)+c(2,4))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(4,5)+c(5,4))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(2,5)+c(5,2))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(13,14)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(1,2)+c(4,4))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(1,5)+c(6,4))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(4,5)+c(6,2))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(15,15)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(6,5)+c(5,6))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(6,3)+c(3,6))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(5,3)+c(3,5))*term20+(c(5,3)-c(3,5))*term20
<        stiffl(14,15)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(4,5)+c(2,6))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(4,3)+c(5,6))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(2,3)+c(5,5))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(13,15)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(1,5)+c(4,6))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(1,3)+c(6,6))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(4,3)+c(6,5))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c2*  xix(n)*  xix(n)+c4* etax(n) *etax(n)
<      .         -c3*zetax(n)* etax(n)+c4*zetax(n)*zetax(n)
<        term14= -c2*  xiy(n)*  xiy(n)+c4* etay(n) *etay(n)
<      .         -c3*zetay(n)* etay(n)+c4*zetay(n)*zetay(n)
<        term15= -c2*  xiz(n)*  xiz(n)+c4* etaz(n) *etaz(n)
<      .         -c3*zetaz(n)* etaz(n)+c4*zetaz(n)*zetaz(n)
<        term16= -c2*  xiy(n)*  xix(n)+c4* etay(n)* etax(n)
<      .         -c5*zetay(n)* etax(n)-c5* etay(n)*zetax(n)
<      .         +c4*zetay(n)*zetax(n)
<        term17= -c3* etax(n)*  xiy(n)+c3*zetax(n)*  xiy(n)
<      .         +c3*  xix(n)* etay(n)-c3*  xix(n)*zetay(n)
<        term18= -c2*  xiz(n)*  xix(n)+c4* etaz(n)* etax(n)
<      .         -c5*zetaz(n)* etax(n)-c5* etaz(n)*zetax(n)
<      .         +c4*zetaz(n)*zetax(n)
<        term19= -c3* etax(n)*  xiz(n)+c3*zetax(n)*  xiz(n)
<      .         +c3*  xix(n)* etaz(n)-c3*  xix(n)*zetaz(n)
<        term20= -c2*  xiz(n)*  xiy(n)+c4* etaz(n)* etay(n)
<      .         -c5*zetaz(n)* etay(n)-c5* etaz(n)*zetay(n)
<      .         +c4*zetaz(n)*zetay(n)
<        term21= -c3* etay(n)*  xiz(n)+c3*zetay(n)*  xiz(n)
<      .         +c3*  xiy(n)* etaz(n)-c3*  xiy(n)*zetaz(n)
<        stiffl(13,16)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(14,16)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(15,16)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(15,17)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(14,17)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(13,17)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(15,18)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(14,18)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(13,18)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c4*  xix(n)*  xix(n)+c1*zetax(n)*  xix(n)
<      .         +c6* etax(n)* etax(n)-c4*zetax(n)*zetax(n)
<        term14= -c4*  xiy(n)*  xiy(n)+c1*zetay(n)*  xiy(n)
<      .         +c6* etay(n)* etay(n)-c4*zetay(n)*zetay(n)
<        term15= -c4*  xiz(n)*  xiz(n)+c1*zetaz(n)*  xiz(n)
<      .         +c6* etaz(n)* etaz(n)-c4*zetaz(n)*zetaz(n)
<        term16= -c4*  xiy(n)*  xix(n)+c3*zetay(n)*  xix(n)
<      .         +c6* etay(n)* etax(n)+c3*  xiy(n)*zetax(n)
<      .         -c4*zetay(n)*zetax(n)
<        term17= c5*(- etax(n)*  xiy(n) +   xix(n)* etay(n)
<      .             -zetax(n)* etay(n) +  etax(n)*zetay(n))
<        term18= -c4*  xiz(n)*  xix(n)+c3*zetaz(n)*  xix(n)
<      .         +c6* etaz(n)* etax(n)+c3*  xiz(n)*zetax(n)
<      .         -c4*zetaz(n)*zetax(n)
<        term19= c5*(- etax(n)*  xiz(n) +   xix(n)* etaz(n)
<      .             -zetax(n)* etaz(n) +  etax(n)*zetaz(n))
<        term20= -c4*  xiz(n)*  xiy(n)+c3*zetaz(n)*  xiy(n)
<      .         +c6* etaz(n)* etay(n)+c3*  xiz(n)*zetay(n)
<      .         -c4*zetaz(n)*zetay(n)
<        term21= c5*(- etay(n)*  xiz(n) +   xiy(n)* etaz(n)
<      .             -zetay(n)* etaz(n) +  etay(n)*zetaz(n))
<        stiffl(13,19)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(14,19)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(15,19)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(15,20)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(14,20)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(13,20)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(15,21)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(14,21)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(13,21)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13=  c4*  xix(n)*  xix(n)+c3* etax(n)*  xix(n)
<      .         +c4* etax(n)* etax(n)-c2*zetax(n)*zetax(n)
<        term14=  c4*  xiy(n)*  xiy(n)+c3* etay(n)*  xiy(n)
<      .         +c4* etay(n)* etay(n)-c2*zetay(n)*zetay(n)
<        term15=  c4*  xiz(n)*  xiz(n)+c3* etaz(n)*  xiz(n)
<      .         +c4* etaz(n)* etaz(n)-c2*zetaz(n)*zetaz(n)
<        term16=  c4*  xiy(n)*  xix(n)+c5* etay(n)*  xix(n)
<      .         +c5*  xiy(n)* etax(n)+c4* etay(n)* etax(n)
<      .         -c2*zetay(n)*zetax(n)
<        term17= c3*(-zetax(n)* xiy(n) -  zetax(n)* etay(n)
<      .            +  xix(n)*zetay(n) +   etax(n)*zetay(n))
<        term18=  c4*  xiz(n)*  xix(n)+c5* etaz(n)*  xix(n)
<      .         +c5*  xiz(n)* etax(n)+c4* etaz(n)* etax(n)
<      .         -c2*zetaz(n)*zetax(n)
<        term19= c3*(-zetax(n)* xiz(n) -  zetax(n)* etaz(n)
<      .            +  xix(n)*zetaz(n) +   etax(n)*zetaz(n))
<        term20=  c4*  xiz(n)*  xiy(n)+c5* etaz(n)*  xiy(n)
<      .         +c5*  xiz(n)* etay(n)+c4* etaz(n)* etay(n)
<      .         -c2*zetaz(n)*zetay(n)
<        term21= c3*(-zetay(n)* xiz(n) -  zetay(n)* etaz(n)
<      .            +  xiy(n)*zetaz(n) +   etay(n)*zetaz(n))
<        stiffl(13,22)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(14,22)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(15,22)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(15,23)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(14,23)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(13,23)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(15,24)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(14,24)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(13,24)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
< c
< c
< c     Rows 16-18
< c
< c
< c
<        term13=  c2*  xix(n)*  xix(n)-c1* etax(n) * xix(n)
<      .         +c1*zetax(n)*  xix(n)+c2* etax(n)* etax(n)
<      .         -c1*zetax(n)* etax(n)+c2*zetax(n)*zetax(n)
<        term14=  c2*  xiy(n)*  xiy(n)-c1* etay(n) * xiy(n)
<      .         +c1*zetay(n)*  xiy(n)+c2* etay(n)* etay(n)
<      .         -c1*zetay(n)* etay(n)+c2*zetay(n)*zetay(n)
<        term15=  c2*  xiz(n)*  xiz(n)-c1* etaz(n) * xiz(n)
<      .         +c1*zetaz(n)*  xiz(n)+c2* etaz(n)* etaz(n)
<      .         -c1*zetaz(n)* etaz(n)+c2*zetaz(n)*zetaz(n)
<        term16=  c2*  xiy(n)*  xix(n)-c3* etay(n)*  xix(n)
<      .         +c3*zetay(n)*  xix(n)-c3*  xiy(n)* etax(n)
<      .         +c2* etay(n)* etax(n)-c3*zetay(n)* etax(n)
<      .         +c3*  xiy(n)*zetax(n)-c3* etay(n)*zetax(n)
<      .         +c2*zetay(n)*zetax(n)
<        term17= 0.
<        term18=  c2*  xiz(n)*  xix(n)-c3* etaz(n)*  xix(n)
<      .         +c3*zetaz(n)*  xix(n)-c3*  xiz(n)* etax(n)
<      .         +c2* etaz(n)* etax(n)-c3*zetaz(n)* etax(n)
<      .         +c3*  xiz(n)*zetax(n)-c3* etaz(n)*zetax(n)
<      .         +c2*zetaz(n)*zetax(n)
<        term19= 0.
<        term20=  c2*  xiy(n)*  xiz(n)-c3* etay(n)*  xiz(n)
<      .         +c3*zetay(n)*  xiz(n)-c3*  xiy(n)* etaz(n)
<      .         +c2* etay(n)* etaz(n)-c3*zetay(n)* etaz(n)
<      .         +c3*  xiy(n)*zetaz(n)-c3* etay(n)*zetaz(n)
<      .         +c2*zetay(n)*zetaz(n)
<        term21= 0.
<        stiffl(16,16)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(17,17)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(16,17)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(18,18)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(17,18)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(16,18)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13=  c4*  xix(n)*  xix(n)-c3* etax(n)*  xix(n)
<      .         +c4* etax(n)* etax(n)-c2*zetax(n)*zetax(n)
<        term14=  c4*  xiy(n)*  xiy(n)-c3* etay(n)*  xiy(n)
<      .         +c4* etay(n)* etay(n)-c2*zetay(n)*zetay(n)
<        term15=  c4*  xiz(n)*  xiz(n)-c3* etaz(n)*  xiz(n)
<      .         +c4* etaz(n)* etaz(n)-c2*zetaz(n)*zetaz(n)
<        term16=  c4*  xiy(n)*  xix(n)-c5* etay(n)*  xix(n)
<      .         -c5*  xiy(n)* etax(n)+c4* etay(n)* etax(n)
<      .         -c2*zetay(n)*zetax(n)
<        term17= c3*( zetax(n)*  xiy(n) - zetax(n)* etay(n)
<      .             -  xix(n)*zetay(n) +  etax(n)*zetay(n))
<        term18=  c4*  xiz(n)*  xix(n)-c5* etaz(n)*  xix(n)
<      .         -c5*  xiz(n)* etax(n)+c4* etaz(n)* etax(n)
<      .         -c2*zetaz(n)*zetax(n)
<        term19= c3*( zetax(n)*  xiz(n) - zetax(n)* etaz(n)
<      .             -  xix(n)*zetaz(n) +  etax(n)*zetaz(n))
<        term20=  c4*  xiz(n)*  xiy(n)-c5* etaz(n)*  xiy(n)
<      .         -c5*  xiz(n)* etay(n)+c4* etaz(n)* etay(n)
<      .         -c2*zetaz(n)*zetay(n)
<        term21= c3*( zetay(n)*  xiz(n) - zetay(n)* etaz(n)
<      .             -  xiy(n)*zetaz(n) +  etay(n)*zetaz(n))
<        stiffl(16,19)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(17,19)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(18,19)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(18,20)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(17,20)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(16,20)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(18,21)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(17,21)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(16,21)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
<        term13= -c4*  xix(n)*  xix(n)-c1*zetax(n)*  xix(n)
<      .         +c6* etax(n)* etax(n)-c4*zetax(n)*zetax(n)
<        term14= -c4*  xiy(n)*  xiy(n)-c1*zetay(n)*  xiy(n)
<      .         +c6* etay(n)* etay(n)-c4*zetay(n)*zetay(n)
<        term15= -c4*  xiz(n)*  xiz(n)-c1*zetaz(n)*  xiz(n)
<      .         +c6* etaz(n)* etaz(n)-c4*zetaz(n)*zetaz(n)
<        term16= -c4*  xiy(n)*  xix(n)-c3*zetay(n)*  xix(n)
<      .         +c6* etay(n)* etax(n)-c3*  xiy(n)*zetax(n)
<      .         -c4*zetay(n)*zetax(n)
<        term17= c5*(  etax(n)* xiy(n) -    xix(n)* etay(n)
<      .            -zetax(n)* etay(n) +   etax(n)*zetay(n))
<        term18= -c4*  xiz(n)*  xix(n)-c3*zetaz(n)*  xix(n)
<      .         +c6* etaz(n)* etax(n)-c3*  xiz(n)*zetax(n)
<      .         -c4*zetaz(n)*zetax(n)
<        term19= c5*(  etax(n)* xiz(n) -    xix(n)* etaz(n)
<      .            -zetax(n)* etaz(n) +   etax(n)*zetaz(n))
<        term20= -c4*  xiz(n)*  xiy(n)-c3*zetaz(n)*  xiy(n)
<      .         +c6* etaz(n)* etay(n)-c3*  xiz(n)*zetay(n)
<      .         -c4*zetaz(n)*zetay(n)
<        term21= c5*(  etay(n)* xiz(n) -    xiy(n)* etaz(n)
<      .            -zetay(n)* etaz(n) +   etay(n)*zetaz(n))
<        stiffl(16,22)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(17,22)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(18,22)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(18,23)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(17,23)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(16,23)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(18,24)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(17,24)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(16,24)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
< c
< c
< c
< c
< c     Rows 19-21
< c
< c
< c
<        term13=  c2*  xix(n)*  xix(n)-c1* etax(n)*  xix(n)
<      .         -c1*zetax(n)*  xix(n)+c2* etax(n)* etax(n)
<      .         +c1*zetax(n)* etax(n)+c2*zetax(n)*zetax(n)
<        term14=  c2*  xiy(n)*  xiy(n)-c1* etay(n)*  xiy(n)
<      .         -c1*zetay(n)*  xiy(n)+c2* etay(n)* etay(n)
<      .         +c1*zetay(n)* etay(n)+c2*zetay(n)*zetay(n)
<        term15=  c2*  xiz(n)*  xiz(n)-c1* etaz(n)*  xiz(n)
<      .         -c1*zetaz(n)*  xiz(n)+c2* etaz(n)* etaz(n)
<      .         +c1*zetaz(n)* etaz(n)+c2*zetaz(n)*zetaz(n)
<        term16=  c2*  xiy(n)*  xix(n)-c3* etay(n)*  xix(n)
<      .         -c3*zetay(n)*  xix(n)-c3*  xiy(n)* etax(n)
<      .         +c2* etay(n)* etax(n)+c3*zetay(n)* etax(n)
<      .         -c3*  xiy(n)*zetax(n)+c3* etay(n)*zetax(n)
<      .         +c2*zetay(n)*zetax(n)
<        term17= 0.
<        term18=  c2*  xiz(n)*  xix(n)-c3* etaz(n)*  xix(n)
<      .         -c3*zetaz(n)*  xix(n)-c3*  xiz(n)* etax(n)
<      .         +c2* etaz(n)* etax(n)+c3*zetaz(n)* etax(n)
<      .         -c3*  xiz(n)*zetax(n)+c3* etaz(n)*zetax(n)
<      .         +c2*zetaz(n)*zetax(n)
<        term19= 0.
<        term20=  c2*  xiz(n)*  xiy(n)-c3* etaz(n)*  xiy(n)
<      .         -c3*zetaz(n)*  xiy(n)-c3*  xiz(n)* etay(n)
<      .         +c2* etaz(n)* etay(n)+c3*zetaz(n)* etay(n)
<      .         -c3*  xiz(n)*zetay(n)+c3* etaz(n)*zetay(n)
<      .         +c2*zetaz(n)*zetay(n)
<        term21= 0.
<        stiffl(19,19)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(20,20)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(19,20)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(21,21)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(20,21)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(19,21)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
< c
<        term13= -c2*  xix(n)*  xix(n)+c4* etax(n)* etax(n)
<      .         +c3*zetax(n)* etax(n)+c4*zetax(n)*zetax(n)
<        term14= -c2*  xiy(n)*  xiy(n)+c4* etay(n)* etay(n)
<      .         +c3*zetay(n)* etay(n)+c4*zetay(n)*zetay(n)
<        term15= -c2*  xiz(n)*  xiz(n)+c4* etaz(n)* etaz(n)
<      .         +c3*zetaz(n)* etaz(n)+c4*zetaz(n)*zetaz(n)
<        term16= -c2*  xiy(n)*  xix(n)+c4* etay(n)* etax(n)
<      .         +c5*zetay(n)* etax(n)+c5* etay(n)*zetax(n)
<      .         +c4*zetay(n)*zetax(n)
<        term17= c3*(  etax(n)* xiy(n) +  zetax(n)*  xiy(n)
<      .            -  xix(n)* etay(n) -    xix(n)*zetay(n))
<        term18= -c2*  xiz(n)*  xix(n)+c4* etaz(n)* etax(n)
<      .         +c5*zetaz(n)* etax(n)+c5* etaz(n)*zetax(n)
<      .         +c4*zetaz(n)*zetax(n)
<        term19= c3*(  etax(n)* xiz(n) +  zetax(n)*  xiz(n)
<      .            -  xix(n)* etaz(n) -    xix(n)*zetaz(n))
<        term20= -c2*  xiz(n)*  xiy(n)+c4* etaz(n)* etay(n)
<      .         +c5*zetaz(n)* etay(n)+c5* etaz(n)*zetay(n)
<      .         +c4*zetaz(n)*zetay(n)
<        term21= c3*(  etay(n)* xiz(n) +  zetay(n)*  xiz(n)
<      .            -  xiy(n)* etaz(n) -    xiy(n)*zetaz(n))
<        stiffl(19,22)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(20,22)=c(4,1)*term13+c(2,4)*term14+c(5,6)*term15
<      .             +(c(2,1)+c(4,4))*term16+(c(4,4)-c(2,1))*term17
<      .             +(c(5,1)+c(4,6))*term18+(c(4,6)-c(5,1))*term19
<      .             +(c(5,4)+c(2,6))*term20+(c(2,6)-c(5,4))*term21
<        stiffl(21,22)=c(6,1)*term13+c(5,4)*term14+c(3,6)*term15
<      .             +(c(5,1)+c(6,4))*term16+(c(6,4)-c(5,1))*term17
<      .             +(c(3,1)+c(6,6))*term18+(c(6,6)-c(3,1))*term19
<      .             +(c(3,4)+c(5,6))*term20+(c(5,6)-c(3,4))*term21
<        stiffl(21,23)=c(6,4)*term13+c(5,2)*term14+c(3,5)*term15
<      .             +(c(5,4)+c(6,2))*term16+(c(6,2)-c(5,4))*term17
<      .             +(c(3,4)+c(6,5))*term18+(c(6,5)-c(3,4))*term19
<      .             +(c(3,2)+c(5,5))*term20+(c(5,5)-c(3,2))*term21
<        stiffl(20,23)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(19,23)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(21,24)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(20,24)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(19,24)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
< c
< c
< c
< c     Rows 22-24
< c
< c
< c
< c
<        term13=  c2*  xix(n)*  xix(n)+c1* etax(n)*  xix(n)
<      .         +c1*zetax(n)*  xix(n)+c2* etax(n)* etax(n)
<      .         +c1*zetax(n)* etax(n)+c2*zetax(n)*zetax(n)
<        term14=  c2*  xiy(n)*  xiy(n)+c1* etay(n)*  xiy(n)
<      .         +c1*zetay(n)*  xiy(n)+c2* etay(n)* etay(n)
<      .         +c1*zetay(n)* etay(n)+c2*zetay(n)*zetay(n)
<        term15=  c2*  xiz(n)*  xiz(n)+c1* etaz(n)*  xiz(n)
<      .         +c1*zetaz(n)*  xiz(n)+c2* etaz(n)* etaz(n)
<      .         +c1*zetaz(n)* etaz(n)+c2*zetaz(n)*zetaz(n)
<        term16=  c2*  xiy(n)*  xix(n)+c3* etay(n)*  xix(n)
<      .         +c3*zetay(n)*  xix(n)+c3*  xiy(n)* etax(n)
<      .         +c2* etay(n)* etax(n)+c3*zetay(n)* etax(n)
<      .         +c3*  xiy(n)*zetax(n)+c3* etay(n)*zetax(n)
<      .         +c2*zetay(n)*zetax(n)
<        term17= 0.
<        term18=  c2*  xiz(n)*  xix(n)+c3* etaz(n)*  xix(n)
<      .         +c3*zetaz(n)*  xix(n)+c3*  xiz(n)* etax(n)
<      .         +c2* etaz(n)* etax(n)+c3*zetaz(n)* etax(n)
<      .         +c3*  xiz(n)*zetax(n)+c3* etaz(n)*zetax(n)
<      .         +c2*zetaz(n)*zetax(n)
<        term19= 0.
<        term20=  c2*  xiz(n)*  xiy(n)+c3* etaz(n)*  xiy(n)
<      .         +c3*zetaz(n)*  xiy(n)+c3*  xiz(n)* etay(n)
<      .         +c2* etaz(n)* etay(n)+c3*zetaz(n)* etay(n)
<      .         +c3*  xiz(n)*zetay(n)+c3* etaz(n)*zetay(n)
<      .         +c2*zetaz(n)*zetay(n)
<        term21= 0.
<        stiffl(22,22)=c(1,1)*term13+c(4,4)*term14+c(6,6)*term15
<      .             +(c(1,4)+c(4,1))*term16+(c(1,4)-c(4,1))*term17
<      .             +(c(1,6)+c(6,1))*term18+(c(1,6)-c(6,1))*term19
<      .             +(c(4,6)+c(6,4))*term20+(c(4,6)-c(6,4))*term21
<        stiffl(23,23)=c(4,4)*term13+c(2,2)*term14+c(5,5)*term15
<      .             +(c(2,4)+c(4,2))*term16+(c(4,2)-c(2,4))*term17
<      .             +(c(5,4)+c(4,5))*term18+(c(4,5)-c(5,4))*term19
<      .             +(c(5,2)+c(2,5))*term20+(c(2,5)-c(5,2))*term21
<        stiffl(22,23)=c(1,4)*term13+c(4,2)*term14+c(6,5)*term15
<      .             +(c(4,4)+c(1,2))*term16+(c(1,2)-c(4,4))*term17
<      .             +(c(6,4)+c(1,5))*term18+(c(1,5)-c(6,4))*term19
<      .             +(c(6,2)+c(4,5))*term20+(c(4,5)-c(6,2))*term21
<        stiffl(24,24)=c(6,6)*term13+c(5,5)*term14+c(3,3)*term15
<      .             +(c(5,6)+c(6,5))*term16+(c(6,5)-c(5,6))*term17
<      .             +(c(3,6)+c(6,3))*term18+(c(6,3)-c(3,6))*term19
<      .             +(c(3,5)+c(5,3))*term20+(c(5,3)-c(3,5))*term21
<        stiffl(23,24)=c(4,6)*term13+c(2,5)*term14+c(5,3)*term15
<      .             +(c(2,6)+c(4,5))*term16+(c(4,5)-c(2,6))*term17
<      .             +(c(5,6)+c(4,3))*term18+(c(4,3)-c(5,6))*term19
<      .             +(c(5,5)+c(2,3))*term20+(c(2,3)-c(5,5))*term21
<        stiffl(22,24)=c(1,6)*term13+c(4,5)*term14+c(6,3)*term15
<      .             +(c(4,6)+c(1,5))*term16+(c(1,5)-c(4,6))*term17
<      .             +(c(6,6)+c(1,3))*term18+(c(1,3)-c(6,6))*term19
<      .             +(c(6,5)+c(4,3))*term20+(c(4,3)-c(6,5))*term21
<       do ii = 1,24
<         do jj = ii+1,24
<           stiffl(jj,ii) = stiffl(ii,jj)
<         enddo
<       enddo
< c
< c     n1(0) = n
< c     n1(1) = j + 1
< c     n1(2) = k + 1
< c     n1(3) = j + 1,k + 1
< c     n1(4) = i + 1
< c     n1(5) = i + 1,k + 1
< c     n1(6) = j + 1,i + 1
< c     n1(7) = j + 1,i + 1,k + 1
< c
<            n11i    = 0
<            n33i    = 0
<            n44i    = 1
<            do ii = 0,7
<              n11i(1,ii) = n1(ii)
<              iimax(ii)  = 1
<              if(islavept(n1(ii),8,iseqr).eq.0) n44i(ii) = 0
<              if(islavept(n1(ii),11,iseqr).gt.1) then
<                iimax(ii)  = islavept(n1(ii),11,iseqr)
<                do ii4 = 2,iimax(ii)
<                  n11i(ii4,ii) = islavept(n1(ii),12+ii4-2,iseqr)
<                  if(islavept(n11i(ii4,ii),8,iseqr).eq.0) then
<                    n44i(ii) = 0
<                  end if
<                enddo
<              end if
<              do ii4 = 1,iimax(ii)
<                n33i(ii4,ii) = 3*(n11i(ii4,ii)-1)
<              enddo
<            enddo
<         oj  = 1./ooj(n)
< c
<         do ii = 0,7
<          if(n44i(ii).ne.0) then
<               do ii3 = 1,iimax(ii)
<                   n22i = n11i(ii3,ii)
<                      do j = 1,3
<                       irow = n2(ii)+j-1
<                       itst1= n33i(ii3,ii)+j
<                       itst2= ija(itst1)
<                       sa (itst1)=sa(itst1)+stiffl(irow,irow)*oj
<                       i1 = 0
<                       do j1= 1,3
<                        if(j1.ne.j) then
<                         sa (itst2+i1) = sa(itst2+i1)+
<      .                               stiffl(irow,n2(ii)+j1-1)*oj
<                         ija(itst2+i1) = n33i(ii3,ii)+j1
<                         i1 = i1 + 1
<                        end if
<                       enddo
<                       j2sta =  ija(itst1)+2
<                       j2end =  ija(itst1+1)-1
<                       do kk = 0,7
<                        if(kk.ne.ii) then
<                           do j2 = j2sta,j2end,3
<                             if(ija(j2).eq.0) then
<                              do j1 = 1,3
<                                icol  = n2(kk)+j1-1
<                                j3 = j2 + j1 - 1
<                                sa (j3) = sa(j3)+stiffl(irow,icol)*oj
<                                ija(j3) = n33i(1,kk)+j1
<                              enddo
<                              goto 2200
<                             else
<                               do ii4 = 1,iimax(kk)
<                                itst1 = n33i(ii4,kk)+1
<                                if(ija(j2).eq.itst1) then
<                                 do j1 = 1,3
<                                   icol  = n2(kk)+j1-1
<                                   j3 = j2 + j1 - 1
<                                   sa (j3)=sa(j3)+stiffl(irow,icol)*oj
<                                 enddo
<                                 goto 2200
<                                end if
<                               enddo
<                             end if
<                           enddo
< 2200                      continue
<                        end if
<                       enddo
<                      enddo
<               enddo
< 3000       continue
<          else
<             do j = 1,3
<               sa (3*(n1(ii)-1)+j) = 1.d0
<             enddo
<          end if
<         enddo
<         end if
< 200    continue
<  
<        return
<        end
Index: source/cfl3d/dist/updateg.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/updateg.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
12c12
< c     $Id: updateg.F,v 1.4 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: updateg.F,v 1.3 2002/05/10 14:01:45 rumsey Exp $
441,444d440
< #   ifdef FASTIO
<          call writ_buffast(nbl,11,nou,bou,nbuf,ibufdim,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,32)
< #   else
447d442
< #   endif
Index: source/cfl3d/dist/wrest.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/wrest.F,v
retrieving revision 1.14
retrieving revision 1.11
diff -r1.14 -r1.11
11c11
< c     $Id: wrest.F,v 1.14 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: wrest.F,v 1.11 2003/05/09 19:45:10 rumsey Exp $
77,78c77
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
88,90d86
<       common /fullns/ ifullns
<       common /des/ cdes,ides
<       common /curvat/ isarc2d,sarccr3,ieasmcc2d
290c286
<       write(901,'('' cgns write in wrest'')')
---
>       write(11,'('' cgns write in wrest'')')
292c288
<         write(901,'('' cgns writing specific BC values (primitive)'')')
---
>         write(11,'('' cgns writing specific BC values (primitive)'')')
300c296
<       write(901,'(''  ...writing conserved q variables'')')
---
>       write(11,'(''  ...writing conserved q variables'')')
397c393
<           write(901,'('' not enough memory for cgns blank'',
---
>           write(11,'('' not enough memory for cgns blank'',
399c395
<           write(901,'('' iwork in iwk='',i6,''.  Needed = '',i6)')
---
>           write(11,'('' iwork in iwk='',i6,''.  Needed = '',i6)')
495a492
>          if (icgns .ne. 1) then
498d494
<          if (icgns .ne. 1) then
557a554
>          if (icgns .ne. 1) then
561d557
<          if (icgns .ne. 1) then
695c691
<      +   gamma,pr,prt,cbar,i2d,ifullns,ides,isarc2d,ieasmcc2d)
---
>      +   gamma,pr,prt,cbar)
786a783,794
> c   need to switch y and z if ialph .ne. 0
>         if (ialph .ne. 0) then
>           do i=1,idim-1
>             do j=1,jdim-1
>               do k=1,kdim-1
>                 temp=qavg(j,k,i,3)
>                 qavg(j,k,i,3)=qavg(j,k,i,4)
>                 qavg(j,k,i,4)=-temp
>               enddo
>             enddo
>           enddo
>         end if
789d796
<         if (ialph .eq. 0) then
792,803d798
<         else
<         write(97) (((qavg(j,k,i,1),i=1,idim-1),j=1,jdim-1),
<      +    k=1,kdim-1),
<      +            (((qavg(j,k,i,2),i=1,idim-1),j=1,jdim-1),
<      +    k=1,kdim-1),
<      +            (((qavg(j,k,i,4),i=1,idim-1),j=1,jdim-1),
<      +    k=1,kdim-1),
<      +            (((-qavg(j,k,i,3),i=1,idim-1),j=1,jdim-1),
<      +    k=1,kdim-1),
<      +            (((qavg(j,k,i,5),i=1,idim-1),j=1,jdim-1),
<      +    k=1,kdim-1)
<         end if
Index: source/cfl3d/dist/wrestg.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/wrestg.F,v
retrieving revision 1.7
retrieving revision 1.6
diff -r1.7 -r1.6
16c16
< c     $Id: wrestg.F,v 1.7 2005/10/05 19:42:58 rumsey Exp $
---
> c     $Id: wrestg.F,v 1.6 2003/09/08 13:51:41 rumsey Exp $
174c174
<          write(901,'('' writing 2nd order time data to cgns file,'',
---
>          write(11,'('' writing 2nd order time data to cgns file,'',
259c259
<               write(901,'('' writing dynamic mesh data to cgns file,'',
---
>               write(11,'('' writing dynamic mesh data to cgns file,'',
377c377
<                 write(901,'('' writing deforming mesh data to cgns'',
---
>                 write(11,'('' writing deforming mesh data to cgns'',
Index: source/cfl3d/dist/writ_buf.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/writ_buf.F,v
retrieving revision 1.3
retrieving revision 1.2
diff -r1.3 -r1.2
1,73d0
< #   ifdef FASTIO
<       subroutine writ_buffast(nbl,iunit,nou,bou,nbuf,ibufdim,myhost,
<      .                    myid,mycomm,mblk2nd,maxbl,idbugp)
< c
< c     $Id: writ_buf.F,v 1.3 2005/10/05 19:42:59 rumsey Exp $
< c
< c***********************************************************************
< c     Purpose:  Passes the internal buffer that resids on the processor
< c     that owns block nbl to the host, and writes the contents of the
< c     buffer to the specified unit number, iunit.
< c     "Fast I/O" version written by Bob Bergeron, NASA Ames, 2005
< c***********************************************************************
< c
< #   ifdef CMPLX
<       implicit complex(a-h,o-z)
< #   endif
<       dimension istat(1)
< c
<       character*120 bou(ibufdim,nbuf)
<       character*120 boutemp
<       dimension nou(nbuf)
<       dimension mblk2nd(maxbl)
<       common/rjbdbgi/lunfio0
< c
< c
<       iou = 1
<       if (iunit.eq.11) iou = 1
<       if (iunit.eq. 9) iou = 2
<       if (iunit.eq.14) iou = 3
<       if (iunit.eq.25) iou = 4
< c
< c     set baseline tag values
< c
<         myidchk = mblk2nd(nbl)
<         if(myid.eq.myidchk.or.myid.eq.myhost) then
<           if(myid.eq.myhost) then
<              myidb=0
<           else
<              myidb=1
<           endif
<           if(myid.eq.myidchk) then
<              write(lunfio0+myid,'(" ppflag ",i3,i6)')idbugp,nou(iou)
<             if(nou(iou).gt.0) then
< crjb...once per entry worker writes flag for reassembly code
< c             write(lunfio0+myid,'(" ppflag ",i3)')idbugp
<               do kou=1,nou(iou)
<                  write(lunfio0+myid,'(a)')bou(kou,iou)
<              enddo
<             endif
<             do kou=1,nou(iou)
<              bou(kou,iou) = ' '
<             end do
<             nou(iou) = 0
< crjb..myid.eq.myidchk
<           else
< c           if (nou(iou) .ge. ibufdim) then
< c               write(iunit,'(''WARNING: internal buffer length'',
< c    .          '' exceeded -  make parameter ibufdim > '',i6)') nou(iou)
< c               write(iunit,'(''continuing, but you will be missing'',
< c    .          '' some output data '')')
< c           end if
< crjb..myid.eq.myhost
< crjb...flag for reassembly code
<             write(11,'(" ppflag ",i3)')idbugp
<             do kou=1,nou(iou)
<              bou(kou,iou) = ' '
<             end do
<             nou(iou) = 0
<           endif
<         endif
<       return
<       end
< #   else
76a4,5
> c     $Id: writ_buf.F,v 1.2 2001/05/25 19:59:50 biedron Exp $
> c
162d90
< #   endif
Index: source/cfl3d/dist/yplusout.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/dist/yplusout.F,v
retrieving revision 1.11
retrieving revision 1.9
diff -r1.11 -r1.9
10c10
< c     $Id: yplusout.F,v 1.11 2005/05/20 18:40:44 rumsey Exp $
---
> c     $Id: yplusout.F,v 1.9 2003/05/09 19:45:11 rumsey Exp $
60,61c60
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
143,144c142
<      .         abs(ibcinfo(nbl,ns,1,1)) .eq. 2014 .or.
<      .         abs(ibcinfo(nbl,ns,1,1)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .         abs(ibcinfo(nbl,ns,1,1)) .eq. 2014) ivv2 = ivv2 + 1
148,149c146
<      .         abs(ibcinfo(nbl,ns,1,2)) .eq. 2014 .or.
<      .         abs(ibcinfo(nbl,ns,1,2)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .         abs(ibcinfo(nbl,ns,1,2)) .eq. 2014) ivv2 = ivv2 + 1
153,154c150
<      .         abs(jbcinfo(nbl,ns,1,1)) .eq. 2014 .or.
<      .         abs(jbcinfo(nbl,ns,1,1)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .         abs(jbcinfo(nbl,ns,1,1)) .eq. 2014) ivv2 = ivv2 + 1
158,159c154
<      .         abs(jbcinfo(nbl,ns,1,2)) .eq. 2014 .or.
<      .         abs(jbcinfo(nbl,ns,1,2)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .         abs(jbcinfo(nbl,ns,1,2)) .eq. 2014) ivv2 = ivv2 + 1
163,164c158
<      .         abs(kbcinfo(nbl,ns,1,1)) .eq. 2014 .or.
<      .         abs(kbcinfo(nbl,ns,1,1)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .         abs(kbcinfo(nbl,ns,1,1)) .eq. 2014) ivv2 = ivv2 + 1
168,169c162
<      .         abs(kbcinfo(nbl,ns,1,2)) .eq. 2014 .or.
<      .         abs(kbcinfo(nbl,ns,1,2)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .         abs(kbcinfo(nbl,ns,1,2)) .eq. 2014) ivv2 = ivv2 + 1
190,191c183
<      .             abs(kbcinfo(nbl,nseg,1,m)) .eq. 2014 .or.
<      .             abs(kbcinfo(nbl,nseg,1,m)) .eq. 2016) ktest = 1
---
>      .             abs(kbcinfo(nbl,nseg,1,m)) .eq. 2014) ktest = 1
212,213c204
<      .             abs(jbcinfo(nbl,nseg,1,m)) .eq. 2014 .or.
<      .             abs(jbcinfo(nbl,nseg,1,m)) .eq. 2016) jtest = 1
---
>      .             abs(jbcinfo(nbl,nseg,1,m)) .eq. 2014) jtest = 1
234,235c225
<      .             abs(ibcinfo(nbl,nseg,1,m)) .eq. 2014 .or.
<      .             abs(ibcinfo(nbl,nseg,1,m)) .eq. 2016) itest = 1
---
>      .             abs(ibcinfo(nbl,nseg,1,m)) .eq. 2014) itest = 1
292,293c282
<      .      abs(ibcinfo(nbl,ns,1,1)) .eq. 2014 .or.
<      .      abs(ibcinfo(nbl,ns,1,1)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .      abs(ibcinfo(nbl,ns,1,1)) .eq. 2014) ivv2 = ivv2 + 1
297,298c286
<      .      abs(ibcinfo(nbl,ns,1,2)) .eq. 2014 .or.
<      .      abs(ibcinfo(nbl,ns,1,2)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .      abs(ibcinfo(nbl,ns,1,2)) .eq. 2014) ivv2 = ivv2 + 1
302,303c290
<      .      abs(jbcinfo(nbl,ns,1,1)) .eq. 2014 .or.
<      .      abs(jbcinfo(nbl,ns,1,1)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .      abs(jbcinfo(nbl,ns,1,1)) .eq. 2014) ivv2 = ivv2 + 1
307,308c294
<      .      abs(jbcinfo(nbl,ns,1,2)) .eq. 2014 .or.
<      .      abs(jbcinfo(nbl,ns,1,2)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .      abs(jbcinfo(nbl,ns,1,2)) .eq. 2014) ivv2 = ivv2 + 1
312,313c298
<      .      abs(kbcinfo(nbl,ns,1,1)) .eq. 2014 .or.
<      .      abs(kbcinfo(nbl,ns,1,1)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .      abs(kbcinfo(nbl,ns,1,1)) .eq. 2014) ivv2 = ivv2 + 1
317,318c302
<      .      abs(kbcinfo(nbl,ns,1,2)) .eq. 2014 .or.
<      .      abs(kbcinfo(nbl,ns,1,2)) .eq. 2016) ivv2 = ivv2 + 1
---
>      .      abs(kbcinfo(nbl,ns,1,2)) .eq. 2014) ivv2 = ivv2 + 1
Index: source/cfl3d/libs/aesurf.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/aesurf.F,v
retrieving revision 1.6
retrieving revision 1.5
diff -r1.6 -r1.5
2,5c2,4
<      .                  xmdk,xmdi,wkj,wkk,wki,maxbl,maxseg,nmds,
<      .                  maxaes,aesrfdat,xs,xxn,icsi,icsf,jcsi,
<      .                  jcsf,kcsi,kcsf,nsegdfrm,idfrmseg,iaesurf,
<      .                  maxsegdg)
---
>      .                  xmdk,xmdi,maxbl,maxseg,nmds,maxaes,aesrfdat,
>      .                  xs,xxn,icsi,icsf,jcsi,jcsf,kcsi,kcsf,nsegdfrm,
>      .                  idfrmseg,iaesurf,maxsegdg)
7c6
< c     $Id: aesurf.F,v 1.6 2005/08/15 17:27:48 rebart Exp $
---
> c     $Id: aesurf.F,v 1.5 2003/04/24 17:39:53 rebart Exp $
29c28
<       dimension wkk(jdim,idim,2),wki(jdim,kdim,2),wkj(kdim,idim,2)
---
>       dimension nsrfflg(kdim*idim*4+jdim*idim*4+jdim*kdim*4,4)
40a40,110
> 
>          is1 = 0
>          do is=1,nsegdfrm(nbl)
>          if(jcsi(nbl,is) .eq. jcsf(nbl,is)) then
>            kinc = kcsf(nbl,is)-kcsi(nbl,is)
>            do k = kcsi(nbl,is),kcsf(nbl,is),kinc
>              do i = icsi(nbl,is),icsf(nbl,is)
>                is1            = is1 + 1
>                nsrfflg(is1,1) = i
>                nsrfflg(is1,2) = jcsi(nbl,is)
>                nsrfflg(is1,3) = k
>                nsrfflg(is1,4) = 0
>              enddo
>            enddo
>            iinc = icsf(nbl,is)-icsi(nbl,is)
>            do i = icsi(nbl,is),icsf(nbl,is),iinc
>              do k = kcsi(nbl,is),kcsf(nbl,is)
>                is1            = is1 + 1
>                nsrfflg(is1,1) = i
>                nsrfflg(is1,2) = jcsi(nbl,is)
>                nsrfflg(is1,3) = k
>                nsrfflg(is1,4) = 0
>              enddo
>            enddo
>          else
>      .   if(icsi(nbl,is) .eq. icsf(nbl,is)) then
>            kinc = kcsf(nbl,is)-kcsi(nbl,is)
>            do k = kcsi(nbl,is),kcsf(nbl,is),kinc
>              do j = jcsi(nbl,is),jcsf(nbl,is)
>                is1            = is1 + 1
>                nsrfflg(is1,1) = icsi(nbl,is)
>                nsrfflg(is1,2) = j
>                nsrfflg(is1,3) = k
>                nsrfflg(is1,4) = 0
>              enddo
>            enddo
>            jinc = jcsf(nbl,is)-jcsi(nbl,is)
>            do j = jcsi(nbl,is),jcsf(nbl,is),jinc
>              do k = kcsi(nbl,is),kcsf(nbl,is)
>                is1            = is1 + 1
>                nsrfflg(is1,1) = icsi(nbl,is)
>                nsrfflg(is1,2) = j
>                nsrfflg(is1,3) = k
>                nsrfflg(is1,4) = 0
>              enddo
>            enddo
>          else
>      .   if(kcsi(nbl,is) .eq. kcsf(nbl,is)) then
>            iinc = icsf(nbl,is)-icsi(nbl,is)
>            do i = icsi(nbl,is),icsf(nbl,is),iinc
>              do j = jcsi(nbl,is),jcsf(nbl,is)
>                is1            = is1 + 1
>                nsrfflg(is1,1) = i
>                nsrfflg(is1,2) = j
>                nsrfflg(is1,3) = kcsi(nbl,is)
>                nsrfflg(is1,4) = 0
>              enddo
>            enddo
>            jinc = jcsf(nbl,is)-jcsi(nbl,is)
>            do j = jcsi(nbl,is),jcsf(nbl,is),jinc
>              do i = icsi(nbl,is),icsf(nbl,is)
>                is1            = is1 + 1
>                nsrfflg(is1,1) = i
>                nsrfflg(is1,2) = j
>                nsrfflg(is1,3) = kcsi(nbl,is)
>                nsrfflg(is1,4) = 0
>              enddo
>            enddo
>          end if
>          enddo
>          nbndry = is1
65,89c135,168
< c                save any existing displacements
<                  deltj1 = deltj(k,i,1,m)
<                  deltj2 = deltj(k,i,2,m)
<                  deltj3 = deltj(k,i,3,m)
< c                initialize modal displacements
<                  deltj(k,i,1,m) = 0.
<                  deltj(k,i,2,m) = 0.
<                  deltj(k,i,3,m) = 0.
< c                sum delta contributions from all modes
<                  do 3010 n = 1,nmodes
<                  deltj(k,i,1,m) = deltj(k,i,1,m) +
<      .                            wkj(k,i,m)*(xs(2*n-1,iaes)
<      .                  - xxn(2*n-1,iaes))*xmdj(k,i,ll+1,n,iaes)*rgrefl
<                  deltj(k,i,2,m) = deltj(k,i,2,m) +
<      .                            wkj(k,i,m)*(xs(2*n-1,iaes)
<      .                  - xxn(2*n-1,iaes))*xmdj(k,i,ll+2,n,iaes)*rgrefl
<                  deltj(k,i,3,m) = deltj(k,i,3,m) +
<      .                            wkj(k,i,m)*(xs(2*n-1,iaes)
<      .                  - xxn(2*n-1,iaes))*xmdj(k,i,ll+3,n,iaes)*rgrefl
< 3010             continue
< c                add modal displacements to existing displacements
<                  deltj(k,i,1,m) = deltj(k,i,1,m) + deltj1
<                  deltj(k,i,2,m) = deltj(k,i,2,m) + deltj2
<                  deltj(k,i,3,m) = deltj(k,i,3,m) + deltj3
<                  wkj(k,i,m)    = 0.
---
> c              Flag point to indicate it has already been displaced, 
> c              to eliminate doubling of displacement
> c
>                do ii = 1,nbndry
>                    if(i.eq.nsrfflg(ii,1).and.j.eq.nsrfflg(ii,2).and.
>      .                k.eq.nsrfflg(ii,3)) then
>                       if(nsrfflg(ii,4).eq.1) goto 3015
>                       nsrfflg(ii,4) = 1
>                       goto 3009
>                    end if
>                enddo
> 3009           continue
> c              save any existing displacements
>                deltj1 = deltj(k,i,1,m)
>                deltj2 = deltj(k,i,2,m)
>                deltj3 = deltj(k,i,3,m)
> c              initialize modal displacements
>                deltj(k,i,1,m) = 0.
>                deltj(k,i,2,m) = 0.
>                deltj(k,i,3,m) = 0.
> c              sum delta contributions from all modes
>                do 3010 n = 1,nmodes
>                deltj(k,i,1,m) = deltj(k,i,1,m) + (xs(2*n-1,iaes)
>      .                - xxn(2*n-1,iaes))*xmdj(k,i,ll+1,n,iaes)*rgrefl
>                deltj(k,i,2,m) = deltj(k,i,2,m) + (xs(2*n-1,iaes)
>      .                - xxn(2*n-1,iaes))*xmdj(k,i,ll+2,n,iaes)*rgrefl
>                deltj(k,i,3,m) = deltj(k,i,3,m) + (xs(2*n-1,iaes)
>      .                - xxn(2*n-1,iaes))*xmdj(k,i,ll+3,n,iaes)*rgrefl
> 3010           continue
> c              add modal displacements to existing displacements
>                deltj(k,i,1,m) = deltj(k,i,1,m) + deltj1
>                deltj(k,i,2,m) = deltj(k,i,2,m) + deltj2
>                deltj(k,i,3,m) = deltj(k,i,3,m) + deltj3
> 3015           continue
90a170
> 3030           continue
113,137c193,226
< c                save any existing displacements
<                  deltk1 = deltk(j,i,1,m)
<                  deltk2 = deltk(j,i,2,m)
<                  deltk3 = deltk(j,i,3,m)
< c                initialize modal displacements
<                  deltk(j,i,1,m) = 0.
<                  deltk(j,i,2,m) = 0.
<                  deltk(j,i,3,m) = 0.
< c                sum delta contributions from all modes
<                  do 3040 n = 1,nmodes
<                  deltk(j,i,1,m) = deltk(j,i,1,m) +
<      .                            wkk(j,i,m)*(xs(2*n-1,iaes)
<      .                  - xxn(2*n-1,iaes))*xmdk(j,i,ll+1,n,iaes)*rgrefl
<                  deltk(j,i,2,m) = deltk(j,i,2,m) +
<      .                            wkk(j,i,m)*(xs(2*n-1,iaes)
<      .                  - xxn(2*n-1,iaes))*xmdk(j,i,ll+2,n,iaes)*rgrefl
<                  deltk(j,i,3,m) = deltk(j,i,3,m) +
<      .                            wkk(j,i,m)*(xs(2*n-1,iaes)
<      .                  - xxn(2*n-1,iaes))*xmdk(j,i,ll+3,n,iaes)*rgrefl
< 3040             continue
< c                add modal displacements to existing displacements
<                  deltk(j,i,1,m)=deltk(j,i,1,m) + deltk1
<                  deltk(j,i,2,m)=deltk(j,i,2,m) + deltk2
<                  deltk(j,i,3,m)=deltk(j,i,3,m) + deltk3
<                  wkk(j,i,m)   = 0.
---
> c              Flag point to indicate it has already been displaced, 
> c              to eliminate doubling of displacement
> c
>                do ii = 1,nbndry
>                    if(i.eq.nsrfflg(ii,1).and.j.eq.nsrfflg(ii,2).and.
>      .                k.eq.nsrfflg(ii,3)) then
>                       if(nsrfflg(ii,4).eq.1) goto 3045
>                       nsrfflg(ii,4) = 1
>                       goto 3039
>                    end if
>                enddo
> 3039           continue
> c              save any existing displacements
>                deltk1 = deltk(j,i,1,m)
>                deltk2 = deltk(j,i,2,m)
>                deltk3 = deltk(j,i,3,m)
> c              initialize modal displacements
>                deltk(j,i,1,m) = 0.
>                deltk(j,i,2,m) = 0.
>                deltk(j,i,3,m) = 0.
> c              sum delta contributions from all modes
>                do 3040 n = 1,nmodes
>                deltk(j,i,1,m) = deltk(j,i,1,m) + (xs(2*n-1,iaes)
>      .                - xxn(2*n-1,iaes))*xmdk(j,i,ll+1,n,iaes)*rgrefl
>                deltk(j,i,2,m) = deltk(j,i,2,m) + (xs(2*n-1,iaes)
>      .                - xxn(2*n-1,iaes))*xmdk(j,i,ll+2,n,iaes)*rgrefl
>                deltk(j,i,3,m) = deltk(j,i,3,m) + (xs(2*n-1,iaes)
>      .                - xxn(2*n-1,iaes))*xmdk(j,i,ll+3,n,iaes)*rgrefl
> 3040           continue
> c              add modal displacements to existing displacements
>                deltk(j,i,1,m)=deltk(j,i,1,m) + deltk1
>                deltk(j,i,2,m)=deltk(j,i,2,m) + deltk2
>                deltk(j,i,3,m)=deltk(j,i,3,m) + deltk3
> 3045           continue
138a228
> 3060           continue
161,185c251,284
< c                save any existing displacements
<                  delti1 = delti(j,k,1,m)
<                  delti2 = delti(j,k,2,m)
<                  delti3 = delti(j,k,3,m)
< c                initialize modal displacements
<                  delti(j,k,1,m) = 0.
<                  delti(j,k,2,m) = 0.
<                  delti(j,k,3,m) = 0.
< c                sum delta contributions from all modes
<                  do 3070 n = 1,nmodes
<                  delti(j,k,1,m) = delti(j,k,1,m) +
<      .                            wki(j,k,m)*(xs(2*n-1,iaes)
<      .                  - xxn(2*n-1,iaes))*xmdi(j,k,ll+1,n,iaes)*rgrefl
<                  delti(j,k,2,m) = delti(j,k,2,m) +
<      .                            wki(j,k,m)*(xs(2*n-1,iaes)
<      .                  - xxn(2*n-1,iaes))*xmdi(j,k,ll+2,n,iaes)*rgrefl
<                  delti(j,k,3,m) = delti(j,k,3,m) +
<      .                            wki(j,k,m)*(xs(2*n-1,iaes)
<      .                  - xxn(2*n-1,iaes))*xmdi(j,k,ll+3,n,iaes)*rgrefl
< 3070             continue
< c                add modal displacements to existing displacements
<                  delti(j,k,1,m)=delti(j,k,1,m) + delti1
<                  delti(j,k,2,m)=delti(j,k,2,m) + delti2
<                  delti(j,k,3,m)=delti(j,k,3,m) + delti3
<                  wki(j,k,m)   = 0.
---
> c              Flag point to indicate it has already been displaced, 
> c              to eliminate doubling of displacement
> c
>                do ii = 1,nbndry
>                    if(i.eq.nsrfflg(ii,1).and.j.eq.nsrfflg(ii,2).and.
>      .                k.eq.nsrfflg(ii,3)) then
>                       if(nsrfflg(ii,4).eq.1) goto 3075
>                       nsrfflg(ii,4) = 1
>                       goto 3069
>                    end if
>                enddo
> 3069           continue
> c              save any existing displacements
>                delti1 = delti(j,k,1,m)
>                delti2 = delti(j,k,2,m)
>                delti3 = delti(j,k,3,m)
> c              initialize modal displacements
>                delti(j,k,1,m) = 0.
>                delti(j,k,2,m) = 0.
>                delti(j,k,3,m) = 0.
> c              sum delta contributions from all modes
>                do 3070 n = 1,nmodes
>                delti(j,k,1,m) = delti(j,k,1,m) + (xs(2*n-1,iaes)
>      .                - xxn(2*n-1,iaes))*xmdi(j,k,ll+1,n,iaes)*rgrefl
>                delti(j,k,2,m) = delti(j,k,2,m) + (xs(2*n-1,iaes)
>      .                - xxn(2*n-1,iaes))*xmdi(j,k,ll+2,n,iaes)*rgrefl
>                delti(j,k,3,m) = delti(j,k,3,m) + (xs(2*n-1,iaes)
>      .                - xxn(2*n-1,iaes))*xmdi(j,k,ll+3,n,iaes)*rgrefl
> 3070           continue
> c              add modal displacements to existing displacements
>                delti(j,k,1,m)=delti(j,k,1,m) + delti1
>                delti(j,k,2,m)=delti(j,k,2,m) + delti2
>                delti(j,k,3,m)=delti(j,k,3,m) + delti3
> 3075           continue
186a286
> 3090           continue
Index: source/cfl3d/libs/barth3d.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/barth3d.F,v
retrieving revision 1.8
retrieving revision 1.5
diff -r1.8 -r1.5
6c6
<      + tursav2,volj0,volk0,voli0,nou,bou,nbuf,ibufdim,iex,iex2)
---
>      + tursav2,volj0,volk0,voli0,nou,bou,nbuf,ibufdim)
8c8
< c     $Id: barth3d.F,v 1.8 2005/05/20 18:43:09 rumsey Exp $
---
> c     $Id: barth3d.F,v 1.5 2003/05/09 19:47:52 rumsey Exp $
34,35c34
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
52c51
<       dimension turre(0-iex:jdim+iex,0-iex:kdim+iex,0-iex2:idim+iex2),
---
>       dimension turre(0:jdim,0:kdim,0:idim),
65,71d63
<         if(iturbord .eq. 1) then
<            nou(1) = min(nou(1)+1,ibufdim)
<            write(bou(nou(1),1),'(''     1st order advection on RHS'')')
<         else
<            nou(1) = min(nou(1)+1,ibufdim)
<            write(bou(nou(1),1),'(''     2nd order advection on RHS'')')
<         end if
300d291
<         if (i2d .ne. 1) then
317,357d307
<         end if
<         if (iturbord .ne. 1) then
< c      (1) k=0 boundary:
<         do i=1,idim-1
<           do j=1,jdim-1
<             turre(j,-1,i)=tk0(j,i,1,2)
<           enddo
<         enddo
< c      (2) k=kdim boundary:
<         do i=1,idim-1
<           do j=1,jdim-1
<             turre(j,kdim+1,i)=tk0(j,i,1,4)
<           enddo
<         enddo
< c      (3) j=0 boundary:
<         do i=1,idim-1
<           do k=1,kdim-1
<             turre(-1,k,i)=tj0(k,i,1,2)
<           enddo
<         enddo
< c      (4) j=jdim boundary:
<         do i=1,idim-1
<           do k=1,kdim-1
<             turre(jdim+1,k,i)=tj0(k,i,1,4)
<           enddo
<         enddo
<         if (i2d .ne. 1) then
< c      (5) i=0 boundary:
<         do k=1,kdim-1
<           do j=1,jdim-1
<             turre(j,k,-1)=ti0(j,k,1,2)
<           enddo
<         enddo
< c      (6) i=idim boundary:
<         do k=1,kdim-1
<           do j=1,jdim-1
<             turre(j,k,idim+1)=ti0(j,k,1,4)
<           enddo
<         enddo
<         end if
<         end if
500d449
<         if (iturbord .eq. 1) then
521,547d469
<         else
< c       2nd order upwind; LHS remains 1st order everywhere
<         do k=1,kdim-1
<           do i=1,idim-1
<             do j=1,jdim-1
<               xc=0.5*(sk(j,k+1,i,1)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,1)*sk(j,k,i  ,4))/vol(j,k,i)
<               yc=0.5*(sk(j,k+1,i,2)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,2)*sk(j,k,i  ,4))/vol(j,k,i)
<               zc=0.5*(sk(j,k+1,i,3)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,3)*sk(j,k,i  ,4))/vol(j,k,i)
<               tc=0.5*(sk(j,k+1,i,5)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,5)*sk(j,k,i  ,4))/vol(j,k,i)
<               uu=b1*(xc*q(j,k,i,2)+yc*q(j,k,i,3)+zc*q(j,k,i,4))+tc
<               sgnu=ccsignrc(1.,uu)
<               app=0.5*(1.+sgnu)
<               apm=0.5*(1.-sgnu)
<               vist3d(j,k,i)=vist3d(j,k,i)-0.5*uu*app*turre(j,k-2,i)
<      +                                    +2.*uu*app*turre(j,k-1,i)
<      +                                   -1.5*uu*app*turre(j,k,i)
<      +                                   +1.5*uu*apm*turre(j,k,i)
<      +                                    -2.*uu*apm*turre(j,k+1,i)
<      +                                   +0.5*uu*apm*turre(j,k+2,i)
<             enddo
<           enddo
<         enddo
<         end if
689d610
<         if (iturbord .eq. 1) then
710,736d630
<         else
< c       2nd order upwind; LHS remains 1st order everywhere
<         do i=1,idim-1
<           do k=1,kdim-1
<             do j=1,jdim-1
<               xc=0.5*(sj(j+1,k,i,1)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,1)*sj(j,k,i  ,4))/vol(j,k,i)
<               yc=0.5*(sj(j+1,k,i,2)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,2)*sj(j,k,i  ,4))/vol(j,k,i)
<               zc=0.5*(sj(j+1,k,i,3)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,3)*sj(j,k,i  ,4))/vol(j,k,i)
<               tc=0.5*(sj(j+1,k,i,5)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,5)*sj(j,k,i  ,4))/vol(j,k,i)
<               uu=b1*(xc*q(j,k,i,2)+yc*q(j,k,i,3)+zc*q(j,k,i,4))+tc
<               sgnu=ccsignrc(1.,uu)
<               app=0.5*(1.+sgnu)
<               apm=0.5*(1.-sgnu)
<               vist3d(j,k,i)=vist3d(j,k,i)-0.5*uu*app*turre(j-2,k,i)
<      +                                    +2.*uu*app*turre(j-1,k,i)
<      +                                   -1.5*uu*app*turre(j,k,i)
<      +                                   +1.5*uu*apm*turre(j,k,i)
<      +                                    -2.*uu*apm*turre(j+1,k,i)
<      +                                   +0.5*uu*apm*turre(j+2,k,i)
<             enddo
<           enddo
<         enddo
<         end if
879d772
<         if (iturbord .eq. 1) then
901,927d793
<           else
< c       2nd order upwind; LHS remains 1st order everywhere
<           do i=1,idim-1
<             do k=1,kdim-1
<               do j=1,jdim-1
<                 xc=0.5*(si(j,k,i+1,1)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,1)*si(j,k,i  ,4))/vol(j,k,i)
<                 yc=0.5*(si(j,k,i+1,2)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,2)*si(j,k,i  ,4))/vol(j,k,i)
<                 zc=0.5*(si(j,k,i+1,3)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,3)*si(j,k,i  ,4))/vol(j,k,i)
<                 tc=0.5*(si(j,k,i+1,5)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,5)*si(j,k,i  ,4))/vol(j,k,i)
<                 uu=b1*(xc*q(j,k,i,2)+yc*q(j,k,i,3)+zc*q(j,k,i,4))+tc
<               sgnu=ccsignrc(1.,uu)
<               app=0.5*(1.+sgnu)
<               apm=0.5*(1.-sgnu)
<               vist3d(j,k,i)=vist3d(j,k,i)-0.5*uu*app*turre(j,k,i-2)
<      +                                    +2.*uu*app*turre(j,k,i-1)
<      +                                   -1.5*uu*app*turre(j,k,i)
<      +                                   +1.5*uu*apm*turre(j,k,i)
<      +                                    -2.*uu*apm*turre(j,k,i+1)
<      +                                   +0.5*uu*apm*turre(j,k,i+2)
<               enddo
<             enddo
<           enddo
<           end if
Index: source/cfl3d/libs/bc.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/bc.F,v
retrieving revision 1.7
retrieving revision 1.6
diff -r1.7 -r1.6
8c8
< c     $Id: bc.F,v 1.7 2003/10/07 17:55:49 rumsey Exp $
---
> c     $Id: bc.F,v 1.6 2003/05/09 19:47:52 rumsey Exp $
134,167d133
< c      bc2016 - viscous surface (set ndata=7)
< c           1) Twtype:
< c              Twtype > 0 (fixed wall temperature Tw/Tinf = Twtype)
< c              Twtype = 0 (adiabatic wall)
< c              Twtype < 0 (fixed wall temperature = stagnation temp)
< c
< c           2) cq  = steady component of surface jet
< c           3) cqu = unsteady component of surface jet
< c
< c              Set surface jet boundary conditions via mass-flow
< c              coefficient:
< c                                                    (rho * u)_jet
< c              mass-flow coefficient (cq + cqu)  = ------------------
< c                                                  (rho * u)_infinity
< c
< c           4) sjetx = direction number for surface jet (x-direction)
< c           5) sjety = direction number for surface jet (y-direction)
< c           6) sjetz = direction number for surface jet (z-direction)
< c           7) rfreq = reduced frequency of unsteady jet =
< c                      cqu*sin(twopi*rfreq*time)
< c              NOTES:
< c              1.  input direction numbers do not have to be normalized
< c              2.  Set (sjetx,sjety,sjetz) = (0.0,0.0,0.0) for a
< c                  wall-normal surface jet.  In this case,
< c                  cq & cqu > 0 ==> flow into domain at i,j,k=1,1,1
< c                  cq & cqu > 0 ==> flow out of domain at i,j,k=idim,jdim,kdim
< c                  cq & cqu < 0 ==> flow out of domain at i,j,k=1,1,1
< c                  cq & cqu < 0 ==> flow in to domain at i,j,k=idim,jdim,kdim
< c              3.  rfreq = freq*lref/a_inf where freq is frequency in Hertz,
< c                  lref is reference length, and a_inf is speed of sound
< c              4.  For rfreq < 0: ramp the mass flow coefficient from zero to
< c                  a terminal value where
< c                  cq  = terminal mass flow coefficient value
< c                  cqu = constant rate of change
569,577d534
<       if (ibcinfo(nbl,nseg,1,1).eq.2016) 
<      .  call bc2016(jdim,kdim,idim,w(lq),w(lqj0),w(lqk0),w(lqi0),
<      .  w(lsj),w(lsk),w(lsi),w(lbcj),w(lbck),w(lbci),
<      .  w(lxtbj),w(lxtbk),w(lxtbi),w(latbj),w(latbk),w(latbi),
<      .  ista,iend,jsta,jend,ksta,kend,1,w(lxib),w(ltj0),w(ltk0),w(lti0),
<      .  w(lsnk0),w(lvis),w(lvj0),w(lvk0),w(lvi0),mdim,ndim,w(ldata),
<      .  filname,iuns,ibcinfo(nbl,nseg,1,1),w(lsni0),w(lsnk0),w(lsni0),
<      .  ntime,w(lnbl),w(lxkb),w(lnbl),nou,bou,nbuf,ibufdim,myid)
< c
772,780d728
<       if (ibcinfo(nbl,nseg,1,2).eq.2016)
<      .  call bc2016(jdim,kdim,idim,w(lq),w(lqj0),w(lqk0),w(lqi0),
<      .  w(lsj),w(lsk),w(lsi),w(lbcj),w(lbck),w(lbci),
<      .  w(lxtbj),w(lxtbk),w(lxtbi),w(latbj),w(latbk),w(latbi),
<      .  ista,iend,jsta,jend,ksta,kend,2,w(lxib),w(ltj0),w(ltk0),w(lti0),
<      .  w(lsnk0),w(lvis),w(lvj0),w(lvk0),w(lvi0),mdim,ndim,w(ldata),
<      .  filname,iuns,ibcinfo(nbl,nseg,1,2),w(lsni0),w(lsnk0),w(lsni0),
<      .  ntime,w(lnbl),w(lxkb),w(lnbl),nou,bou,nbuf,ibufdim,myid)
< c
975,983d922
<       if (jbcinfo(nbl,nseg,1,1).eq.2016)
<      .  call bc2016(jdim,kdim,idim,w(lq),w(lqj0),w(lqk0),w(lqi0),
<      .  w(lsj),w(lsk),w(lsi),w(lbcj),w(lbck),w(lbci),
<      .  w(lxtbj),w(lxtbk),w(lxtbi),w(latbj),w(latbk),w(latbi),
<      .  ista,iend,jsta,jend,ksta,kend,3,w(lxib),w(ltj0),w(ltk0),w(lti0),
<      .  w(lsnk0),w(lvis),w(lvj0),w(lvk0),w(lvi0),mdim,ndim,w(ldata),
<      .  filname,iuns,jbcinfo(nbl,nseg,1,1),w(lsni0),w(lsnk0),w(lsni0),
<      .  ntime,w(lnbl),w(lxkb),w(lnbl),nou,bou,nbuf,ibufdim,myid)
< c
1178,1186d1116
<       if (jbcinfo(nbl,nseg,1,2).eq.2016)
<      .  call bc2016(jdim,kdim,idim,w(lq),w(lqj0),w(lqk0),w(lqi0),
<      .  w(lsj),w(lsk),w(lsi),w(lbcj),w(lbck),w(lbci),
<      .  w(lxtbj),w(lxtbk),w(lxtbi),w(latbj),w(latbk),w(latbi),
<      .  ista,iend,jsta,jend,ksta,kend,4,w(lxib),w(ltj0),w(ltk0),w(lti0),
<      .  w(lsnk0),w(lvis),w(lvj0),w(lvk0),w(lvi0),mdim,ndim,w(ldata),
<      .  filname,iuns,jbcinfo(nbl,nseg,1,2),w(lsni0),w(lsnk0),w(lsni0),
<      .  ntime,w(lnbl),w(lxkb),w(lnbl),nou,bou,nbuf,ibufdim,myid)
< c
1381,1389d1310
<       if (kbcinfo(nbl,nseg,1,1).eq.2016)
<      .  call bc2016(jdim,kdim,idim,w(lq),w(lqj0),w(lqk0),w(lqi0),
<      .  w(lsj),w(lsk),w(lsi),w(lbcj),w(lbck),w(lbci),
<      .  w(lxtbj),w(lxtbk),w(lxtbi),w(latbj),w(latbk),w(latbi),
<      .  ista,iend,jsta,jend,ksta,kend,5,w(lxib),w(ltj0),w(ltk0),w(lti0),
<      .  w(lsnk0),w(lvis),w(lvj0),w(lvk0),w(lvi0),mdim,ndim,w(ldata),
<      .  filname,iuns,kbcinfo(nbl,nseg,1,1),w(lsni0),w(lsnk0),w(lsni0),
<      .  ntime,w(lnbl),w(lxkb),w(lnbl),nou,bou,nbuf,ibufdim,myid)
< c
1584,1592d1504
<       if (kbcinfo(nbl,nseg,1,2).eq.2016)
<      .  call bc2016(jdim,kdim,idim,w(lq),w(lqj0),w(lqk0),w(lqi0),
<      .  w(lsj),w(lsk),w(lsi),w(lbcj),w(lbck),w(lbci),
<      .  w(lxtbj),w(lxtbk),w(lxtbi),w(latbj),w(latbk),w(latbi),
<      .  ista,iend,jsta,jend,ksta,kend,6,w(lxib),w(ltj0),w(ltk0),w(lti0),
<      .  w(lsnk0),w(lvis),w(lvj0),w(lvk0),w(lvi0),mdim,ndim,w(ldata),
<      .  filname,iuns,kbcinfo(nbl,nseg,1,2),w(lsni0),w(lsnk0),w(lsni0),
<      .  ntime,w(lnbl),w(lxkb),w(lnbl),nou,bou,nbuf,ibufdim,myid)
< c
Index: source/cfl3d/libs/bc2004.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/bc2004.F,v
retrieving revision 1.6
retrieving revision 1.4
diff -r1.6 -r1.4
8c8
< c     $Id: bc2004.F,v 1.6 2005/09/16 12:52:51 rumsey Exp $
---
> c     $Id: bc2004.F,v 1.4 2003/05/15 20:25:06 rumsey Exp $
251,252c251,252
<           tj0(k,i,1,2) = 2.*tj0(k,i,1,1)-tursav(1,k,i,1)
<           tj0(k,i,2,2) = 2.*tj0(k,i,2,1)-tursav(1,k,i,2)
---
>           tj0(k,i,1,2) = 0.
>           tj0(k,i,2,2) = 0.
281,291d280
<           tj0(k,i,1,2) = 2.*tj0(k,i,1,1)-tursav(1,k,i,1)
<           tj0(k,i,2,2) = 2.*tj0(k,i,2,1)-tursav(1,k,i,2)
<  902    continue
<         else if(ivmx.eq.15) then
<         do i=ista,iend1
<         do k=ksta,kend1
<           tt=gamma*q(j,k,i,5)/q(j,k,i,1)
<           fnu=c2bp*tt*sqrt(tt)/(c2b+tt)
<           dkdy=0.5*(tursav(j,k,i,2)+tursav(j+1,k,i,2))/3.
<           tj0(k,i,1,1) = 2.0*dkdy/(re*smin(j,k,i))**2 - tursav(j,k,i,1)
<           tj0(k,i,2,1) = -tursav(j,k,i,2)
294,295c283
<         enddo
<         enddo
---
>  902    continue
305,306c293,294
<           tj0(k,i,1,2) = 2.*tj0(k,i,1,1)-tursav(1,k,i,1)
<           tj0(k,i,2,2) = 2.*tj0(k,i,2,1)-tursav(1,k,i,2)
---
>           tj0(k,i,1,2) = 0.
>           tj0(k,i,2,2) = 0.
464,465c452,453
<           tj0(k,i,1,4) = 2.*tj0(k,i,1,3)-tursav(jdim-1,k,i,1)
<           tj0(k,i,2,4) = 2.*tj0(k,i,2,3)-tursav(jdim-1,k,i,2)
---
>           tj0(k,i,1,4) = 0.
>           tj0(k,i,2,4) = 0.
494,504d481
<           tj0(k,i,1,4) = 2.*tj0(k,i,1,3)-tursav(jdim-1,k,i,1)
<           tj0(k,i,2,4) = 2.*tj0(k,i,2,3)-tursav(jdim-1,k,i,2)
<  812    continue
<         else if(ivmx.eq.15) then 
<         do i=ista,iend1
<         do k=ksta,kend1
<           tt=gamma*q(j,k,i,5)/q(j,k,i,1)
<           fnu=c2bp*tt*sqrt(tt)/(c2b+tt)
<           dkdy=0.5*(tursav(j,k,i,2)+tursav(j-1,k,i,2))/3.
<           tj0(k,i,1,3) = 2.0*dkdy/(re*smin(j,k,i))**2 - tursav(j,k,i,1)
<           tj0(k,i,2,3) = -tursav(j,k,i,2)
507,508c484
<         enddo
<         enddo
---
>  812    continue
518,519c494,495
<           tj0(k,i,1,4) = 2.*tj0(k,i,1,3)-tursav(jdim-1,k,i,1)
<           tj0(k,i,2,4) = 2.*tj0(k,i,2,3)-tursav(jdim-1,k,i,2)
---
>           tj0(k,i,1,4) = 0.
>           tj0(k,i,2,4) = 0.
677,678c653,654
<           tk0(j,i,1,2) = 2.*tk0(j,i,1,1)-tursav(j,1,i,1)
<           tk0(j,i,2,2) = 2.*tk0(j,i,2,1)-tursav(j,1,i,2)
---
>           tk0(j,i,1,2) = 0.
>           tk0(j,i,2,2) = 0.
707,717d682
<           tk0(j,i,1,2) = 2.*tk0(j,i,1,1)-tursav(j,1,i,1)
<           tk0(j,i,2,2) = 2.*tk0(j,i,2,1)-tursav(j,1,i,2)
<  732    continue
<         else if(ivmx.eq.15) then
<         do i=ista,iend1
<         do j=jsta,jend1
<           tt=gamma*q(j,k,i,5)/q(j,k,i,1)
<           fnu=c2bp*tt*sqrt(tt)/(c2b+tt)
<           dkdy=0.5*(tursav(j,k,i,2)+tursav(j,k+1,i,2))/3.
<           tk0(j,i,1,1) = 2.0*dkdy/(re*smin(j,k,i))**2 - tursav(j,k,i,1)
<           tk0(j,i,2,1) = -tursav(j,k,i,2)
720,721c685
<         enddo
<         enddo
---
>  732    continue
731,732c695,696
<           tk0(j,i,1,2) = 2.*tk0(j,i,1,1)-tursav(j,1,i,1)
<           tk0(j,i,2,2) = 2.*tk0(j,i,2,1)-tursav(j,1,i,2)
---
>           tk0(j,i,1,2) = 0.
>           tk0(j,i,2,2) = 0.
890,891c854,855
<           tk0(j,i,1,4) = 2.*tk0(j,i,1,3)-tursav(j,kdim-1,i,1)
<           tk0(j,i,2,4) = 2.*tk0(j,i,2,3)-tursav(j,kdim-1,i,2)
---
>           tk0(j,i,1,4) = 0.
>           tk0(j,i,2,4) = 0.
920,930d883
<           tk0(j,i,1,4) = 2.*tk0(j,i,1,3)-tursav(j,kdim-1,i,1)
<           tk0(j,i,2,4) = 2.*tk0(j,i,2,3)-tursav(j,kdim-1,i,2)
<  492    continue
<         else if(ivmx.eq.15) then
<         do i=ista,iend1
<         do j=jsta,jend1
<           tt=gamma*q(j,k,i,5)/q(j,k,i,1)
<           fnu=c2bp*tt*sqrt(tt)/(c2b+tt)
<           dkdy=0.5*(tursav(j,k,i,2)+tursav(j,k-1,i,2))/3.
<           tk0(j,i,1,3) = 2.0*dkdy/(re*smin(j,k,i))**2 - tursav(j,k,i,1)
<           tk0(j,i,2,3) = -tursav(j,k,i,2)
933,934c886
<         enddo
<         enddo
---
>  492    continue
944,945c896,897
<           tk0(j,i,1,4) = 2.*tk0(j,i,1,3)-tursav(j,kdim-1,i,1)
<           tk0(j,i,2,4) = 2.*tk0(j,i,2,3)-tursav(j,kdim-1,i,2)
---
>           tk0(j,i,1,4) = 0.
>           tk0(j,i,2,4) = 0.
1103,1104c1055,1056
<           ti0(j,k,1,2) = 2.*ti0(j,k,1,1)-tursav(j,k,1,1)
<           ti0(j,k,2,2) = 2.*ti0(j,k,2,1)-tursav(j,k,1,2)
---
>           ti0(j,k,1,2) = 0.
>           ti0(j,k,2,2) = 0.
1133,1143d1084
<           ti0(j,k,1,2) = 2.*ti0(j,k,1,1)-tursav(j,k,1,1)
<           ti0(j,k,2,2) = 2.*ti0(j,k,2,1)-tursav(j,k,1,2)
<  652    continue
<         else if(ivmx.eq.15) then
<         do k=ksta,kend1
<         do j=jsta,jend1
<           tt=gamma*q(j,k,i,5)/q(j,k,i,1)
<           fnu=c2bp*tt*sqrt(tt)/(c2b+tt)
<           dkdy=0.5*(tursav(j,k,i,2)+tursav(j,k,i+1,2))/3.
<           ti0(j,k,1,1) = 2.0*dkdy/(re*smin(j,k,i))**2 - tursav(j,k,i,1)
<           ti0(j,k,2,1) = -tursav(j,k,i,2)
1146,1147c1087
<         enddo
<         enddo
---
>  652    continue
1157,1158c1097,1098
<           ti0(j,k,1,2) = 2.*ti0(j,k,1,1)-tursav(j,k,1,1)
<           ti0(j,k,2,2) = 2.*ti0(j,k,2,1)-tursav(j,k,1,2)
---
>           ti0(j,k,1,2) = 0.
>           ti0(j,k,2,2) = 0.
1316,1317c1256,1257
<           ti0(j,k,1,4) = 2.*ti0(j,k,1,3)-tursav(j,k,idim-1,1)
<           ti0(j,k,2,4) = 2.*ti0(j,k,2,3)-tursav(j,k,idim-1,2)
---
>           ti0(j,k,1,4) = 0.
>           ti0(j,k,2,4) = 0.
1346,1356d1285
<           ti0(j,k,1,4) = 2.*ti0(j,k,1,3)-tursav(j,k,idim-1,1)
<           ti0(j,k,2,4) = 2.*ti0(j,k,2,3)-tursav(j,k,idim-1,2)
<  632    continue
<         else if(ivmx.eq.15) then
<         do k=ksta,kend1
<         do j=jsta,jend1
<           tt=gamma*q(j,k,i,5)/q(j,k,i,1)
<           fnu=c2bp*tt*sqrt(tt)/(c2b+tt)
<           dkdy=0.5*(tursav(j,k,i,2)+tursav(j,k,i-1,2))/3.
<           ti0(j,k,1,3) = 2.0*dkdy/(re*smin(j,k,i))**2 - tursav(j,k,i,1)
<           ti0(j,k,2,3) = -tursav(j,k,i,2)
1359,1360c1288
<         enddo
<         enddo
---
>  632    continue
1370,1371c1298,1299
<           ti0(j,k,1,4) = 2.*ti0(j,k,1,3)-tursav(j,k,idim-1,1)
<           ti0(j,k,2,4) = 2.*ti0(j,k,2,3)-tursav(j,k,idim-1,2)
---
>           ti0(j,k,1,4) = 0.
>           ti0(j,k,2,4) = 0.
Index: source/cfl3d/libs/bc2005.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/bc2005.F,v
retrieving revision 1.6
retrieving revision 1.5
diff -r1.6 -r1.5
8c8
< c     $Id: bc2005.F,v 1.6 2004/09/24 18:23:52 rumsey Exp $
---
> c     $Id: bc2005.F,v 1.5 2003/05/15 20:25:06 rumsey Exp $
181d180
<         jdm2=max(jdimp-2,1)
186,187c185,186
<              tj0(k,i,1,2) = tp(jdm2,k,i,1)
<              tj0(k,i,2,2) = tp(jdm2,k,i,2)
---
>              tj0(k,i,1,2) = 0.
>              tj0(k,i,2,2) = 0.
262d260
<         jdp2=min(2,jdimp-1)
267,268c265,266
<              tj0(k,i,1,4) = tp(jdp2,k,i,1)
<              tj0(k,i,2,4) = tp(jdp2,k,i,2)
---
>              tj0(k,i,1,4) = 0.
>              tj0(k,i,2,4) = 0.
343d340
<         kdm2=max(kdimp-2,1)
348,349c345,346
<              tk0(j,i,1,2) = tp(j,kdm2,i,1)
<              tk0(j,i,2,2) = tp(j,kdm2,i,2)
---
>              tk0(j,i,1,2) = 0.
>              tk0(j,i,2,2) = 0.
424d420
<         kdp2=min(2,kdimp-1)
429,430c425,426
<              tk0(j,i,1,4) = tp(j,kdp2,i,1)
<              tk0(j,i,2,4) = tp(j,kdp2,i,2)
---
>              tk0(j,i,1,4) = 0.
>              tk0(j,i,2,4) = 0.
505d500
<         idm2=max(idimp-2,1)
510,511c505,506
<              ti0(j,k,1,2) = tp(j,k,idm2,1)
<              ti0(j,k,2,2) = tp(j,k,idm2,2)
---
>              ti0(j,k,1,2) = 0.
>              ti0(j,k,2,2) = 0.
586d580
<         idp2=min(2,idimp-1)
591,592c585,586
<              ti0(j,k,1,4) = tp(j,k,idp2,1)
<              ti0(j,k,2,4) = tp(j,k,idp2,2)
---
>              ti0(j,k,1,4) = 0.
>              ti0(j,k,2,4) = 0.
Index: source/cfl3d/libs/bc2006.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/bc2006.F,v
retrieving revision 1.6
retrieving revision 1.5
diff -r1.6 -r1.5
8c8
< c     $Id: bc2006.F,v 1.6 2004/08/12 13:20:15 biedron Exp $
---
> c     $Id: bc2006.F,v 1.5 2003/05/15 20:25:08 rumsey Exp $
1202c1202
<       bci(j,k,2) = 0.0
---
>       bci(j,k,1) = 0.0
Index: source/cfl3d/libs/bc_info.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/bc_info.F,v
retrieving revision 1.12
retrieving revision 1.9
diff -r1.12 -r1.9
12c12
< c     $Id: bc_info.F,v 1.12 2003/12/17 18:52:52 biedron Exp $
---
> c     $Id: bc_info.F,v 1.9 2003/05/15 20:25:10 rumsey Exp $
217,221d216
<       if (ibcinfo(nbl,nseg,1,1).eq.2016)
<      .  call out2016(jdim,kdim,idim,ista,iend,jsta,jend,ksta,kend,1,
<      .  nou,bou,nbuf,ibufdim,mdim,ndim,w(ldata),filname,myid,mblk2nd,
<      .  maxbl,5)
< c
372,376d366
<       if (ibcinfo(nbl,nseg,1,2).eq.2016)
<      .  call out2016(jdim,kdim,idim,ista,iend,jsta,jend,ksta,kend,2,
<      .  nou,bou,nbuf,ibufdim,mdim,ndim,w(ldata),filname,myid,mblk2nd,
<      .  maxbl,5)
< c
527,531d516
<       if (jbcinfo(nbl,nseg,1,1).eq.2016)
<      .  call out2016(jdim,kdim,idim,ista,iend,jsta,jend,ksta,kend,3,
<      .  nou,bou,nbuf,ibufdim,mdim,ndim,w(ldata),filname,myid,mblk2nd,
<      .  maxbl,5)
< c
682,686d666
<       if (jbcinfo(nbl,nseg,1,2).eq.2016)
<      .  call out2016(jdim,kdim,idim,ista,iend,jsta,jend,ksta,kend,4,
<      .  nou,bou,nbuf,ibufdim,mdim,ndim,w(ldata),filname,myid,mblk2nd,
<      .  maxbl,5)
< c
837,841d816
<       if (kbcinfo(nbl,nseg,1,1).eq.2016)
<      .  call out2016(jdim,kdim,idim,ista,iend,jsta,jend,ksta,kend,5,
<      .  nou,bou,nbuf,ibufdim,mdim,ndim,w(ldata),filname,myid,mblk2nd,
<      .  maxbl,5)
< c
992,996d966
<       if (kbcinfo(nbl,nseg,1,2).eq.2016)
<      .  call out2016(jdim,kdim,idim,ista,iend,jsta,jend,ksta,kend,6,
<      .  nou,bou,nbuf,ibufdim,mdim,ndim,w(ldata),filname,myid,mblk2nd,
<      .  maxbl,5)
< c
6561,7236d6530
<       subroutine out2016(jdim,kdim,idim,ista,iend,jsta,jend,ksta,kend,
<      .                  nface,nou,bou,nbuf,ibufdim,mdim,ndim,bcdata,
<      .                  filname,myid,mblk2nd,maxbl,iout)
< c
< #   ifdef CMPLX
<       implicit complex(a-h,o-z)
< #   endif
< c
<       character*120 bou(ibufdim,nbuf)
<       character*80 filname
< c
<       dimension nou(nbuf)
<       dimension bcdata(mdim,ndim,2,12),mblk2nd(maxbl)
< c
<       common /wallfun/ iwf(3)
<       common /info/ title(20),rkap(3),xmach,alpha,beta,dt,fmax,nit,ntt,
<      .        idiag(3),nitfo,iflagts,iflim(3),nres,levelb(5),mgflag,
<      .        iconsf,mseq,ncyc1(5),levelt(5),nitfo1(5),ngam,nsm(5),iipv
< c
<       jend1 = jend-1
<       kend1 = kend-1
<       iend1 = iend-1
< c
<       if (nface.eq.3) then
< c        check that the required auxiliary data has been set
<          iflg = 0
<          do 1 l=1,2+iout
<          do 1 ipp=1,2
<          do 1 i=ista,iend1
<          ii = i-ista+1
<          do 1 k=ksta,kend1
<          kk = k-ksta+1
<          if (real(bcdata(kk,ii,ipp,l)) .lt. -1.e10) iflg = 1
<          if ((real(bcdata(kk,ii,ipp,l)).ne.0.0).and.
<      +       (real(dt).lt.0.).and.(l.eq.3)) iflg = 2
<    1     continue
<          if (iflg.eq.1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  Stopping in bc2016:'
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  viscous wall data incorrectly set '
<             call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<          end if
<            if (iflg.eq.2) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)'  Stopping in bc2016:'
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)
<      +        '  unsteady jet not allowed with dt < 0'
<               call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<            end if
< 
<          if (filname.eq.'null') then
<             ctemp = bcdata(1,1,1,1)
<             cq    = bcdata(1,1,1,2)
<             cqu   = bcdata(1,1,1,3)
<             sjetx = bcdata(1,1,1,4)
<             sjety = bcdata(1,1,1,5)
<             sjetz = bcdata(1,1,1,6)
<             rfreq = bcdata(1,1,1,7)
<             if (real(ctemp) .gt. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1001)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1007) real(ctemp)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else if (ctemp .eq. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1001)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1009)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1001)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1010)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             end if
<          else
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1001)ista,iend,ksta,kend
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1011)
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1012) filname
<          end if
<          if (iwf(2) .eq. 1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),3001)
<          end if
<       end if
< c 
<       if (nface.eq.4) then
< c
< c        check that the required auxiliary data has been set
<          iflg = 0
<          do 2 l=1,2+iout
<          do 2 ipp=1,2
<          do 2 i=ista,iend1
<          ii = i-ista+1
<          do 2 k=ksta,kend1
<          kk = k-ksta+1
<          if (real(bcdata(kk,ii,ipp,l)) .lt. -1.e10) iflg = 1
<          if ((real(bcdata(kk,ii,ipp,l)).ne.0.0).and.
<      +       (real(dt).lt.0.).and.(l.eq.3)) iflg = 2
<    2     continue
<          if (iflg.eq.1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  Stopping in bc2016:'
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  viscous wall data incorrectly set '
<             call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<          end if
<            if (iflg.eq.2) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)'  Stopping in bc2016:'
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)
<      +        '  unsteady jet not allowed with dt < 0'
<               call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<            end if
< 
<          if (filname.eq.'null') then
<             ctemp = bcdata(1,1,1,1)
<             cq    = bcdata(1,1,1,2)
<             cqu   = bcdata(1,1,1,3)
<             sjetx = bcdata(1,1,1,4)
<             sjety = bcdata(1,1,1,5)
<             sjetz = bcdata(1,1,1,6)
<             rfreq = bcdata(1,1,1,7)
<             if (real(ctemp) .gt. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1002)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1007) real(ctemp)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else if (ctemp .eq. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1002)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1009)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1002)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1010)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             end if
<          else
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1002)ista,iend,ksta,kend
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1011)
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1012) filname
<          end if
<          if (iwf(2) .eq. 1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),3001)
<          end if
<       end if
< c 
<       if (nface.eq.5) then
< c
< c        check that the required auxiliary data has been set
<          iflg = 0
<          do 3 l=1,2+iout
<          do 3 ipp=1,2
<          do 3 i=ista,iend1
<          ii = i-ista+1
<          do 3 j=jsta,jend1
<          jj = j-jsta+1
<          if (real(bcdata(jj,ii,ipp,l)) .lt. -1.e10) iflg = 1
<          if ((real(bcdata(jj,ii,ipp,l)).ne.0.0).and.
<      +       (real(dt).lt.0.).and.(l.eq.3)) iflg = 2
<    3     continue
<          if (iflg.eq.1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  Stopping in bc2016:'
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  viscous wall data incorrectly set '
<             call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<          end if
<            if (iflg.eq.2) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)'  Stopping in bc2016:'
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)
<      +        '  unsteady jet not allowed with dt < 0'
<               call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<            end if
< 
<          if (filname.eq.'null') then
<             ctemp = bcdata(1,1,1,1)
<             cq    = bcdata(1,1,1,2)
<             cqu   = bcdata(1,1,1,3)
<             sjetx = bcdata(1,1,1,4)
<             sjety = bcdata(1,1,1,5)
<             sjetz = bcdata(1,1,1,6)
<             rfreq = bcdata(1,1,1,7)
<             if (real(ctemp) .gt. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1003)ista,iend,jsta,jend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1007) real(ctemp)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else if (ctemp .eq. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1003)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1009)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1003)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1010)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             end if
<          else
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1003)ista,iend,jsta,jend
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1011)
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1012) filname
<          end if
<          if (iwf(3) .eq. 1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),3002)
<          end if
<       end if
< c 
<       if (nface.eq.6) then
< c
< c        check that the required auxiliary data has been set
<          iflg = 0
<          do 4 l=1,2+iout
<          do 4 ipp=1,2
<          do 4 i=ista,iend1
<          ii = i-ista+1
<          do 4 j=jsta,jend1
<          jj = j-jsta+1
<          if (real(bcdata(jj,ii,ipp,l)) .lt. -1.e10) iflg = 1
<          if ((real(bcdata(jj,ii,ipp,l)).ne.0.0).and.
<      +       (real(dt).lt.0.).and.(l.eq.3)) iflg = 2
<    4     continue
<          if (iflg.eq.1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  Stopping in bc2016:'
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  viscous wall data incorrectly set '
<             call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<          end if
<            if (iflg.eq.2) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)'  Stopping in bc2016:'
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)
<      +        '  unsteady jet not allowed with dt < 0'
<               call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<            end if
< 
<          if (filname.eq.'null') then
<             ctemp = bcdata(1,1,1,1)
<             cq    = bcdata(1,1,1,2)
<             cqu   = bcdata(1,1,1,3)
<             sjetx = bcdata(1,1,1,4)
<             sjety = bcdata(1,1,1,5)
<             sjetz = bcdata(1,1,1,6)
<             rfreq = bcdata(1,1,1,7)
<             if (real(ctemp) .gt. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1004)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1007) real(ctemp)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else if (ctemp .eq. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1004)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1009)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1004)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1010)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             end if
<          else
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1004)ista,iend,jsta,jend
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1011)
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1012) filname
<          end if
<          if (iwf(3) .eq. 1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),3002)
<          end if
<       end if
< c 
<       if (nface.eq.1) then
< c
< c        check that the required auxiliary data has been set
<          iflg = 0
<          do 5 l=1,2+iout
<          do 5 ipp=1,2
<          do 5 k=ksta,kend1
<          kk = k-ksta+1
<          do 5 j=jsta,jend1
<          jj = j-jsta+1
<          if (real(bcdata(jj,kk,ipp,l)) .lt. -1.e10) iflg = 1
<          if ((real(bcdata(jj,kk,ipp,l)).ne.0.0).and.
<      +       (real(dt).lt.0.).and.(l.eq.3)) iflg = 2
<    5     continue
<          if (iflg.eq.1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  Stopping in bc2016:'
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  viscous wall data incorrectly set '
<             call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<          end if
<            if (iflg.eq.2) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)'  Stopping in bc2016:'
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)
<      +        '  unsteady jet not allowed with dt < 0'
<               call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<            end if
< 
<          if (filname.eq.'null') then
<             ctemp = bcdata(1,1,1,1)
<             cq    = bcdata(1,1,1,2)
<             cqu   = bcdata(1,1,1,3)
<             sjetx = bcdata(1,1,1,4)
<             sjety = bcdata(1,1,1,5)
<             sjetz = bcdata(1,1,1,6)
<             rfreq = bcdata(1,1,1,7)
<             if (real(ctemp) .gt. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1005)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1007) real(ctemp)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else if (ctemp .eq. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1005)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1009)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1005)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1010)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             end if
<          else
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1005)jsta,jend,ksta,kend
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1011)
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1012) filname
<          end if
<          if (iwf(1) .eq. 1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),3003)
<          end if
<       end if
< c 
<       if (nface.eq.2) then
< c
< c        check that the required auxiliary data has been set
<          iflg = 0
<          do 6 l=1,2+iout
<          do 6 ipp=1,2
<          do 6 k=ksta,kend1
<          kk = k-ksta+1
<          do 6 j=jsta,jend1
<          jj = j-jsta+1
<          if (real(bcdata(jj,kk,ipp,l)) .lt. -1.e10) iflg = 1
<          if ((real(bcdata(jj,kk,ipp,l)).ne.0.0).and.
<      +       (real(dt).lt.0.).and.(l.eq.3)) iflg = 2
<    6     continue
<          if (iflg.eq.1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  Stopping in bc2016:'
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),*)'  viscous wall data incorrectly set '
<             call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<          end if
<            if (iflg.eq.2) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)'  Stopping in bc2016:'
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),*)
<      +        '  unsteady jet not allowed with dt < 0'
<               call termn8(myid,-1,ibufdim,nbuf,bou,nou)
<            end if
< 
<          if (filname.eq.'null') then
<             ctemp = bcdata(1,1,1,1)
<             cq    = bcdata(1,1,1,2)
<             cqu   = bcdata(1,1,1,3)
<             sjetx = bcdata(1,1,1,4)
<             sjety = bcdata(1,1,1,5)
<             sjetz = bcdata(1,1,1,6)
<             rfreq = bcdata(1,1,1,7)
<             if (real(ctemp) .gt. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1006)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1007) real(ctemp)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else if (ctemp .eq. 0.) then
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1006)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1009)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             else
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1006)ista,iend,ksta,kend
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1010)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1008) real(cq)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1013) real(cqu)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1014) real(sjetx)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1015) real(sjety)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1016) real(sjetz)
<               nou(1) = min(nou(1)+1,ibufdim)
<               write(bou(nou(1),1),1017) real(rfreq)
<             end if
<          else
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1006)jsta,jend,ksta,kend
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1011)
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),1012) filname
<          end if
<          if (iwf(1) .eq. 1) then
<             nou(1) = min(nou(1)+1,ibufdim)
<             write(bou(nou(1),1),3003)
<          end if
<       end if
< c
<  1001 format(' ','  j=   1  viscous wall                   type 2016',
<      .       '  i=',i3,',',i3,'  k=',i3,',',i3)
<  1002 format(' ','  j=jdim  viscous wall                   type 2016',
<      .       '  i=',i3,',',i3,'  k=',i3,',',i3)
<  1003 format(' ','  k=   1  viscous wall                   type 2016',
<      .       '  i=',i3,',',i3,'  j=',i3,',',i3)
<  1004 format(' ','  k=kdim  viscous wall                   type 2016',
<      .       '  i=',i3,',',i3,'  j=',i3,',',i3)
<  1005 format(' ','  i=   1  viscous wall                   type 2016',
<      .       '  j=',i3,',',i3,'  k=',i3,',',i3)
<  1006 format(' ','  i=idim  viscous wall                   type 2016',
<      .       '  j=',i3,',',i3,'  k=',i3,',',i3)
<  1007 format(11x,'Tw/Tinf    = ',f8.4)
<  1008 format(11x,'cq         = ',f8.4)
<  1009 format(11x,'Tw/Tinf    = adiabatic wall')
<  1010 format(11x,'Tw/Tinf    = stagnation')
<  1011 format(11x,'Twtype, C_q set from file:')
<  1012 format('           ',a60)
<  1013 format(11x,'cqu        = ',f8.4)
<  1014 format(11x,'sjetx      = ',f8.4)
<  1015 format(11x,'sjetx      = ',f8.4)
<  1016 format(11x,'sjetx      = ',f8.4)
<  1017 format(11x,'rfreq      = ',f8.4)
< c
<  3001 format(' ',10x,'Wall function employed in j-direction')
<  3002 format(' ',10x,'Wall function employed in k-direction')
<  3003 format(' ',10x,'Wall function employed in i-direction')
< c
<       return
<       end
Index: source/cfl3d/libs/blomax.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/blomax.F,v
retrieving revision 1.5
retrieving revision 1.4
diff -r1.5 -r1.4
8c8
< c     $Id: blomax.F,v 1.5 2005/05/20 18:43:43 rumsey Exp $
---
> c     $Id: blomax.F,v 1.4 2002/09/30 16:13:21 rumsey Exp $
74,75c74
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
Index: source/cfl3d/libs/cellvol.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/cellvol.F,v
retrieving revision 1.4
retrieving revision 1.2
diff -r1.4 -r1.2
4c4
< c     $Id: cellvol.F,v 1.4 2005/08/17 14:09:56 rebart Exp $
---
> c     $Id: cellvol.F,v 1.2 2001/05/25 20:00:03 biedron Exp $
23,24c23
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
---
>       common /deformz/ beta1,ismooth,negvol
Index: source/cfl3d/libs/cgnstools.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/cgnstools.F,v
retrieving revision 1.13
retrieving revision 1.11
diff -r1.13 -r1.11
2c2
< c     $Id: cgnstools.F,v 1.13 2005/10/05 19:41:02 rumsey Exp $
---
> c     $Id: cgnstools.F,v 1.11 2003/09/08 13:50:42 rumsey Exp $
35,36c35,36
<         write(901,'('' nsols='',i5,''.  Expecting 1.'')') nsols
<         write(901,'('' Will read LAST one.'')')
---
>         write(11,'('' nsols='',i5,''.  Expecting 1.'')') nsols
>         write(11,'('' Will read LAST one.'')')
39c39
<         write(901,'('' solution node exists.  Reading it...'')')
---
>         write(11,'('' solution node exists.  Reading it...'')')
42c42
<         write(901,'('' Error.  Solution node does not exist!'')')
---
>         write(11,'('' Error.  Solution node does not exist!'')')
51c51
<         write(901,'('' GridLocation must be CellCenter!  Currently:'',
---
>         write(11,'('' GridLocation must be CellCenter!  Currently:'',
55c55
<       write(901,'('' cgns read solution of name:  '',a32)') solname
---
>       write(11,'('' cgns read solution of name:  '',a32)') solname
63c63
<         write(901,'('' rind info does not exist.  setting to zero'')')
---
>         write(11,'('' rind info does not exist.  setting to zero'')')
71c71
<           write(901,'('' error... currently cannot handle rind'',
---
>           write(11,'('' error... currently cannot handle rind'',
79c79
<         write(901,'('' error... currently must have same rind'',
---
>         write(11,'('' error... currently must have same rind'',
81c81
<         write(901,'('' irinddata='',6i3)') irinddata(1),
---
>         write(11,'('' irinddata='',6i3)') irinddata(1),
145,146c145,146
<         write(901,'('' Error, zone must be Structured type.'')')
<         write(901,'(''   Currently, it is '',a32)')
---
>         write(11,'('' Error, zone must be Structured type.'')')
>         write(11,'(''   Currently, it is '',a32)')
154c154
<         write(901,'('' Grid index inconsistencies:  isize='',3i5,
---
>         write(11,'('' Grid index inconsistencies:  isize='',3i5,
157c157
<         write(901,'('' Be sure to order the zones alphabetically'',
---
>         write(11,'('' Be sure to order the zones alphabetically'',
165c165
<         write(901,'('' ncoords='',i5,''.  Expecting 3.'')') ncoords
---
>         write(11,'('' ncoords='',i5,''.  Expecting 3.'')') ncoords
178c178
<           write(901,'('' coordname of '',a32,'' unrecognized.'')') 
---
>           write(11,'('' coordname of '',a32,'' unrecognized.'')') 
180c180
<           write(901,'('' Looking for CoordinateX, CoordinateY, and'',
---
>           write(11,'('' Looking for CoordinateX, CoordinateY, and'',
324c324
<       write(901,'(/,'' Accessing cgns database... (must'',
---
>       write(11,'(/,'' Accessing cgns database... (must'',
328,329c328,329
<         write(901,'('' Error opening cgns file'')')
<         write(901,'('' Make sure the file on 1st line of input IS'',
---
>         write(11,'('' Error opening cgns file'')')
>         write(11,'('' Make sure the file on 1st line of input IS'',
333,334c333,334
<       write(901,'(/,'' Opening cgns database '',a32)') cgnsdesired
<       write(901,'(''   Note: if restarting from a cgns file created'',
---
>       write(11,'(/,'' Opening cgns database '',a32)') cgnsdesired
>       write(11,'(''   Note: if restarting from a cgns file created'',
336c336
<       write(901,'(''   it will not work if the old case was (1) second'',
---
>       write(11,'(''   it will not work if the old case was (1) second'',
338c338
<       write(901,'(''   (2) moving or deforming grid, or (3) ialph>0.'',
---
>       write(11,'(''   (2) moving or deforming grid, or (3) ialph>0.'',
340c340
<       write(901,'(''   changes have been made in how variables are'',
---
>       write(11,'(''   changes have been made in how variables are'',
346c346
<       write(901,'('' Found ''i5,'' base(s) in cgns file: '',a32)') 
---
>       write(11,'('' Found ''i5,'' base(s) in cgns file: '',a32)') 
355c355
<           write(901,'('' Error, celldim MUST be same as physdim'',
---
>           write(11,'('' Error, celldim MUST be same as physdim'',
366c366
<         write(901,'('' Desired base name '',a32,'' not found'')')
---
>         write(11,'('' Desired base name '',a32,'' not found'')')
368c368
<         write(901,'('' Available bases found are:'')')
---
>         write(11,'('' Available bases found are:'')')
372c372
<           write(901,'(a32)') basename
---
>           write(11,'(a32)') basename
378c378
<         write(901,'('' Index dimension wrong in base'',a32)')
---
>         write(11,'('' Index dimension wrong in base'',a32)')
380c380
<         write(901,'('' index_dim='',i5,''.  Wanted = '',i5)')
---
>         write(11,'('' index_dim='',i5,''.  Wanted = '',i5)')
388c388
<       write(901,'('' Found ''i5,'' zone(s) in basename: '',a32)') nzones,
---
>       write(11,'('' Found ''i5,'' zone(s) in basename: '',a32)') nzones,
421,422c421,422
<         write(901,'('' Error opening cgns file'')')
<         write(901,'('' Make sure the file on 1st line of input IS'',
---
>         write(11,'('' Error opening cgns file'')')
>         write(11,'('' Make sure the file on 1st line of input IS'',
437c437
<           write(901,'('' Error, celldim MUST be same as physdim'',
---
>           write(11,'('' Error, celldim MUST be same as physdim'',
448c448
<         write(901,'('' Desired base name '',a32,'' not found'')')
---
>         write(11,'('' Desired base name '',a32,'' not found'')')
450c450
<         write(901,'('' Available bases found are:'')')
---
>         write(11,'('' Available bases found are:'')')
454c454
<           write(901,'(a32)') basename
---
>           write(11,'(a32)') basename
460c460
<         write(901,'('' Index dimension wrong in base'',a32)')
---
>         write(11,'('' Index dimension wrong in base'',a32)')
462c462
<         write(901,'('' index_dim='',i5,''.  Wanted = '',i5)')
---
>         write(11,'('' index_dim='',i5,''.  Wanted = '',i5)')
540,541c540,541
<       write(901,'('' cgns writing to <<FlowSolution>> node'')')
<       write(901,'(''  ...any flow solution node of any other name'',
---
>       write(11,'('' cgns writing to <<FlowSolution>> node'')')
>       write(11,'(''  ...any flow solution node of any other name'',
543c543
<       write(901,'(''  ...if a FlowSolution node already exists, it'',
---
>       write(11,'(''  ...if a FlowSolution node already exists, it'',
567c567
<         write(901,'('' Error.  Desired grid level of soln not'',
---
>         write(11,'('' Error.  Desired grid level of soln not'',
722c722
<         write(901,'('' Need to increase numfield parameter'',
---
>         write(11,'('' Need to increase numfield parameter'',
748c748
<           write(901,'('' Cannot find solution of name '',a32)') 
---
>           write(11,'('' Cannot find solution of name '',a32)') 
750c750
<           write(901,'(''  for conservative... try primitive instead'')')
---
>           write(11,'(''   for conservative... try primitive instead'')')
769c769
<           write(901,'('' Cannot find solution of name '',a32)')
---
>           write(11,'('' Cannot find solution of name '',a32)')
771c771
<           write(901,'(''   for primitive either...'')')
---
>           write(11,'(''   for primitive either...'')')
794c794
<         write(901,'('' Error.  Desired grid level of soln not'',
---
>         write(11,'('' Error.  Desired grid level of soln not'',
833c833
<       write(901,'('' Information node not found.  Defaulting to read'',
---
>       write(11,'('' Information node not found.  Defaulting to read'',
836c836
<       write(901,'('' Information node not found.  Defaulting to read'',
---
>       write(11,'('' Information node not found.  Defaulting to read'',
839c839
<       write(901,'('' Information node not found.  Defaulting to read'',
---
>       write(11,'('' Information node not found.  Defaulting to read'',
842c842
<       write(901,'('' Information node not found.  Defaulting to read'',
---
>       write(11,'('' Information node not found.  Defaulting to read'',
849c849
<         write(901,'('' Expecting read on level '',i5,'' of grid...'',
---
>         write(11,'('' Expecting read on level '',i5,'' of grid...'',
852c852
<         write(901,'('' Expecting read on level '',i5,'' of grid...'',
---
>         write(11,'('' Expecting read on level '',i5,'' of grid...'',
855c855
<         write(901,'('' Expecting read on level '',i5,'' of grid...'',
---
>         write(11,'('' Expecting read on level '',i5,'' of grid...'',
858c858
<         write(901,'('' Expecting read on level '',i5,'' of grid...'',
---
>         write(11,'('' Expecting read on level '',i5,'' of grid...'',
1056c1056
<         write(901,'('' Error.  Desired grid level of soln not'',
---
>         write(11,'('' Error.  Desired grid level of soln not'',
1062c1062
<          write(901,'(''   writing vist3d data to cgns file'',
---
>          write(11,'(''   writing vist3d data to cgns file'',
1086c1086
<          write(901,'(''   writing field eqn turb quantity'',
---
>          write(11,'(''   writing field eqn turb quantity'',
1102c1102
<          write(901,'(''   writing B-B field eqn turb info'',
---
>          write(11,'(''   writing B-B field eqn turb info'',
1170c1170
<          write(901,'(''   writing S-A field eqn turb info'',
---
>          write(11,'(''   writing S-A field eqn turb info'',
1199c1199
<          write(901,'(''   writing k-omega field eqn turb info'',
---
>          write(11,'(''   writing k-omega field eqn turb info'',
1238c1238
<          write(901,'(''   writing k-epsilon field eqn turb info'',
---
>          write(11,'(''   writing k-epsilon field eqn turb info'',
1273,1308d1272
<       if (ivisc(1).eq.15.or. ivisc(2).eq.15.or. ivisc(3).eq.15) then
<          write(901,'(''   writing k-enstrophy field eqn turb info'',
<      .              '' to cgns file'',
<      +     '' (SIDS-consistent-normalization)'')')
< c        Enstrophy:
<          call reordsln(nfac,i2d,idima,jdima,kdima,idim,jdim,kdim,
<      +     tursav,wk,wk,wk,ti0,tj0,tk0,2,1,1,wk)
< c        put in SIDS-like-"consistent normalization"
<          do i=i2d,idima-i2d
<          do j=0,jdima
<          do k=0,kdima
<            wk(i,j,k)=wk(i,j,k)*reue/xmach
<          enddo
<          enddo
<          enddo
<          if (idouble .eq. 1) then
<          call cg_field_write_f(iccg, ibase, igrid, nsoluse, RealDouble,
<      +                   'TurbulentEnstrophy', wk, ifindex, ier)
<          else
<          call cg_field_write_f(iccg, ibase, igrid, nsoluse, RealSingle,
<      +                   'TurbulentEnstrophy', wk, ifindex, ier)
<          end if
<          if (ier .ne. 0) call cg_error_exit_f
< c        K:
<          call reordsln(nfac,i2d,idima,jdima,kdima,idim,jdim,kdim,
<      +     tursav,wk,wk,wk,ti0,tj0,tk0,2,2,1,wk)
<          if (idouble .eq. 1) then
<          call cg_field_write_f(iccg, ibase, igrid, nsoluse, RealDouble,
<      +                   'TurbulentEnergyKinetic', wk, ifindex, ier)
<          else
<          call cg_field_write_f(iccg, ibase, igrid, nsoluse, RealSingle,
<      +                   'TurbulentEnergyKinetic', wk, ifindex, ier)
<          end if
<          if (ier .ne. 0) call cg_error_exit_f
<       end if
< c
1313c1277
<          write(901,'(''   writing EASM variable cmu info'',
---
>          write(11,'(''   writing EASM variable cmu info'',
1431c1395
<         write(901,'('' Error.  Desired grid level of soln not'',
---
>         write(11,'('' Error.  Desired grid level of soln not'',
1654,1688d1617
< c   Read k-enstrophy info
<       if (ivmxold .eq.15 .and. iread .eq. 1) then
<       solname='TurbulentEnstrophy'
<       if (idouble .eq. 1) then
<       call cg_field_read_f(iccg, ibase, igrid, nsoluse, solname,
<      +                     RealDouble, irmin, irmax, wk, ier)
<       else
<       call cg_field_read_f(iccg, ibase, igrid, nsoluse, solname,
<      +                     RealSingle, irmin, irmax, wk, ier)
<       end if
<       if (ier .ne. 0) call cg_error_exit_f
< c   Change from SIDS-"consistent-normalization" back to CFL3D-type
<       do i=1,idima-2*irind+1
<       do j=1,jdima-2*jrind+1
<       do k=1,kdima-2*krind+1
<         wk(i,j,k)=wk(i,j,k)*xmach/reue
<       enddo
<       enddo
<       enddo
<       call reorderq(idima,jdima,kdima,idim,jdim,kdim,nfac,
<      +    nfaci,wk,irind,jrind,krind,tursav(1,1,1,1))
< c
<       solname='TurbulentEnergyKinetic'
<       if (idouble .eq. 1) then
<       call cg_field_read_f(iccg, ibase, igrid, nsoluse, solname,
<      +                     RealDouble, irmin, irmax, wk, ier)
<       else
<       call cg_field_read_f(iccg, ibase, igrid, nsoluse, solname,
<      +                     RealSingle, irmin, irmax, wk, ier)
<       end if
<       if (ier .ne. 0) call cg_error_exit_f
<       call reorderq(idima,jdima,kdima,idim,jdim,kdim,nfac,
<      +    nfaci,wk,irind,jrind,krind,tursav(1,1,1,2))
<       end if
< c
1776c1705
<             write(901,'('' Error, cgns 1-to-1 zonename not'',
---
>             write(11,'('' Error, cgns 1-to-1 zonename not'',
1815c1744
<             write(901,'('' 1-to-1 donor & reciever ranges do not'',
---
>             write(11,'('' 1-to-1 donor & reciever ranges do not'',
1817c1746
<             write(901,'(''    irange1='',6i6)') irange(1,1,n),
---
>             write(11,'(''    irange1='',6i6)') irange(1,1,n),
1820c1749
<             write(901,'(''    irange2='',6i6)') irange(2,1,n),
---
>             write(11,'(''    irange2='',6i6)') irange(2,1,n),
1829c1758
<             write(901,'('' directionality of transform wrong'',
---
>             write(11,'('' directionality of transform wrong'',
1831c1760
<             write(901,'(''    irange1='',6i6)') irange(1,1,n),
---
>             write(11,'(''    irange1='',6i6)') irange(1,1,n),
1834c1763
<             write(901,'(''    irange2='',6i6)') irange(2,1,n),
---
>             write(11,'(''    irange2='',6i6)') irange(2,1,n),
1837c1766
<             write(901,'(''    itransform='',3i5)') itransform(1,n),
---
>             write(11,'(''    itransform='',3i5)') itransform(1,n),
1906c1835
<           write(901,'('' Error.  Currently BCs must be set up as'',
---
>           write(11,'('' Error.  Currently BCs must be set up as'',
1996c1925
<         write(901,'('' given value of ifacedesired not allowed='',i5)')
---
>         write(11,'('' given value of ifacedesired not allowed='',i5)')
2042c1971
<           write(901,'('' Error.  Currently BCs must be set up as'',
---
>           write(11,'('' Error.  Currently BCs must be set up as'',
2075c2004
<               write(901,'('' BCtype '',i5,'' not implemented yet'')')
---
>               write(11,'('' BCtype '',i5,'' not implemented yet'')')
2115c2044
<               write(901,'('' BCtype '',i5,'' not implemented yet'')')
---
>               write(11,'('' BCtype '',i5,'' not implemented yet'')')
2179c2108
<       write(901,'('' Creating RSDMassRMS history node.'')')
---
>       write(11,'('' Creating RSDMassRMS history node.'')')
2188c2117
<       write(901,'('' Creating CoefLift history node.'')')
---
>       write(11,'('' Creating CoefLift history node.'')')
2197c2126
<       write(901,'('' Creating CoefDrag history node.'')')
---
>       write(11,'('' Creating CoefDrag history node.'')')
2206c2135
<       write(901,'('' Creating CoefPressureDrag history node.'')')
---
>       write(11,'('' Creating CoefPressureDrag history node.'')')
2217c2146
<       write(901,'('' Creating CoefViscousDrag history node.'')')
---
>       write(11,'('' Creating CoefViscousDrag history node.'')')
2228c2157
<       write(901,'('' Creating CoefForceX history node.'')')
---
>       write(11,'('' Creating CoefForceX history node.'')')
2239c2168
<       write(901,'('' Creating CoefForceY history node.'')')
---
>       write(11,'('' Creating CoefForceY history node.'')')
2250c2179
<       write(901,'('' Creating CoefForceZ history node.'')')
---
>       write(11,'('' Creating CoefForceZ history node.'')')
2261c2190
<       write(901,'('' Creating CoefMomentX history node.'')')
---
>       write(11,'('' Creating CoefMomentX history node.'')')
2272c2201
<       write(901,'('' Creating CoefMomentY history node.'')')
---
>       write(11,'('' Creating CoefMomentY history node.'')')
2283c2212
<       write(901,'('' Creating CoefMomentZ history node.'')')
---
>       write(11,'('' Creating CoefMomentZ history node.'')')
2294c2223
<       write(901,'('' Creating ControlSurfaceMassFlow history node.'')')
---
>       write(11,'('' Creating ControlSurfaceMassFlow history node.'')')
2305c2234
<       write(901,'('' Creating ControlSurfaceMomentumForce history'',
---
>       write(11,'('' Creating ControlSurfaceMomentumForce history'',
2317c2246
<       write(901,'('' Creating ControlSurfacePressureForce history'',
---
>       write(11,'('' Creating ControlSurfacePressureForce history'',
2329c2258
<       write(901,'('' Creating ControlSurfaceViscousForce history'',
---
>       write(11,'('' Creating ControlSurfaceViscousForce history'',
2341c2270
<       write(901,'('' Creating ControlSurfaceForce history'',
---
>       write(11,'('' Creating ControlSurfaceForce history'',
2353c2282
<       write(901,'('' Creating RSDTurbEqn1RMS history'',
---
>       write(11,'('' Creating RSDTurbEqn1RMS history'',
2365c2294
<       write(901,'('' Creating RSDTurbEqn2RMS history'',
---
>       write(11,'('' Creating RSDTurbEqn2RMS history'',
2377c2306
<       write(901,'('' Creating BadPointsTurbEqn1 history'',
---
>       write(11,'('' Creating BadPointsTurbEqn1 history'',
2384c2313
<       write(901,'('' Creating BadPointsTurbEqn2 history'',
---
>       write(11,'('' Creating BadPointsTurbEqn2 history'',
2441,2442c2370,2371
<          write(901,'('' ConvergenceHistory node does not exist.'')')
<          write(901,'(''   setting ntr=0 and continuing'')')
---
>          write(11,'('' ConvergenceHistory node does not exist.'')')
>          write(11,'(''   setting ntr=0 and continuing'')')
2446c2375
<       write(901,'('' reading convergence history data... ntr='',i5)') ntr
---
>       write(11,'('' reading convergence history data... ntr='',i5)') ntr
2448c2377
<       write(901,1239)
---
>       write(11,1239)
2452,2453c2381,2382
<       write(901,*)' ntr,ncycmax = ',ntr,ncycmax
<       write(901,*)' increase value of ncycmax to at LEAST ',
---
>       write(11,*)' ntr,ncycmax = ',ntr,ncycmax
>       write(11,*)' increase value of ncycmax to at LEAST ',
2464,2465c2393,2394
<         write(901,'('' WARNING.  Too many history arrays.'')')
<          write(901,'(''   setting ntr=0 and continuing'')')
---
>         write(11,'('' WARNING.  Too many history arrays.'')')
>          write(11,'(''   setting ntr=0 and continuing'')')
2477,2478c2406,2407
<       write(901,'('' WARNING. No RSDMassRMS node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No RSDMassRMS node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2493,2494c2422,2423
<       write(901,'('' WARNING. No CoefLift node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefLift node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2509,2510c2438,2439
<       write(901,'('' WARNING. No CoefDrag node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefDrag node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2525,2526c2454,2455
<       write(901,'('' WARNING. No CoefPressureDrag node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefPressureDrag node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2541,2542c2470,2471
<       write(901,'('' WARNING. No CoefViscousDrag node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefViscousDrag node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2557,2558c2486,2487
<       write(901,'('' WARNING. No CoefForceX node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefForceX node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2573,2574c2502,2503
<       write(901,'('' WARNING. No CoefForceY node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefForceY node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2589,2590c2518,2519
<       write(901,'('' WARNING. No CoefForceZ node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefForceZ node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2605,2606c2534,2535
<       write(901,'('' WARNING. No CoefMomentX node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefMomentX node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2621,2622c2550,2551
<       write(901,'('' WARNING. No CoefMomentY node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefMomentY node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2637,2638c2566,2567
<       write(901,'('' WARNING. No CoefMomentZ node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No CoefMomentZ node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2653,2654c2582,2583
<       write(901,'('' WARNING. No ControlSurfaceMassFlow node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No ControlSurfaceMassFlow node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2669c2598
<       write(901,'('' WARNING. No ControlSurfaceMomentumForce node'',
---
>       write(11,'('' WARNING. No ControlSurfaceMomentumForce node'',
2671c2600
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'(''   setting ntr=0 and continuing'')')
2686c2615
<       write(901,'('' WARNING. No ControlSurfacePressureForce node'',
---
>       write(11,'('' WARNING. No ControlSurfacePressureForce node'',
2688c2617
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'(''   setting ntr=0 and continuing'')')
2703c2632
<       write(901,'('' WARNING. No ControlSurfaceViscousForce node'',
---
>       write(11,'('' WARNING. No ControlSurfaceViscousForce node'',
2705c2634
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'(''   setting ntr=0 and continuing'')')
2720c2649
<       write(901,'('' WARNING. No ControlSurfaceForce node'',
---
>       write(11,'('' WARNING. No ControlSurfaceForce node'',
2722c2651
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'(''   setting ntr=0 and continuing'')')
2737,2738c2666,2667
<       write(901,'('' WARNING. No RSDTurbEqn1RMS node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No RSDTurbEqn1RMS node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2753,2754c2682,2683
<       write(901,'('' WARNING. No RSDTurbEqn2RMS node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No RSDTurbEqn2RMS node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2769,2770c2698,2699
<       write(901,'('' WARNING. No BadPointsTurbEqn1 node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No BadPointsTurbEqn1 node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2781,2782c2710,2711
<       write(901,'('' WARNING. No BadPointsTurbEqn2 node exists'')')
<       write(901,'(''   setting ntr=0 and continuing'')')
---
>       write(11,'('' WARNING. No BadPointsTurbEqn2 node exists'')')
>       write(11,'(''   setting ntr=0 and continuing'')')
2793c2722
<      +   prandtl,prandtlt,suth,i2d,ifullns,ides,isarc2d,ieasmcc2d)
---
>      +   prandtl,prandtlt,suth)
2812,2816d2740
< c      i2d..............0 if 3-D, 1 if 2-D (integer)
< c      ifullns..........0 if thin layer, 1 if full (integer)
< c      ides.............0 if DES off, 1 if on (integer)
< c      isarc2d..........0 if SARC curv correction off, 1 if on (integer)
< c      ieasmcc2d........0 if EASMCC curv correction off, 1 if on (integer)
2867,2875d2790
<       if(ifullns .eq. 1) then
<         if(i2d .eq. 1) then
<           idata(5)=1
<         else
<           idata(4)=1
<           idata(5)=1
<           idata(6)=1
<         end if
<       end if
2996c2911
<       else if(ivmx .eq. 5 .and. ides .ne. 1 .and. isarc2d .ne. 1) then
---
>       else if(ivmx .eq. 5) then
3000,3029d2914
<       else if(ivmx .eq. 5 .and. ides .eq. 1 .and. isarc2d .ne. 1) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'DetachedEddySimulation',ier)
<         if (ier .ne. 0) call cg_error_exit_f
<       else if(ivmx .eq. 5 .and. ides .ne. 1 .and. isarc2d .eq. 1) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'SpalartAllmarasSARC',ier)
<         if (ier .ne. 0) call cg_error_exit_f
<       else if(ivmx .eq. 5 .and. ides .eq. 1 .and. isarc2d .eq. 1) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'DetachedEddySimulationSARC',ier)
<         if (ier .ne. 0) call cg_error_exit_f
3038c2923
<       else if(ivmx .eq. 8 .and. ieasmcc2d .ne. 1) then
---
>       else if(ivmx .eq. 8) then
3048,3058c2933
<       else if(ivmx .eq. 8 .and. ieasmcc2d .eq. 1) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'TwoEquation_EASMCC_KO_Lin',ier)
<         if (ier .ne. 0) call cg_error_exit_f
<       else if(ivmx .eq. 9 .and. ieasmcc2d .ne. 1) then
---
>       else if(ivmx .eq. 9) then
3068,3077d2942
<       else if(ivmx .eq. 9 .and. ieasmcc2d .eq. 1) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'TwoEquation_EASMCC_KE_Lin',ier)
<         if (ier .ne. 0) call cg_error_exit_f
3088c2953
<       else if(ivmx .eq. 11 .and. ieasmcc2d .ne. 1) then
---
>       else if(ivmx .eq. 11) then
3098,3108c2963
<       else if(ivmx .eq. 11 .and. ieasmcc2d .eq. 1) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'TwoEquation_GS_EASMCC_KE',ier)
<         if (ier .ne. 0) call cg_error_exit_f
<       else if(ivmx .eq. 12 .and. ieasmcc2d .ne. 1) then
---
>       else if(ivmx .eq. 12) then
3118,3128c2973
<       else if(ivmx .eq. 12 .and. ieasmcc2d .eq. 1) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'TwoEquation_GS_EASMCC_KO',ier)
<         if (ier .ne. 0) call cg_error_exit_f
<       else if(ivmx .eq. 13 .and. ieasmcc2d .ne. 1) then
---
>       else if(ivmx .eq. 13) then
3138,3148c2983
<       else if(ivmx .eq. 13 .and. ieasmcc2d .eq. 1) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'TwoEquation_EASMCC_KE',ier)
<         if (ier .ne. 0) call cg_error_exit_f
<       else if(ivmx .eq. 14 .and. ieasmcc2d .ne. 1) then
---
>       else if(ivmx .eq. 14) then
3158,3177d2992
<       else if(ivmx .eq. 14 .and. ieasmcc2d .eq. 1) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'TwoEquation_EASMCC_KO',ier)
<         if (ier .ne. 0) call cg_error_exit_f
<       else if(ivmx .eq. 15) then
< c   (non-standard)
<         call cg_model_write_f('TurbulenceModel_t',
<      +   UserDefined,ier)
<         call cg_goto_f(iccg,ibase,ier,'Zone_t',igrid,
<      +   'FlowEquationSet_t',1,'TurbulenceModel_t',1,'end')
<         if (ier .ne. 0) call cg_error_exit_f
<         call cg_descriptor_write_f('TurbulenceModelName',
<      +   'TwoEquation_K_Enstrophy',ier)
<         if (ier .ne. 0) call cg_error_exit_f
3240,3241c3055,3056
<         write(901,'('' FlowEquationSet node does not exist.'')')
<         write(901,'(''   assuming gamma=1.4, pr=0.72, prt=0.9,'',
---
>         write(11,'('' FlowEquationSet node does not exist.'')')
>         write(11,'(''   assuming gamma=1.4, pr=0.72, prt=0.9,'',
3262c3077
<           write(901,'('' cgns read solution of:  '',a32)') 
---
>           write(11,'('' cgns read solution of:  '',a32)') 
3265c3080
<           write(901,'('' WARNING! GoverningEquations type not'',
---
>           write(11,'('' WARNING! GoverningEquations type not'',
3267c3082
<           write(901,'(''   assuming gamma=1.4, pr=0.72, prt=0.9,'',
---
>           write(11,'(''   assuming gamma=1.4, pr=0.72, prt=0.9,'',
3279,3280c3094,3095
<         write(901,'('' GoverningEquations node does not exist. '')')
<         write(901,'(''   assuming gamma=1.4, pr=0.72, prt=0.9,'',
---
>         write(11,'('' GoverningEquations node does not exist. '')')
>         write(11,'(''   assuming gamma=1.4, pr=0.72, prt=0.9,'',
3295,3296c3110,3111
<         write(901,'('' No GasModel exists'')')
<         write(901,'(''   Setting gamma=1.4 & continuing'')')
---
>         write(11,'('' No GasModel exists'')')
>         write(11,'(''   Setting gamma=1.4 & continuing'')')
3303,3305c3118,3120
<         write(901,'('' Expecting only one array under GasModel'')')
<         write(901,'(''   Read '',i5)') narrays
<         write(901,'(''   Setting gamma=1.4 & continuing'')')
---
>         write(11,'('' Expecting only one array under GasModel'')')
>         write(11,'(''   Read '',i5)') narrays
>         write(11,'(''   Setting gamma=1.4 & continuing'')')
3312,3313c3127,3128
<       write(901,'('' WARNING. No SpecificHeatRatio node exists'')')
<       write(901,'(''   setting to 1.4 & continuing'')')
---
>       write(11,'('' WARNING. No SpecificHeatRatio node exists'')')
>       write(11,'(''   setting to 1.4 & continuing'')')
3328,3329c3143,3144
<         write(901,'('' No ThermalConductivityModel exists'')')
<         write(901,'(''   Setting prandtl=0.72 & continuing'')')
---
>         write(11,'('' No ThermalConductivityModel exists'')')
>         write(11,'(''   Setting prandtl=0.72 & continuing'')')
3336c3151
<         write(901,'('' Expecting only one array under '',
---
>         write(11,'('' Expecting only one array under '',
3338,3339c3153,3154
<         write(901,'(''   Read '',i5)') narrays
<         write(901,'(''   Setting prandtl=0.72 & continuing'')')
---
>         write(11,'(''   Read '',i5)') narrays
>         write(11,'(''   Setting prandtl=0.72 & continuing'')')
3346,3347c3161,3162
<       write(901,'('' WARNING. No Prandtl node exists'')')
<       write(901,'(''   setting to 0.72 & continuing'')')
---
>       write(11,'('' WARNING. No Prandtl node exists'')')
>       write(11,'(''   setting to 0.72 & continuing'')')
3362,3363c3177,3178
<         write(901,'('' No TurbulenceClosure exists'')')
<         write(901,'(''   Setting prandtlt=0.9 & continuing'')')
---
>         write(11,'('' No TurbulenceClosure exists'')')
>         write(11,'(''   Setting prandtlt=0.9 & continuing'')')
3370c3185
<         write(901,'('' Expecting only one array under '',
---
>         write(11,'('' Expecting only one array under '',
3372,3373c3187,3188
<         write(901,'(''   Read '',i5)') narrays
<         write(901,'(''   Setting prandtlt=0.9 & continuing'')')
---
>         write(11,'(''   Read '',i5)') narrays
>         write(11,'(''   Setting prandtlt=0.9 & continuing'')')
3380,3381c3195,3196
<       write(901,'('' WARNING. No PrandtlTurbulent node exists'')')
<       write(901,'(''   setting to 0.9 & continuing'')')
---
>       write(11,'('' WARNING. No PrandtlTurbulent node exists'')')
>       write(11,'(''   setting to 0.9 & continuing'')')
3396,3397c3211,3212
<         write(901,'('' No ViscosityModel exists'')')
<         write(901,'(''   Setting suth=198.6 & continuing'')')
---
>         write(11,'('' No ViscosityModel exists'')')
>         write(11,'(''   Setting suth=198.6 & continuing'')')
3404c3219
<         write(901,'('' Expecting only one array under '',
---
>         write(11,'('' Expecting only one array under '',
3406,3407c3221,3222
<         write(901,'(''   Read '',i5)') narrays
<         write(901,'(''   Setting suth=198.6 & continuing'')')
---
>         write(11,'(''   Read '',i5)') narrays
>         write(11,'(''   Setting suth=198.6 & continuing'')')
3414,3415c3229,3230
<       write(901,'('' WARNING. No SutherlandLawConstant node exists'')')
<       write(901,'(''   setting to 198.6 & continuing'')')
---
>       write(11,'('' WARNING. No SutherlandLawConstant node exists'')')
>       write(11,'(''   setting to 198.6 & continuing'')')
3433,3434c3248,3249
<         write(901,'('' DiffusionModel node does not exist.'')')
<         write(901,'(''   assuming restart from Euler'')')
---
>         write(11,'('' DiffusionModel node does not exist.'')')
>         write(11,'(''   assuming restart from Euler'')')
3442c3257
<         write(901,'('' Restarting from FULL N-S'',
---
>         write(11,'('' WARNING:  restarting from FULL N-S'',
3443a3259,3260
>         write(11,'(''    This capability not available in'',
>      +  '' CFL3D'')')
3447c3264
<         write(901,'('' Inconsistency in ADF file between'',
---
>         write(11,'('' Inconsistency in ADF file between'',
3449c3266
<         write(901,'(''    using DiffusionModel...'')')
---
>         write(11,'(''    using DiffusionModel...'')')
3531,3580d3347
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'TwoEquation_K_Enstrophy') then
<           iv1=idata(1)*15
<           iv2=idata(2)*15
<           iv3=idata(3)*15
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'DetachedEddySimulation') then
<           iv1=idata(1)*5
<           iv2=idata(2)*5
<           iv3=idata(3)*5
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'SpalartAllmarasSARC') then
<           iv1=idata(1)*5
<           iv2=idata(2)*5
<           iv3=idata(3)*5
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'DetachedEddySimulationSARC') then
<           iv1=idata(1)*5
<           iv2=idata(2)*5
<           iv3=idata(3)*5
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'TwoEquation_EASMCC_KO_Lin') then
<           iv1=idata(1)*8
<           iv2=idata(2)*8
<           iv3=idata(3)*8
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'TwoEquation_EASMCC_KE_Lin') then
<           iv1=idata(1)*9
<           iv2=idata(2)*9
<           iv3=idata(3)*9
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'TwoEquation_GS_EASMCC_KE') then
<           iv1=idata(1)*11
<           iv2=idata(2)*11
<           iv3=idata(3)*11
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'TwoEquation_GS_EASMCC_KO') then
<           iv1=idata(1)*12
<           iv2=idata(2)*12
<           iv3=idata(3)*12
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'TwoEquation_EASMCC_KE') then
<           iv1=idata(1)*13
<           iv2=idata(2)*13
<           iv3=idata(3)*13
<         else if(itype .eq. UserDefined .and.
<      +   text .eq. 'TwoEquation_EASMCC_KO') then
<           iv1=idata(1)*14
<           iv2=idata(2)*14
<           iv3=idata(3)*14
3582c3349
<           write(901,'('' Model name not recognized:'',a32)')
---
>           write(11,'('' Model name not recognized:'',a32)')
3584c3351
<           write(901,'(''   assuming NSLaminar'')')
---
>           write(11,'(''   assuming NSLaminar'')')
3590c3357
<         write(901,'('' TurbulenceModel node does not exist. '')')
---
>         write(11,'('' TurbulenceModel node does not exist. '')')
3592c3359
<           write(901,'(''   (restart is Euler)'')')
---
>           write(11,'(''   (restart is Euler)'')')
3594c3361
<           write(901,'(''   (restart is NSLaminar)'')')
---
>           write(11,'(''   (restart is NSLaminar)'')')
3667c3434
<         write(901,'('' Error... numnames too small in writetime'')')
---
>         write(11,'('' Error... numnames too small in writetime'')')
3723c3490
<          write(901,'('' WARNING: BaseIterativeData node does not '',
---
>          write(11,'('' WARNING: BaseIterativeData node does not '',
3725c3492
<          write(901,'(''   Assuming time=0 and continuing'')')
---
>          write(11,'(''   Assuming time=0 and continuing'')')
3736c3503
<          write(901,'('' WARNING.  Too many BaseIterativeData'',
---
>          write(11,'('' WARNING.  Too many BaseIterativeData'',
3738c3505
<          write(901,'(''   Setting time=0 and continuing'')')
---
>          write(11,'(''   Setting time=0 and continuing'')')
3751,3752c3518,3519
<       write(901,'('' WARNING. No TimeValues node exists'')')
<       write(901,'(''   setting time=0 & continuing'')')
---
>       write(11,'('' WARNING. No TimeValues node exists'')')
>       write(11,'(''   setting time=0 & continuing'')')
4186,4188c3953,3955
<          write(901,'('' WARNING: DataClass node does not exist.'')')
<          write(901,'(''   Assuming NormalizedByUnknownDimensional'')')
<          write(901,'(''   and continuing'')')
---
>          write(11,'('' WARNING: DataClass node does not exist.'')')
>          write(11,'(''   Assuming NormalizedByUnknownDimensional'')')
>          write(11,'(''   and continuing'')')
4192c3959
<            write(901,'('' Error:  Restart file must have data that'',
---
>            write(11,'('' Error:  Restart file must have data that'',
4194c3961
<            write(901,'('' Actual classname is: '',a32)') 
---
>            write(11,'('' Actual classname is: '',a32)') 
4203,4206c3970,3973
<          write(901,'('' WARNING: ReferenceState node does not exist'')')
<          write(901,'(''   Assuming CFL3D <<standard>> for'')')
<          write(901,'(''   nondim quantities, and assuming M=0.5,'')')
<          write(901,'(''   Re=1.e6, Tinf=520R, alp=0 and continuing'')')
---
>          write(11,'('' WARNING: ReferenceState node does not exist.'')')
>          write(11,'(''   Assuming CFL3D <<standard>> for'')')
>          write(11,'(''   nondim quantities, and assuming M=0.5,'')')
>          write(11,'(''   Re=1.e6, Tinf=520R, alp=0 and continuing'')')
4224,4227c3991,3994
<          write(901,'('' WARNING.  To many ReferenceState arrays.'')')
<          write(901,'(''   Assuming CFL3D <<standard>> for'')')
<          write(901,'(''   nondim quantities, and assuming M=0.5,'')')
<          write(901,'(''   Re=1.e6, Tinf=520R, alph=0 and continuing'')')
---
>          write(11,'('' WARNING.  To many ReferenceState arrays.'')')
>          write(11,'(''   Assuming CFL3D <<standard>> for'')')
>          write(11,'(''   nondim quantities, and assuming M=0.5,'')')
>          write(11,'(''   Re=1.e6, Tinf=520R, alph=0 and continuing'')')
4247,4248c4014,4015
<       write(901,'('' WARNING. No Mach node exists'')')
<       write(901,'(''   setting arbitrarily to 0.5 & continuing'')')
---
>       write(11,'('' WARNING. No Mach node exists'')')
>       write(11,'(''   setting arbitrarily to 0.5 & continuing'')')
4264,4265c4031,4032
<       write(901,'('' WARNING. No Reynolds node exists'')')
<       write(901,'(''   setting arbitrarily to 1.e6 & continuing'')')
---
>       write(11,'('' WARNING. No Reynolds node exists'')')
>       write(11,'(''   setting arbitrarily to 1.e6 & continuing'')')
4281,4282c4048,4049
<       write(901,'('' WARNING. No Density node exists'')')
<       write(901,'(''   setting to 1.0 & continuing'')')
---
>       write(11,'('' WARNING. No Density node exists'')')
>       write(11,'(''   setting to 1.0 & continuing'')')
4298,4299c4065,4066
<       write(901,'('' WARNING. No VelocitySound node exists'')')
<       write(901,'(''   setting to 1.0 & continuing'')')
---
>       write(11,'('' WARNING. No VelocitySound node exists'')')
>       write(11,'(''   setting to 1.0 & continuing'')')
4326c4093
<         write(901,'('' Reading ViscosityMolecular'',
---
>         write(11,'('' Reading ViscosityMolecular'',
4335c4102
<         write(901,'('' Reading ViscosityMolecular'')')
---
>         write(11,'('' Reading ViscosityMolecular'')')
4345,4346c4112,4113
<         write(901,'('' WARNING. No ViscosityMolecular nodes exist'')')
<         write(901,'(''   setting to 1.0 & continuing'')')
---
>         write(11,'('' WARNING. No ViscosityMolecular nodes exist'')')
>         write(11,'(''   setting to 1.0 & continuing'')')
4354,4355c4121,4122
<       write(901,'('' WARNING. No LengthReference node exists'')')
<       write(901,'(''   setting to 1.0 & continuing'')')
---
>       write(11,'('' WARNING. No LengthReference node exists'')')
>       write(11,'(''   setting to 1.0 & continuing'')')
4371,4372c4138,4139
<       write(901,'('' WARNING. No Temperature node exists'')')
<       write(901,'(''   setting arbitrarily to 520R & continuing'')')
---
>       write(11,'('' WARNING. No Temperature node exists'')')
>       write(11,'(''   setting arbitrarily to 520R & continuing'')')
4388c4155
<          write(901,'('' WARNING: Restart file must have Temp data '',
---
>          write(11,'('' WARNING: Restart file must have Temp data '',
4390c4157
<          write(901,'(''   Actual classname is: '',a32)') 
---
>          write(11,'(''   Actual classname is: '',a32)') 
4392c4159
<          write(901,'(''   Ignoring this, and continuing.'')')
---
>          write(11,'(''   Ignoring this, and continuing.'')')
4397c4164
<          write(901,'('' WARNING: Temp DimensionalUnits should be'',
---
>          write(11,'('' WARNING: Temp DimensionalUnits should be'',
4399c4166
<          write(901,'(''   Instead, they are:'',a32)') 
---
>          write(11,'(''   Instead, they are:'',a32)') 
4401c4168
<          write(901,'(''   Resetting to 520R and continuing.'')')
---
>          write(11,'(''   Resetting to 520R and continuing.'')')
4412,4413c4179,4180
<       write(901,'('' WARNING. No AngleofAttack node exists'')')
<       write(901,'(''   setting arbitrarily to 0 & continuing'')')
---
>       write(11,'('' WARNING. No AngleofAttack node exists'')')
>       write(11,'(''   setting arbitrarily to 0 & continuing'')')
4429c4196
<          write(901,'('' WARNING: Restart file must have alpha data '',
---
>          write(11,'('' WARNING: Restart file must have alpha data '',
4431c4198
<          write(901,'(''   Actual classname is: '',a32)')
---
>          write(11,'(''   Actual classname is: '',a32)')
4433c4200
<          write(901,'(''   Ignoring this, and continuing.'')')
---
>          write(11,'(''   Ignoring this, and continuing.'')')
4438c4205
<          write(901,'('' WARNING: alpha DimensionalUnits should be'',
---
>          write(11,'('' WARNING: alpha DimensionalUnits should be'',
4440c4207
<          write(901,'(''   Instead, they are:'',a32)')
---
>          write(11,'(''   Instead, they are:'',a32)')
4442c4209
<          write(901,'(''   Resetting to 0 and continuing.'')')
---
>          write(11,'(''   Resetting to 0 and continuing.'')')
4707c4474
<         write(901,'('' CaseTitle in cgns file incorrect because'',
---
>         write(11,'('' CaseTitle in cgns file incorrect because'',
4946c4713
<         write(901,'('' Error.  Desired grid level of soln not'',
---
>         write(11,'('' Error.  Desired grid level of soln not'',
5114c4881
<         write(901,'('' Need to increase numfield parameter'',
---
>         write(11,'('' Need to increase numfield parameter'',
5140c4907
<           write(901,'('' Cannot find solution of name '',a32)')
---
>           write(11,'('' Cannot find solution of name '',a32)')
5161c4928
<         write(901,'('' Error.  Desired grid level of soln not'',
---
>         write(11,'('' Error.  Desired grid level of soln not'',
5214c4981
<           write(901,'('' Cannot find solution of name '',a32)')
---
>           write(11,'('' Cannot find solution of name '',a32)')
5216c4983
<           write(901,'('' ...leaving old turbs as 0 and continuing'')')
---
>           write(11,'('' ...leaving old turbs as 0 and continuing'')')
5246c5013
<         write(901,'('' no user data exists in base, so'',
---
>         write(11,'('' no user data exists in base, so'',
5250c5017
<         write(901,'('' Error... numfield too small in rsecord'')')
---
>         write(11,'('' Error... numfield too small in rsecord'')')
5260,5261c5027,5028
<         write(901,'('' WARNING. No CFL3DTimeStep node exists'')')
<         write(901,'(''   setting dtold=dt and continuing'')')
---
>         write(11,'('' WARNING. No CFL3DTimeStep node exists'')')
>         write(11,'(''   setting dtold=dt and continuing'')')
5625c5392
<         write(901,'('' Need to increase numfield parameter'',
---
>         write(11,'('' Need to increase numfield parameter'',
5649,5650c5416,5417
<       else if (nmotions .gt. 1) then
<         write(901,'('' Error, more than 1 RigidGridMotion_t nodes!'')')
---
>       elseif (nmotions .gt. 1) then
>         write(11,'('' Error, more than 1 RigidGridMotion_t nodes!'')')
5660,5661c5427,5428
<             write(901,'('' Error.  Too many RigidGridMotion arrays.'')')
<             write(901,'(''   increase numfield in getiflagg'')')
---
>             write(11,'('' Error.  Too many RigidGridMotion arrays.'')')
>             write(11,'(''   increase numfield in getiflagg'')')
5673c5440
<           write(901,'('' No RigidGridMotionPointers exists... assume'',
---
>           write(11,'('' No RigidGridMotionPointers exists... assume'',
5774c5541
<         write(901,'('' Error... numnames too small in writebcs'')')
---
>         write(11,'('' Error... numnames too small in writebcs'')')
5967,5968c5734,5735
<         write(901,'('' WARNING... numnames too small in readbcs'')')
<         write(901,'(''   not changing default BCs... continuing'')')
---
>         write(11,'('' WARNING... numnames too small in readbcs'')')
>         write(11,'(''   not changing default BCs... continuing'')')
5980c5747
<         write(901,'('' no BC data exists in UserDefinedData nodes'')')
---
>         write(11,'('' no BC data exists in UserDefinedData nodes'')')
5984c5751
<           write(901,'('' WARNING... BCs not in ZoneIterativeData or'',
---
>           write(11,'('' WARNING... BCs not in ZoneIterativeData or'',
5986c5753
<           write(901,'(''   not changing default BCs... continuing'')')
---
>           write(11,'(''   not changing default BCs... continuing'')')
5992c5759
<           write(901,'('' WARNING.  Too many ZoneIterativeData'',
---
>           write(11,'('' WARNING.  Too many ZoneIterativeData'',
5994c5761
<           write(901,'(''   not changing default BCs... continuing'')')
---
>           write(11,'(''   not changing default BCs... continuing'')')
5997c5764
<         write(901,'('' Reading BC info from ZoneIterativeData (old'',
---
>         write(11,'('' Reading BC info from ZoneIterativeData (old'',
5999c5766
<         write(901,'(''  ... it will be moved to new location of'',
---
>         write(11,'(''  ... it will be moved to new location of'',
6008c5775
<         write(901,'('' Reading BC info from UserDefinedData'')')
---
>         write(11,'('' Reading BC info from UserDefinedData'')')
6015c5782
<           write(901,'('' WARNING.  Too many arrays in'',
---
>           write(11,'('' WARNING.  Too many arrays in'',
6017c5784
<           write(901,'(''   not changing default BCs... continuing'')')
---
>           write(11,'(''   not changing default BCs... continuing'')')
6027c5794
<         write(901,'('' no BC data exists in UserDefinedData nodes'')')
---
>         write(11,'('' no BC data exists in UserDefinedData nodes'')')
6031c5798
<           write(901,'('' WARNING... BCs not in ZoneIterativeData or'',
---
>           write(11,'('' WARNING... BCs not in ZoneIterativeData or'',
6033c5800
<           write(901,'(''   not changing default BCs... continuing'')')
---
>           write(11,'(''   not changing default BCs... continuing'')')
6039c5806
<           write(901,'('' WARNING.  Too many ZoneIterativeData'',
---
>           write(11,'('' WARNING.  Too many ZoneIterativeData'',
6041c5808
<           write(901,'(''   not changing default BCs... continuing'')')
---
>           write(11,'(''   not changing default BCs... continuing'')')
6044c5811
<         write(901,'('' Reading BC info from ZoneIterativeData (old'',
---
>         write(11,'('' Reading BC info from ZoneIterativeData (old'',
6046c5813
<         write(901,'(''  ... it will be moved to new location of'',
---
>         write(11,'(''  ... it will be moved to new location of'',
6059,6060c5826,5827
<       write(901,'('' WARNING. No Qi0_CFL3D node exists'')')
<       write(901,'(''   keeping default and continuing'')')
---
>       write(11,'('' WARNING. No Qi0_CFL3D node exists'')')
>       write(11,'(''   keeping default and continuing'')')
6076,6077c5843,5844
<       write(901,'('' WARNING. No Qj0_CFL3D node exists'')')
<       write(901,'(''   keeping default and continuing'')')
---
>       write(11,'('' WARNING. No Qj0_CFL3D node exists'')')
>       write(11,'(''   keeping default and continuing'')')
6092,6093c5859,5860
<       write(901,'('' WARNING. No Qk0_CFL3D node exists'')')
<       write(901,'(''   keeping default and continuing'')')
---
>       write(11,'('' WARNING. No Qk0_CFL3D node exists'')')
>       write(11,'(''   keeping default and continuing'')')
6109,6110c5876,5877
<       write(901,'('' WARNING. No Vi0_CFL3D node exists'')')
<       write(901,'(''   keeping default and continuing'')')
---
>       write(11,'('' WARNING. No Vi0_CFL3D node exists'')')
>       write(11,'(''   keeping default and continuing'')')
6126,6127c5893,5894
<       write(901,'('' WARNING. No Vj0_CFL3D node exists'')')
<       write(901,'(''   keeping default and continuing'')')
---
>       write(11,'('' WARNING. No Vj0_CFL3D node exists'')')
>       write(11,'(''   keeping default and continuing'')')
6142,6143c5909,5910
<       write(901,'('' WARNING. No Vk0_CFL3D node exists'')')
<       write(901,'(''   keeping default and continuing'')')
---
>       write(11,'('' WARNING. No Vk0_CFL3D node exists'')')
>       write(11,'(''   keeping default and continuing'')')
6159,6160c5926,5927
<       write(901,'('' WARNING. No Ti0_CFL3D node exists'')')
<       write(901,'(''   keeping default and continuing'')')
---
>       write(11,'('' WARNING. No Ti0_CFL3D node exists'')')
>       write(11,'(''   keeping default and continuing'')')
6176,6177c5943,5944
<       write(901,'('' WARNING. No Tj0_CFL3D node exists'')')
<       write(901,'(''   keeping default and continuing'')')
---
>       write(11,'('' WARNING. No Tj0_CFL3D node exists'')')
>       write(11,'(''   keeping default and continuing'')')
6192,6193c5959,5960
<       write(901,'('' WARNING. No Tk0_CFL3D node exists'')')
<       write(901,'(''   keeping default and continuing'')')
---
>       write(11,'('' WARNING. No Tk0_CFL3D node exists'')')
>       write(11,'(''   keeping default and continuing'')')
6616c6383
<         write(901,'('' Error, more than 1 RigidGridMotion_t nodes!'')')
---
>         write(11,'('' Error, more than 1 RigidGridMotion_t nodes!'')')
6627,6628c6394,6395
<         write(901,'('' Error.  Too many RigidGridMotion arrays.'')')
<         write(901,'(''   increase numnames in rgrdmov'')')
---
>         write(11,'('' Error.  Too many RigidGridMotion arrays.'')')
>         write(11,'(''   increase numnames in rgrdmov'')')
6639c6406
<       write(901,'('' Error. No OriginLocation node exists'')')
---
>       write(11,'('' Error. No OriginLocation node exists'')')
6668c6435
<       write(901,'('' Error. No RigidRotationAngle node exists'')')
---
>       write(11,'('' Error. No RigidRotationAngle node exists'')')
6690c6457
<         write(901,'('' Error... should be 1 user data node in'', 
---
>         write(11,'('' Error... should be 1 user data node in'', 
6697c6464
<         write(901,'('' Error. No CFL3DParameters node exists'')')
---
>         write(11,'('' Error. No CFL3DParameters node exists'')')
6709,6710c6476,6477
<         write(901,'('' Error.  Too many RigidGridMotion arrays.'')')
<         write(901,'(''   increase numnames in rgrdmov'')')
---
>         write(11,'('' Error.  Too many RigidGridMotion arrays.'')')
>         write(11,'(''   increase numnames in rgrdmov'')')
6722c6489
<       write(901,'('' Error. No Rfreqt node exists'')')
---
>       write(11,'('' Error. No Rfreqt node exists'')')
6736c6503
<       write(901,'('' Error. No Veltrans node exists'')')
---
>       write(11,'('' Error. No Veltrans node exists'')')
6753c6520
<       write(901,'('' Error. No Dmx node exists'')')
---
>       write(11,'('' Error. No Dmx node exists'')')
6770c6537
<       write(901,'('' Error. No Rfreqtmc node exists'')')
---
>       write(11,'('' Error. No Rfreqtmc node exists'')')
6784c6551
<       write(901,'('' Error. No Origmc node exists'')')
---
>       write(11,'('' Error. No Origmc node exists'')')
6801c6568
<       write(901,'('' Error. No Orig0mc node exists'')')
---
>       write(11,'('' Error. No Orig0mc node exists'')')
6818c6585
<       write(901,'('' Error. No Veltransmc node exists'')')
---
>       write(11,'('' Error. No Veltransmc node exists'')')
6835c6602
<       write(901,'('' Error. No Mc node exists'')')
---
>       write(11,'('' Error. No Mc node exists'')')
6852c6619
<       write(901,'('' Error. No Dmxmc node exists'')')
---
>       write(11,'('' Error. No Dmxmc node exists'')')
6869c6636
<       write(901,'('' Error. No Rfreqr node exists'')')
---
>       write(11,'('' Error. No Rfreqr node exists'')')
6883c6650
<       write(901,'('' Error. No Omega node exists'')')
---
>       write(11,'('' Error. No Omega node exists'')')
6900c6667
<       write(901,'('' Error. No Dthmx node exists'')')
---
>       write(11,'('' Error. No Dthmx node exists'')')
6917c6684
<       write(901,'('' Error. No Rfreqrmc node exists'')')
---
>       write(11,'('' Error. No Rfreqrmc node exists'')')
6931c6698
<       write(901,'('' Error. No Thetamc node exists'')')
---
>       write(11,'('' Error. No Thetamc node exists'')')
6948c6715
<       write(901,'('' Error. No Omegamc node exists'')')
---
>       write(11,'('' Error. No Omegamc node exists'')')
6965c6732
<       write(901,'('' Error. No Dthmxmc node exists'')')
---
>       write(11,'('' Error. No Dthmxmc node exists'')')
6982c6749
<       write(901,'('' Error. No Time2 node exists'')')
---
>       write(11,'('' Error. No Time2 node exists'')')
6996c6763
<       write(901,'('' Error. No Time2mc node exists'')')
---
>       write(11,'('' Error. No Time2mc node exists'')')
7010c6777
<       write(901,'('' Error. No Dtvar node exists'')')
---
>       write(11,'('' Error. No Dtvar node exists'')')
7024c6791
<       write(901,'('' Error. No Itrans node exists'')')
---
>       write(11,'('' Error. No Itrans node exists'')')
7034c6801
<       write(901,'('' Error. No Itransmc node exists'')')
---
>       write(11,'('' Error. No Itransmc node exists'')')
7044c6811
<       write(901,'('' Error. No Irotat node exists'')')
---
>       write(11,'('' Error. No Irotat node exists'')')
7054c6821
<       write(901,'('' Error. No Irotatmc node exists'')')
---
>       write(11,'('' Error. No Irotatmc node exists'')')
7090,7091c6857,6858
<         write(901,'('' No RigidGridMotion nodes, igrid='',i5)') igrid
<         write(901,'(''   setting iuns=0 and continuing'')')
---
>         write(11,'('' No RigidGridMotion nodes, igrid='',i5)') igrid
>         write(11,'(''   setting iuns=0 and continuing'')')
7096c6863
<         write(901,'('' Error, more than 1 RigidGridMotion_t nodes!'')')
---
>         write(11,'('' Error, more than 1 RigidGridMotion_t nodes!'')')
7107c6874
<         write(901,'('' Error... should be 1 user data node in'',
---
>         write(11,'('' Error... should be 1 user data node in'',
7114c6881
<         write(901,'('' Error. No CFL3DParameters node exists'')')
---
>         write(11,'('' Error. No CFL3DParameters node exists'')')
7125,7126c6892,6893
<         write(901,'('' Error.  Too many RigidGridMotion arrays.'')')
<         write(901,'(''   increase numnames in readiuns'')')
---
>         write(11,'('' Error.  Too many RigidGridMotion arrays.'')')
>         write(11,'(''   increase numnames in readiuns'')')
7137c6904
<       write(901,'('' Error. No Iuns node exists'')')
---
>       write(11,'('' Error. No Iuns node exists'')')
7434c7201
<         write(901,'('' Error.  Desired grid level not supported'')')
---
>         write(11,'('' Error.  Desired grid level not supported'')')
7680c7447
<         write(901,'('' Error.  No ArbitraryGridMotion nodes,'',
---
>         write(11,'('' Error.  No ArbitraryGridMotion nodes,'',
7682c7449
<         write(901,'(''   cannot get nsegdfrm'')')
---
>         write(11,'(''   cannot get nsegdfrm'')')
7686c7453
<         write(901,'('' Error, more than 1 ArbitraryGridMotion_t'',
---
>         write(11,'('' Error, more than 1 ArbitraryGridMotion_t'',
7698c7465
<         write(901,'('' Error... should be 1 user data node in'',
---
>         write(11,'('' Error... should be 1 user data node in'',
7705c7472
<         write(901,'('' Error. No CFL3DParameters node exists'')')
---
>         write(11,'('' Error. No CFL3DParameters node exists'')')
7716,7717c7483,7484
<         write(901,'('' Error.  Too many ArbitraryGridMotion arrays.'')')
<         write(901,'(''   increase numnames in readiuns'')')
---
>         write(11,'('' Error.  Too many ArbitraryGridMotion arrays.'')')
>         write(11,'(''   increase numnames in readiuns'')')
7729c7496
<       write(901,'('' Error. No Nsegdfrm node exists'')')
---
>       write(11,'('' Error. No Nsegdfrm node exists'')')
7836c7603
<         write(901,'('' Error.  No ArbitraryGridMotion nodes,'',
---
>         write(11,'('' Error.  No ArbitraryGridMotion nodes,'',
7838c7605
<         write(901,'(''   cannot get nsegdfrm'')')
---
>         write(11,'(''   cannot get nsegdfrm'')')
7842c7609
<         write(901,'('' Error, more than 1 ArbitraryGridMotion_t'',
---
>         write(11,'('' Error, more than 1 ArbitraryGridMotion_t'',
7854c7621
<         write(901,'('' Error... should be 1 user data node in'',
---
>         write(11,'('' Error... should be 1 user data node in'',
7861c7628
<         write(901,'('' Error. No CFL3DParameters node exists'')')
---
>         write(11,'('' Error. No CFL3DParameters node exists'')')
7872,7873c7639,7640
<         write(901,'('' Error.  Too many ArbitraryGridMotion arrays.'')')
<         write(901,'(''   increase numnames in rdeform'')')
---
>         write(11,'('' Error.  Too many ArbitraryGridMotion arrays.'')')
>         write(11,'(''   increase numnames in rdeform'')')
7885c7652
<       write(901,'('' Error. No Idefrm node exists'')')
---
>       write(11,'('' Error. No Idefrm node exists'')')
7895c7662
<       write(901,'('' Error. No Utrnsae node exists'')')
---
>       write(11,'('' Error. No Utrnsae node exists'')')
7909c7676
<       write(901,'('' Error. No Vtrnsae node exists'')')
---
>       write(11,'('' Error. No Vtrnsae node exists'')')
7923c7690
<       write(901,'('' Error. No Wtrnsae node exists'')')
---
>       write(11,'('' Error. No Wtrnsae node exists'')')
7937c7704
<       write(901,'('' Error. No Omgxae node exists'')')
---
>       write(11,'('' Error. No Omgxae node exists'')')
7951c7718
<       write(901,'('' Error. No Omgyae node exists'')')
---
>       write(11,'('' Error. No Omgyae node exists'')')
7965c7732
<       write(901,'('' Error. No Omgzae node exists'')')
---
>       write(11,'('' Error. No Omgzae node exists'')')
7979c7746
<       write(901,'('' Error. No Xorgae node exists'')')
---
>       write(11,'('' Error. No Xorgae node exists'')')
7993c7760
<       write(901,'('' Error. No Yorgae node exists'')')
---
>       write(11,'('' Error. No Yorgae node exists'')')
8007c7774
<       write(901,'('' Error. No Zorgae node exists'')')
---
>       write(11,'('' Error. No Zorgae node exists'')')
8021c7788
<       write(901,'('' Error. No Thtxae node exists'')')
---
>       write(11,'('' Error. No Thtxae node exists'')')
8035c7802
<       write(901,'('' Error. No Thtyae node exists'')')
---
>       write(11,'('' Error. No Thtyae node exists'')')
8049c7816
<       write(901,'('' Error. No Thtzae node exists'')')
---
>       write(11,'('' Error. No Thtzae node exists'')')
8063c7830
<       write(901,'('' Error. No Rfrqtae node exists'')')
---
>       write(11,'('' Error. No Rfrqtae node exists'')')
8077c7844
<       write(901,'('' Error. No Rfrqrae node exists'')')
---
>       write(11,'('' Error. No Rfrqrae node exists'')')
8091c7858
<       write(901,'('' Error. No Icsi node exists'')')
---
>       write(11,'('' Error. No Icsi node exists'')')
8101c7868
<       write(901,'('' Error. No Icsf node exists'')')
---
>       write(11,'('' Error. No Icsf node exists'')')
8111c7878
<       write(901,'('' Error. No Jcsi node exists'')')
---
>       write(11,'('' Error. No Jcsi node exists'')')
8121c7888
<       write(901,'('' Error. No Jcsf node exists'')')
---
>       write(11,'('' Error. No Jcsf node exists'')')
8131c7898
<       write(901,'('' Error. No Kcsi node exists'')')
---
>       write(11,'('' Error. No Kcsi node exists'')')
8141c7908
<       write(901,'('' Error. No Kcsf node exists'')')
---
>       write(11,'('' Error. No Kcsf node exists'')')
8159c7926
<         write(901,'('' Error.  Desired grid level not supported'')')
---
>         write(11,'('' Error.  Desired grid level not supported'')')
8172c7939
<         write(901,'('' Error.  Expecting 3 grids for deforming'',
---
>         write(11,'('' Error.  Expecting 3 grids for deforming'',
8185c7952
<       write(901,'('' Error. No MovedGrid node exists'')')
---
>       write(11,'('' Error. No MovedGrid node exists'')')
8196c7963
<         write(901,'('' Error.  Expecting exactly 3 arrays under'',
---
>         write(11,'('' Error.  Expecting exactly 3 arrays under'',
8208c7975
<       write(901,'('' Error. No CoordinateX node exists'',
---
>       write(11,'('' Error. No CoordinateX node exists'',
8224c7991
<       write(901,'('' Error. No CoordinateY node exists'',
---
>       write(11,'('' Error. No CoordinateY node exists'',
8245c8012
<       write(901,'('' Error. No CoordinateZ node exists'',
---
>       write(11,'('' Error. No CoordinateZ node exists'',
8267c8034
<       write(901,'('' Error. No MovedGridLastDT node exists'')')
---
>       write(11,'('' Error. No MovedGridLastDT node exists'')')
8277c8044
<         write(901,'('' Error.  Expecting exactly 3 arrays under'',
---
>         write(11,'('' Error.  Expecting exactly 3 arrays under'',
8289c8056
<       write(901,'('' Error. No CoordinateX node exists'',
---
>       write(11,'('' Error. No CoordinateX node exists'',
8305c8072
<       write(901,'('' Error. No CoordinateY node exists'',
---
>       write(11,'('' Error. No CoordinateY node exists'',
8326c8093
<       write(901,'('' Error. No CoordinateZ node exists'',
---
>       write(11,'('' Error. No CoordinateZ node exists'',
8397c8164
<         write(901,'('' Error... numnames too small in waeromode'')')
---
>         write(11,'('' Error... numnames too small in waeromode'')')
8529c8296
<         write(901,'('' Error... numnames not big enough'',
---
>         write(11,'('' Error... numnames not big enough'',
8531c8298
<         write(901,'(''   increase numnames in raeromode'')')
---
>         write(11,'(''   increase numnames in raeromode'')')
8539c8306
<         write(901,'('' Error. No CFL3DAeroModeData node exists'')')
---
>         write(11,'('' Error. No CFL3DAeroModeData node exists'')')
8549c8316
<         write(901,'('' Error.  Too many arrays under'',
---
>         write(11,'('' Error.  Too many arrays under'',
8551c8318
<         write(901,'(''   increase numnames in raeromode'')')
---
>         write(11,'(''   increase numnames in raeromode'')')
8563c8330
<       write(901,'('' Error. No Timekeep node exists'')')
---
>       write(11,'('' Error. No Timekeep node exists'')')
8567c8334
<         write(901,'('' Error, Timekeep is wrong size'')')
---
>         write(11,'('' Error, Timekeep is wrong size'')')
8581c8348
<       write(901,'('' Error. No Xxn node exists'')')
---
>       write(11,'('' Error. No Xxn node exists'')')
8585c8352
<         write(901,'('' Error, Xxn is wrong size'')')
---
>         write(11,'('' Error, Xxn is wrong size'')')
8606c8373
<       write(901,'('' Error. No Gforcn node exists'')')
---
>       write(11,'('' Error. No Gforcn node exists'')')
8610c8377
<         write(901,'('' Error, Gforcn is wrong size'')')
---
>         write(11,'('' Error, Gforcn is wrong size'')')
8631c8398
<       write(901,'('' Error. No Gforcnm node exists'')')
---
>       write(11,'('' Error. No Gforcnm node exists'')')
8635c8402
<         write(901,'('' Error, Gforcnm is wrong size'')')
---
>         write(11,'('' Error, Gforcnm is wrong size'')')
8656c8423
<       write(901,'('' Error. No Aehist node exists'')')
---
>       write(11,'('' Error. No Aehist node exists'')')
8660c8427
<         write(901,'('' Error, Aehist is wrong size'')')
---
>         write(11,'('' Error, Aehist is wrong size'')')
Index: source/cfl3d/libs/ctime1.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/ctime1.F,v
retrieving revision 1.3
retrieving revision 1.2
diff -r1.3 -r1.2
5c5
< c     $Id: ctime1.F,v 1.3 2004/04/19 18:51:40 rumsey Exp $
---
> c     $Id: ctime1.F,v 1.2 2001/05/25 20:00:04 biedron Exp $
41d40
<       common /axisym/ iaxi2plane
96c95
<       if (i2d.eq.1 .or. iaxi2plane.eq.1) term = 0.
---
>       if (i2d.eq.1) term = 0.
Index: source/cfl3d/libs/deform.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/deform.F,v
retrieving revision 1.12
retrieving revision 1.4
diff -r1.12 -r1.4
1,1197d0
<       subroutine deform_el(islavept,nslave,nmaster,u,xst,yst,zst,
<      .                     nt,myhost,mycomm,myid,nnodes,
<      .                     mblk2nd,nblelst,maxbl,iseqr)
< c
< c***********************************************************************
< c     Purpose: Compute mesh deformation via Elastic Equations
< c***********************************************************************
< c
< 
<       integer stats
< c
<       dimension islavept(nslave,nmaster,5)
<       dimension xst(nslave),yst(nslave),zst(nslave)
<       dimension u(3*nslave)
<       dimension mblk2nd(maxbl)
<       dimension nblelst(maxbl,2)
< 
<       allocatable :: sa(:)
<       allocatable :: stiffl(:,:)
<       allocatable :: ija(:)
<       allocatable :: b(:)
<       allocatable :: ei(:)
<       allocatable :: ripm(:,:)
<       allocatable :: ej(:)
<       allocatable :: ek(:)
<       allocatable :: gij(:)
<       allocatable :: gjk(:)
<       allocatable :: gik(:)
<       allocatable :: xix(:)
<       allocatable :: xiy(:)
<       allocatable :: xiz(:)
<       allocatable :: etax(:)
<       allocatable :: etay(:)
<       allocatable :: etaz(:)
<       allocatable :: zetax(:)
<       allocatable :: zetay(:)
<       allocatable :: zetaz(:)
<       allocatable :: ooj(:)
<       allocatable :: volij(:)
<       allocatable :: volik(:)
<       allocatable :: tinv(:,:)
<       allocatable :: cjm1(:,:)
<       allocatable :: cjp1(:,:)
<       allocatable :: cim1(:,:)
<       allocatable :: cip1(:,:)
<       allocatable :: ckm1(:,:)
<       allocatable :: ckp1(:,:)
<       allocatable :: c(:,:)
<       allocatable :: t(:,:)
<       allocatable :: ul(:,:)
<       allocatable :: n1(:)
< 
< c
<       common /twod/ i2d
<       common /zero/ iexp
<       common /unst/ time,cfltau,ntstep,ita,iunst
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
< 
< c
<       memuse = 0
< c
<       allocate( sa(245*nslave+2), stat=stats )
<       call umalloc(245*nslave+2,0,'sa',memuse,stats)
<       allocate( stiffl(24,24), stat=stats )
<       call umalloc(576,0,'stiffl',memuse,stats)
<       allocate( ija(245*nslave+2), stat=stats )
<       call umalloc(245*nslave+2,1,'ija',memuse,stats)
<       allocate( b(3*nslave), stat=stats )
<       call umalloc(3*nslave,0,'b',memuse,stats)
<       allocate( ripm(7,nslave), stat=stats )
<       call umalloc(7*nslave,0,'ripm',memuse,stats)
<       allocate( ei(nslave), stat=stats )
<       call umalloc(nslave,0,'ei',memuse,stats)
<       allocate( ej(nslave), stat=stats )
<       call umalloc(nslave,0,'ej',memuse,stats)
<       allocate( ek(nslave), stat=stats )
<       call umalloc(nslave,0,'ek',memuse,stats)
<       allocate( gjk(nslave), stat=stats )
<       call umalloc(nslave,0,'gjk',memuse,stats)
<       allocate( gij(nslave), stat=stats )
<       call umalloc(nslave,0,'gij',memuse,stats)
<       allocate( gik(nslave), stat=stats )
<       call umalloc(nslave,0,'gik',memuse,stats)
<       allocate( xix(nslave), stat=stats )
<       call umalloc(nslave,0,'xix',memuse,stats)
<       allocate( xiy(nslave), stat=stats )
<       call umalloc(nslave,0,'xiy',memuse,stats)
<       allocate( xiz(nslave), stat=stats )
<       call umalloc(nslave,0,'xiz',memuse,stats)
<       allocate( etax(nslave), stat=stats )
<       call umalloc(nslave,0,'etax',memuse,stats)
<       allocate( etay(nslave), stat=stats )
<       call umalloc(nslave,0,'etay',memuse,stats)
<       allocate( etaz(nslave), stat=stats )
<       call umalloc(nslave,0,'etaz',memuse,stats)
<       allocate( zetax(nslave), stat=stats )
<       call umalloc(nslave,0,'zetax',memuse,stats)
<       allocate( zetay(nslave), stat=stats )
<       call umalloc(nslave,0,'zetay',memuse,stats)
<       allocate( zetaz(nslave), stat=stats )
<       call umalloc(nslave,0,'zetaz',memuse,stats)
<       allocate( ooj(nslave), stat=stats )
<       call umalloc(nslave,0,'ooj',memuse,stats)
< c     allocate( volij(nslave), stat=stats )
< c     call umalloc(nslave,0,'volij',memuse,stats)
<       allocate( volij(3*nslave), stat=stats )
<       call umalloc(3*nslave,0,'volij',memuse,stats)
<       allocate( volik(nslave), stat=stats )
<       call umalloc(nslave,0,'volik',memuse,stats)
<       allocate( tinv(6,6), stat=stats )
<       call umalloc(36,0,'tinv',memuse,stats)
<       allocate( cjm1(6,6), stat=stats )
<       call umalloc(36,0,'cjm1',memuse,stats)
<       allocate( cjp1(6,6), stat=stats )
<       call umalloc(36,0,'cjp1',memuse,stats)
<       allocate( cim1(6,6), stat=stats )
<       call umalloc(36,0,'cim1',memuse,stats)
<       allocate( cip1(6,6), stat=stats )
<       call umalloc(36,0,'cip1',memuse,stats)
<       allocate( ckm1(6,6), stat=stats )
<       call umalloc(36,0,'ckm1',memuse,stats)
<       allocate( ckp1(6,6), stat=stats )
<       call umalloc(36,0,'ckp1',memuse,stats)
<       allocate( c(6,6), stat=stats )
<       call umalloc(36,0,'c',memuse,stats)
<       allocate( t(6,6), stat=stats )
<       call umalloc(36,0,'t',memuse,stats)
<       allocate( ul(6,6), stat=stats )
<       call umalloc(36,0,'ul',memuse,stats)
<       allocate( n1(20), stat=stats )
<       call umalloc(20,1,'n1',memuse,stats)
< 
<       eps  = 100.*10.**(-iexp)
< c 
< c     n       = i,j,k
< c     islavept(2) = j - 1
< c     islavept(3) = j + 1
< c     islavept(4) = k - 1
< c     islavept(5) = k + 1
< c     islavept(6) = i - 1
< c     islavept(7) = i + 1
< c     islavept(10) = number of ija and sa array values to reserve for this
< c                    point
< c     islavept(11) = max number of coincident points at block interfaces
< c     islavept(12) = coincident pt 2 (pt n is the first)   
< c     islavept(13) = coincident pt 3
< c     islavept(14) = coincident pt 4
< c     islavept(15) = coincident pt 5
< c     islavept(16) = coincident pt 6
< c     islavept(17) = coincident pt 7
< c     islavept(18) = coincident pt 8
< c     islavept(19) = coincident pt 9
< c     islavept(20) = coincident pt 10
< c     islavept(21) = number of the nearest surface pt
< c
<       ipt = 3*nslave+2 
<       ija(1) = ipt
<       do n = 1,nslave 
<          ija(3*(n-1)+2)= ija(3*(n-1)+1) + islavept(n,10,iseqr)
<          ija(3*(n-1)+3)= ija(3*(n-1)+2) + islavept(n,10,iseqr) 
<          ija(3*n    +1)= ija(3*(n-1)+3) + islavept(n,10,iseqr) 
<       enddo
<       do n = 3*nslave+2,245*nslave+2
<         ija(n) = 0
<       enddo 
< c
< c
<        if(nt.eq.1.and.meshdef.eq.1) then
<           do n = 1,nslave
<            iimax = islavept(n,11,iseqr)
<            if(iimax.gt.1) then
<                 do ii2 = 2,iimax
<                   n2 = islavept(n,12+ii2-2,iseqr)
<                   test  = (xst(n2)-xst(n))*(xst(n2)-xst(n))
<      .                   +(yst(n2)-yst(n))*(yst(n2)-yst(n))
<      .                   +(zst(n2)-zst(n))*(zst(n2)-zst(n))
<                   test = sqrt(test)
<                   if(test.gt.100.*eps) then
<                    write(11,29102) n,n2,test
< 29102              format(' WARNING: Macro-elements ',i6,' and ',i6,
<      .           ' at 1-1 blocking interface have geometric mismatch'
<      .              ,' = ',e16.8)
<                   end if
<                 enddo
<            end if
<           enddo
<        end if
< 
< c
<       if(isktyp.gt.0) then 
<         gini = 10.d0 
<         eini = 10.d0 
< 
<         mxiter1 = 1      
< c
<         call elrhs(b,u,islavept,nslave,nmaster,iseqr) 
< 
<         do itr1 = 1,mxiter1 
< 
<           do n = 1,245*nslave+2
<             sa(n) = 0.d0 
<           enddo
< 
< 
<           if(meshdef.eq.1) then
<            if(myid.eq.myhost) then
<              write(11,21022) nslave 
< 21022        format(' Calculating macroelement moduli ',
<      .               'for ',i8,' element nodes')
<            end if
<           end if
<           call hookefe(ei,ej,ek,gij,gjk,gik,xst,yst,zst,volij,
<      .                 volik,eps,eini,gini,arg1,arg2,islavept,
<      .                 nslave,nmaster,nt,nnodes,myhost,myid,
<      .                 mycomm,mblk2nd,maxbl,iseqr)
< 
<           if(meshdef.eq.1) then
<            if(myid.eq.myhost) then
<              write(11,21023) 
< 21023        format(' Calculating macroelement metrics ')
<            end if
<           end if
< 
<           call elmetricsfe(xix,xiy,xiz,etax,etay,etaz,zetax,zetay,
<      .                     zetaz,ooj,xst,yst,zst,eps,islavept,nslave,
<      .                     nmaster,nnodes,myhost,myid,mycomm,
<      .                     mblk2nd,maxbl,iseqr)
<  
<           if(meshdef.eq.1) then
<            if(myid.eq.myhost) then
<              write(11,21024) 
< 21024        format(' Calculating and assembling macroelement stiffness'
<      .                ,'  matrix ')
<            end if
<           end if
< 
<           call elglobfe(sa,xst,yst,zst,xix,xiy,xiz,etax,etay,
<      .                  etaz,zetax,zetay,zetaz,ei,ej,ek,gij,gjk,
<      .                  gik,ooj,eps,stiffl,islavept,ija,nslave,
<      .                  nmaster,nnodes,myhost,myid,mycomm,mblk2nd,
<      .                  nblelst,maxbl,iseqr)
< 
<           if(meshdef.eq.1) then
<            if(myid.eq.myhost) then
<              write(11,21025) 
< 21025        format(' Solving the macroelement system ')
<            end if
<           end if
<          
<           ncount = 245*nslave+2
<           ndim   = 3*nslave
< c
<           call gaussseidel(ncount,ndim,b,u,sa,ija,1e-6,9*nslave,err
<      .                     ,volij,myid,myhost) 
< c         call dprec(sa,ija,b,ndim,ncount)
< 
< c         call linbcg(ncount,ndim,b,u,sa,ija,1,1e-6,nslave,iter,err
< c    .                ,time,eps,myid) 
<           
<           call coincdef(volij,u,islavept,nslave,nmaster,iseqr,n1)
<         enddo
<       else
< 
<           if(meshdef.eq.1) then
<            if(myid.eq.myhost) then
<              write(11,21027) 
< 21027        format(' Solving nodal displacements using exponential'
<      .              ,' decay  ')
<            end if
<           end if
<          
<           call expdecay(xst,yst,zst,u,volij,ei,ripm,eps,
<      .                  islavept,nslave,nmaster,ndim,nt,
<      .                  nnodes,myhost,myid,mycomm,mblk2nd,
<      .                  maxbl,iseqr)
<           call coincdef(volij,u,islavept,nslave,nmaster,iseqr,n1)
<       end if
< 
<         if(i2d.ne.0) then 
<           do n = 1,nslave
<             if(islavept(n,6,iseqr).eq.n) then
<               nip1     = islavept(n,7,iseqr)
<               u(3*(n-1)+1)    = .5*(u(3*(n-1)+1) + u(3*(nip1-1)+1))
<               u(3*(nip1-1)+1) = u(3*(n-1)+1)
<               u(3*(nip1-1)+2) = 0.
<               u(3*(n-1)+2)    = 0. 
<               u(3*(n-1)+3)    = .5*(u(3*(n-1)+3) + u(3*(nip1-1)+3))
<               u(3*(nip1-1)+3) = u(3*(n-1)+3) 
<             end if
<           enddo
<         end if
< c
< c     release memory
< c
<       deallocate(sa)
<       deallocate(stiffl)
<       deallocate(ija)
<       deallocate(b)
<       deallocate(ei)
<       deallocate(ripm)
<       deallocate(ej)
<       deallocate(ek)
<       deallocate(gij)
<       deallocate(gjk)
<       deallocate(gik)
<       deallocate(xix)
<       deallocate(xiy)
<       deallocate(xiz)
<       deallocate(etax)
<       deallocate(etay)
<       deallocate(etaz)
<       deallocate(zetax)
<       deallocate(zetay)
<       deallocate(zetaz)
<       deallocate(ooj)
<       deallocate(volij)
<       deallocate(volik)
<       deallocate(tinv)
<       deallocate(cjm1)
<       deallocate(cjp1)
<       deallocate(ckm1)
<       deallocate(ckp1)
<       deallocate(cim1)
<       deallocate(cip1)
<       deallocate(c)
<       deallocate(t)
<       deallocate(ul)
<       deallocate(n1)
< 
< 
<       return
<       end
< c
<       subroutine coincdef(volij,u,islavept,nslave,nmaster,iseqr,n1)
<       dimension islavept(nslave,nmaster,5)
<       dimension u(3*nslave),volij(3*nslave)
<       dimension n1(20) 
< c
<           volij = 0.
<           do n = 1,nslave
<            iimax = islavept(n,11,iseqr)
<            if(iimax.gt.1) then
<               n1(1) = n
<               if(islavept(n,8,iseqr).ne.0) then
<                 ii3 = 0
<                 do ii2 = 2,iimax
<                   n1(ii2) = islavept(n,12+ii2-2,iseqr)
<                   if(islavept(n1(ii2),8,iseqr).eq.0) ii3 = ii2
<                 enddo
<                 if(ii3.eq.0) then
<                   rooiim = 1./real(iimax)
<                   do ii2 = 1,iimax
<                     do j = 1,3
<                       volij(3*(n-1)+j) = volij(3*(n-1)+j) + 
<      .                                   u(3*(n1(ii2)-1)+j)*rooiim
<                     enddo
<                   enddo
<                 else
<                   do j = 1,3
<                     volij(3*(n-1)+j) = u(3*(n1(ii3)-1)+j)
<                   enddo
<                 end if
<               else
<                  do j = 1,3
<                    volij(3*(n-1)+j) = u(3*(n-1)+j)
<                  enddo
<               end if
<            end if
<           enddo
<           do n = 1,nslave
<            iimax = islavept(n,11,iseqr)
<            if(iimax.gt.1) then
<               n1(1) = n
<               do ii2 = 2,iimax
<                 n1(ii2) = islavept(n,12+ii2-2,iseqr)
<               enddo
<               do ii2 = 1,iimax
<                 do j = 1,3
<                   u(3*(n1(ii2)-1)+j) = volij(3*(n-1)+j)
<                 enddo
<               enddo
<            end if
<           enddo
< 
<       return
<       end
< c
<       SUBROUTINE gaussseidel(nc,n,b,x,sa,ija,tol,itmax,err, 
<      .                       xt,myid,myhost) 
<       parameter(EPS=1.d-12)  
<       INTEGER iter,itmax,itol,n 
<       INTEGER j 
<       dimension b(n),x(n)
<       dimension xt(n)
<       dimension ija(nc)
<       dimension sa(nc)
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
< 
<       it1 = 0
<       itmx1 =200
<       err   = 1.e+10
<       do it = 1,itmax
<         sum = 0.
<         resid = 0.
<         do i = 1,n
<           ut = b(i)/sa(i)  
<           do j = ija(i),ija(i+1)-1
<             ut = ut - sa(j)*x(ija(j))/sa(i)
<           enddo
<           xt(i) = alpha1*ut + (1.-alpha1)*x(i) 
<           sum = sum + (xt(i)-x(i))*(xt(i)-x(i))
<           resid1= sqrt((xt(i)-x(i))*(xt(i)-x(i)))
<           if(resid1.gt.resid) then
<            resid = resid1
<            nresmx= i
<           end if
<           x(i) = xt(i)
<         enddo
<         errold = err
<         err = sqrt(sum)
<         nresmx = 1+(nresmx-1)/3
<         if(meshdef.eq.1.and.myid.eq.myhost) 
<      .               write(1000+myid,31029) it,err,nresmx,resid   
< 31029   format(i8,e16.8,i8,e16.8)
<         if(err.lt.tol) goto 2000 
<         if(errold.lt.err) then
<           it1 = it1 + 1
<           if(it1.gt.itmx1) then
<              write(1000,21022) 
<              stop
<           end if
< 21022     format(' Stopping, Gauss-Seidel scheme not converging: '
<      .        ,/,' Reduce BETA1 or change Macro-element definition')
<         else
<           it1 = 0
<         end if
<       enddo
< 2000  continue 
<       if(myid.eq.myhost) write(1000+myid,31029) it,err   
<  
<       return
<       end
<       SUBROUTINE linbcg(nc,n,b,x,sa,ija,itol,tol,itmax,iter,err
<      .                  ,time,eps,myid) 
<       INTEGER iter,itmax,itol,n 
<       INTEGER j 
<       dimension b(n),x(n)
<       dimension ija(nc)
<       dimension sa(nc)
<       dimension p(n),pp(n),r(n),rr(n),z(n),zz(n)
< CU    USES atimes,asolve,snrm 
<       iter=0 
< 
<       test = 0.
<       do 5 j = 1,n
<         if(test.lt.abs(b(j))) test = abs(b(j))
< 5     continue
<       if(test.le.eps) return
<       call atimes(n,nc,x,r,sa,ija,0) 
<       do 11 j=1,n 
<         r(j)=b(j)-r(j) 
<         rr(j)=r(j) 
< 11    continue 
<       call atimes(n,nc,r,rr,sa,ija,0) 
<       znrm=1.d0 
<       if(itol.eq.1) then 
<         bnrm=snrm(n,b,itol) 
<       else if (itol.eq.2) then 
<         call asolve(n,nc,b,z,sa,0)
<         bnrm=snrm(n,z,itol) 
<       else if (itol.eq.3.or.itol.eq.4) then 
<         call asolve(n,nc,b,z,sa,0)
<         bnrm=snrm(n,z,itol) 
<         call asolve(n,nc,r,z,sa,0)
<         znrm=snrm(n,z,itol) 
<       else 
<         write(1000+myid,31922)
< 31922   format('illegal itol in linbcg') 
<         stop
<       endif 
<       if(bnrm.lt.EPS) then
<         err = 0.
<         znrm= 0.
<         goto 200 
<       end if
<       call asolve(n,nc,r,z,sa,0)
< 100   if (iter.le.itmax) then 
<         iter=iter+1 
<         call asolve(n,nc,rr,zz,sa,1)
<         bknum=0.d0 
<         do 12 j=1,n 
<           bknum=bknum+z(j)*rr(j) 
< 12      continue 
<         if(iter.eq.1) then 
<           do 13 j=1,n 
<             p(j)=z(j) 
<             pp(j)=zz(j) 
< 13        continue 
<         else 
<           bk=bknum/bkden 
<           do 14 j=1,n 
<             p(j)=bk*p(j)+z(j) 
<             pp(j)=bk*pp(j)+zz(j) 
< 14        continue 
<         endif 
<         bkden=bknum 
<         call atimes(n,nc,p,z,sa,ija,0) 
<         akden=0.d0 
<         do 15 j=1,n 
<           akden=akden+z(j)*pp(j) 
< 15      continue 
<         ak=bknum/akden 
<         call atimes(n,nc,pp,zz,sa,ija,1) 
< c
< c
<         do 16 j=1,n 
<           x(j)=x(j)+ak*p(j) 
<           r(j)=r(j)-ak*z(j) 
<           rr(j)=rr(j)-ak*zz(j) 
< 16      continue 
< c
<         
<         call asolve(n,nc,r,z,sa,0)
<         if(itol.eq.1.) then
<           if(bnrm.gt.EPS) then
<             err=snrm(n,r,itol)/bnrm 
<           else
<             err = 0.
<           end if
<              write(1000+myid,5040) iter,log10(err),znrm  
<         else if(itol.eq.2) then 
<           if(bnrm.gt.EPS) then
<             err=snrm(n,z,itol)/bnrm 
<           else
<             err = 0.
<           end if
<              write(1000+myid,5040) iter,log10(err),znrm  
<         else if(itol.eq.3.or.itol.eq.4)then 
<           zm1nrm=znrm 
<           znrm=snrm(n,z,itol)  
< c
<           if(abs(zm1nrm-znrm).gt.EPS*znrm) then 
<             dxnrm=abs(ak)*snrm(n,p,itol) 
<             if(abs(zm1nrm-znrm).gt.EPS) then
<               err=znrm/abs(zm1nrm-znrm)*dxnrm 
<             else
<               err = 0.
<             end if
<           else
<             if(bnrm.gt.EPS) then
<               err=znrm/bnrm 
<             else
<               err = 0.
<               znrm= 0. 
<             end if
< c            write(1000+myid,5042) iter,log10(err),znrm  
<             goto 100 
<           endif 
<           xnrm=snrm(n,x,itol) 
< c
<           if(err.le.0.5d0*xnrm) then 
<               if(xnrm.gt.EPS) then
<                 err=err/xnrm 
<               else
<                 err = 0.
<               end if
<              write(1000+myid,5043) iter,log10(err),znrm  
<           else 
<             if(bnrm.gt.EPS) then
<               err=znrm/bnrm 
<             else
<               err = 0.
<               znrm= 0. 
<             end if
< c            write(1000+myid,5044) iter,log10(err),znrm  
<             goto 100 
<           endif 
<         endif 
<       if(err.gt.tol) goto 100 
<       endif 
< 200   continue
< 5040    format('1',i8,2x,2(1x,e12.5)) 
< 5041    format('2',i8,2x,6(1x,e12.5)) 
< 5042    format('3',i8,2x,2(1x,e12.5)) 
< 5043    format('4',i8,2x,2(1x,e12.5)) 
< 5044    format('5',i8,2x,2(1x,e12.5)) 
< 
<       return 
<       END 
< 
< 
< C  (C) Copr. 1986-92 Numerical Recipes Software ">u,3. 
< 
< 
< 
<       SUBROUTINE atimes(n,nc,x,r,sa,ija,itrnsp) 
<       INTEGER n,itrnsp
<       dimension ija(nc)
<       dimension x(n),r(n),sa(nc) 
< CU    USES dsprsax,dsprstx 
<       if (itrnsp.eq.0) then 
<         call dsprsax(sa,ija,x,r,n,nc) 
<       else 
<         call dsprstx(sa,ija,x,r,n,nc) 
<       endif 
<       return 
<       END 
< C  (C) Copr. 1986-92 Numerical Recipes Software ">u,3.
< 
<       SUBROUTINE dsprstx(sa,ija,x,b,n,nc)
<       INTEGER n,ija(nc)
<       dimension b(n),sa(nc),x(n)
<       INTEGER i,j,k
<       if (ija(1).ne.n+2) then
<         write(1000+myid,3111) ija(1),n+2,nc 
< 3111    format('mismatched vector and matrix in sprstx',3i8) 
<         stop
<       end if 
<       do 11 i=1,n
<         b(i)=sa(i)*x(i)
< 11    continue
<       do 13 i=1,n
<         do 12 k=ija(i),ija(i+1)-1
<           j=ija(k)
<           b(j)=b(j)+sa(k)*x(i)
< 12      continue
< 13    continue
< c
<       return
<       END
< c
< c  Bartels preconditioner
< c
<       SUBROUTINE dprec(sa,ija,b,n,nc)
<       INTEGER ija(nc)
<       dimension sa(nc),b(n) 
<       INTEGER i,k
<       if (ija(1).ne.n+2) then
<         write(1000+myid,3111) ija(1),n+2,nc 
< 3111    format('mismatched vector and matrix in sprsax',3i8) 
<         stop
<       end if 
<       do 12 i=1,n
<         b(i) = b(i)/sa(i)
<         do 11 k=ija(i),ija(i+1)-1
<           sa(k)=sa(k)/sa(i)
< 11      continue
<         sa(i)=1.
< 12    continue
<       return
<       END
< C  (C) Copr. 1986-92 Numerical Recipes Software ">u,3.
< 
<       SUBROUTINE dsprsax(sa,ija,x,b,n,nc)
<       INTEGER n,ija(nc)
<       dimension b(n),sa(nc),x(n)
<       INTEGER i,k
<       if (ija(1).ne.n+2) then
<         write(1000+myid,3111) ija(1),n+2,nc 
< 3111    format('mismatched vector and matrix in sprsax',3i8) 
<         stop
<       end if 
<       do 12 i=1,n
<         b(i)=sa(i)*x(i)
<         do 11 k=ija(i),ija(i+1)-1
<           b(i)=b(i)+sa(k)*x(ija(k))
< 11      continue
< 12    continue
<       return
<       END
< C  (C) Copr. 1986-92 Numerical Recipes Software ">u,3.
< 
<       SUBROUTINE asolve(n,nc,b,x,sa,itrnsp) 
<       INTEGER n,itrnsp,i 
<       dimension x(n),b(n),sa(nc)
<       do 11 i=1,n 
<         x(i)=b(i)/sa(i) 
< 11    continue 
< 
<       return 
<       END 
< C  (C) Copr. 1986-92 Numerical Recipes Software ">u,3.
< 
<       FUNCTION snrm(n,sx,itol) 
<       INTEGER n,itol,i,isamax 
<       dimension sx(n)
<       if (itol.le.3)then 
<         snrm=0. 
<         do 11 i=1,n 
<           snrm=snrm+sx(i)**2 
< 11      continue 
<         snrm=sqrt(snrm) 
<       else 
<         isamax=1 
<         do 12 i=1,n 
<           if(abs(sx(i)).gt.abs(sx(isamax))) isamax=i 
< 12      continue 
<         snrm=abs(sx(isamax)) 
<       endif 
<       return 
<       END 
< c
< ************************************************************************
< *
< *         SUBROUTINE FOR THE INVERSION OF COMIN USING GAUSS-JORDAN
< *         WITH PIVOTING.
< *
< ************************************************************************
<       SUBROUTINE INVDET(UL,COMIN,N,DTNRM,DETM)
<       DIMENSION  UL(N,N),COMIN(N,N)
<       DIMENSION C(N,N),J(550)
<       DO 10 K = 1,n
<         DO 12 I = 1,n
<           C(I,K) = COMIN(I,K)
< 12      CONTINUE
< 10    CONTINUE
<       PD = 1.D0
<       DO 124 L = 1,N
<         DD = 0.D0
<         DO 123 K = 1,N
< 123     DD = DD + C(L,K)*C(L,K)
<         DD = SQRT(DD)
< 124   PD = PD*DD
<       DETM = 1.D0
<       DO 125 L = 1,N
< 125   J(L+20) = L
<       DO 144 L = 1,N
<         CC = 0.D0
<         M  = L
<         DO 135 K = L,N
<           IF((ABS(CC)-ABS(C(L,K))).GE.0.D0) GOTO 135
< 126       M = K
<           CC = C(L,K)
< 135     CONTINUE
< 127     IF(L.EQ.M) GOTO 138
< 128     K = J(M+20)
<         J(M+20) = J(L+20)
<         J(L+20) = K
<         DO 137 K = 1,N
<           S = C(K,L)
<           C(K,L) = C(K,M)
< 137     C(K,M) = S
< 138     C(L,L) = 1.D0
<         DETM = DETM*CC
<         DO 139 M = 1,N
< 139     C(L,M) = C(L,M)/CC
<         DO 142 M = 1,N
<           IF(L.EQ.M) GOTO 142
< 129       CC = C(M,L)
<           IF(CC.EQ.0.D0) GOTO 142
< 130       C(M,L) = 0.D0
<           DO 141 K = 1,N
< 141       C(M,K) = C(M,K) - CC*C(L,K)
< 142     CONTINUE
< 144   CONTINUE
<       DO 143 L = 1,N
<         IF(J(L+20).EQ.L) GOTO 143
< 131     M = L
< 132     M = M + 1
<         IF(J(M+20).EQ.L) GOTO 133
< 136     IF(N.GT.M) GOTO 132
< 133     J(M+20) = J(L+20)
<         DO 163 K = 1,N
<           CC = C(L,K)
<           C(L,K) = C(M,K)
< 163     C(M,K) = CC
<         J(L+20) = L
< 143   CONTINUE
<       DETM = ABS(DETM)
<       DTNRM = DETM/PD
<       DO 210 k = 1,N
<         DO 212 I = 1,N
<           UL(I,K) = C(I,K)
< 212     CONTINUE
< 210   CONTINUE
<       RETURN
<       END
<       subroutine expdecay(xst,yst,zst,u,ut,r,ripm,eps,
<      .                    islavept,nslave,nmaster,ndim,nt,
<      .                    nnodes,myhost,myid,mycomm,mblk2nd,
<      .                    maxbl,iseqr)
<       dimension islavept(nslave,nmaster,5)
<       dimension xst(nslave),yst(nslave),zst(nslave)
<       dimension ut(ndim),u(ndim)
<       dimension r(nslave),ripm(7,nslave)
<       dimension mblk2nd(maxbl)
<       dimension arg(7),coef(8),rsn(7)
<       dimension nipm(7),nsf(7),n3(7)
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
<       common /sgminmax/ rmin,rmax
< 
<       relax = 1.0
< c
< c    Do this at every time step because the closest surface
< c    point to a control point will potentially change as a
< c    surface moves.
< c
<         do n1 = 1,nslave
<           r(n1) = 1.e6 
<           if(islavept(n1,8,iseqr).ne.0) then
<            do n2 = 1,nslave
<             if(islavept(n2,8,iseqr).eq.0) then
<               test  = (xst(n2)-xst(n1))*(xst(n2)-xst(n1))
<      .               +(yst(n2)-yst(n1))*(yst(n2)-yst(n1))
<      .               +(zst(n2)-zst(n1))*(zst(n2)-zst(n1))
<               test  = sqrt(test)
<               if(r(n1).gt.test) then
<                 r(n1)             = test
<                 islavept(n1,21,iseqr) = n2
<               end if
<             end if
<            enddo
<           else
<            r(n1) = 0.
<            islavept(n1,21,iseqr) = n1
<           end if
<         enddo
<         if(nt.eq.1) then
<           rmax = 0. 
<           rmin = 1.e+30  
<           do n = 1,nslave
<             rave =  r(n)
<             if(rave.gt.rmax) rmax = rave   
<             if(rave.lt.rmin.and.rave.gt.0.) rmin = rave  
<           enddo
<         end if
<         eps = rmin/10000.
<         do n = 1,nslave
<           nsf(1)  = islavept(n,8,iseqr)
<           if(nsf(1).ne.0) then
<             nipm(1)= n
<             nipm(2)= islavept(n,2,iseqr)
<             nipm(3)= islavept(n,3,iseqr)
<             nipm(4)= islavept(n,4,iseqr)
<             nipm(5)= islavept(n,5,iseqr)
<             nipm(6)= islavept(n,6,iseqr)
<             nipm(7)= islavept(n,7,iseqr)
<             do ii = 1,7
<               nsf(ii)  = islavept(nipm(ii),8,iseqr)
<               if(n.ne.nipm(ii)) then 
<                 ripm(ii,n)=(xst(n)-xst(nipm(ii)))*(xst(n)-xst(nipm(ii)))
<      .                    +(yst(n)-yst(nipm(ii)))*(yst(n)-yst(nipm(ii)))
<      .                    +(zst(n)-zst(nipm(ii)))*(zst(n)-zst(nipm(ii)))
<      .                     +eps 
<                 ripm(ii,n) = sqrt(ripm(ii,n))
<               else
<                 ripm(ii,n) = 1.e+30
<               end if  
<             enddo
<             coef   = 0.
<             coef(8)= 1.
<             coef(1)= 1.
<             do ii = 2,7
<               if(n.ne.nipm(ii)) then
<                 coef(ii)= exp(-100.*ripm(ii,n)/rmax)
<                 coef(8)= coef(8) + coef(ii)
<               end if
<             enddo
<             n3(1) = islavept(n,21,iseqr)
<             rsn(1)= r(n)
<             do ii = 2,7
<               n3(ii) = islavept(nipm(ii),21,iseqr)
<               rsn(ii)= r(nipm(ii))
<             enddo
<             n2    = n3(1)
<             arg(1) = - beta2*(rsn(1)/rmax  - alpha2) 
<             if(arg(1).gt.0.) arg(1) = 0.
<             coef(1)= coef(1)/coef(8) 
<             do ii = 2,7
<               if(n.ne.nipm(ii)) then 
<                 n2    = n3(ii)
<                 arg(ii) = - beta2*(rsn(ii)/rmax  - alpha2) 
<                 if(arg(ii).gt.0.) arg(ii) = 0.
<                 coef(ii)= coef(ii)/coef(8) 
<               else
<                 coef(ii) = 0.
<                 arg(ii)  = 0.
<               end if
<             enddo
<             do j = 1,3
<               n2 = n3(1)
<               u(3*(n-1)+j) = u(3*(n2-1)+j)*exp(arg(1))
<             enddo
<           end if
<         enddo
<        do it = 1,nsprgit   
<         do n = 1,nslave
<           nipm(2)= islavept(n,2,iseqr)
<           nipm(3)= islavept(n,3,iseqr)
<           nipm(4)= islavept(n,4,iseqr)
<           nipm(5)= islavept(n,5,iseqr)
<           nipm(6)= islavept(n,6,iseqr)
<           nipm(7)= islavept(n,7,iseqr)
<           nsf(1) = islavept(n,8,iseqr)
< c         do ii = 2,7
< c           nsf(ii) = islavept(nipm(ii),8,iseqr)
< c         enddo
<           if(nsf(1).ne.0) then
<             coef1 = 0. 
<             do ii = 2,7
<               coef1= coef1 + 1./ripm(ii,n)
<             enddo
<             do j = 1,3
<               ut(3*(n-1)+j) = 0.
<               do ii = 2,7
<                ut(3*(n-1)+j)= ut(3*(n-1)+j)
<      .             + u(3*(nipm(ii)-1)+j)/ripm(ii,n)/coef1   
<               enddo
<             enddo
<           end if
<         enddo
<         do n = 1,nslave
<           nipm(2)= islavept(n,2,iseqr)
<           nipm(3)= islavept(n,3,iseqr)
<           nipm(4)= islavept(n,4,iseqr)
<           nipm(5)= islavept(n,5,iseqr)
<           nipm(6)= islavept(n,6,iseqr)
<           nipm(7)= islavept(n,7,iseqr)
<           nsf(1) = islavept(n,8,iseqr)
< c         do ii = 2,7
< c           nsf(ii) = islavept(nipm(ii),8,iseqr)
< c         enddo
<           if(nsf(1).ne.0) then
<             u(3*(n-1)+1) = relax*ut(3*(n-1)+1)+(1.-relax)*u(3*(n-1)+1) 
<             u(3*(n-1)+2) = relax*ut(3*(n-1)+2)+(1.-relax)*u(3*(n-1)+2) 
<             u(3*(n-1)+3) = relax*ut(3*(n-1)+3)+(1.-relax)*u(3*(n-1)+3) 
<           end if
<         enddo
<        enddo
< 
<       return
<       end
< 
<       subroutine hookefe(ei,ej,ek,gij,gjk,gik,xst,yst,zst,volij,
<      .                   volik,eps,eini,gini,arg1,arg2,islavept,
<      .                   nslave,nmaster,nt,nnodes,myhost,myid,
<      .                   mycomm,mblk2nd,maxbl,iseqr)
<       dimension islavept(nslave,nmaster,5)
<       dimension xst(nslave),yst(nslave),zst(nslave)
<       dimension ei(nslave),ej(nslave),ek(nslave),gij(nslave),
<      .          gjk(nslave),gik(nslave)
<       dimension volik(nslave),volij(3*nslave)
<       dimension r(nslave),r1(0:8) 
<       dimension ni1(0:8),ni0(0:8),test1(0:8) 
<       dimension mblk2nd(maxbl)
<       common /sgminmax/ rmin,rmax
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
< 
< c
< c    Do this at every time step because the closest surface
< c    point to a control point will potentially change as a
< c    surface moves.
< c
< c       if(nt.eq.1) then
<           rmax = 0. 
<           rmin = 1.e+30  
< c       end if  
<         do n1 = 1,nslave
<           r(n1) = 1.e6 
<           ni0(0)    = n1
<           ni0(1)    = islavept(n1    ,3,iseqr)
<           ni0(2)    = islavept(n1    ,5,iseqr)
<           ni0(3)    = islavept(ni0(1),5,iseqr)
<           ni0(4)    = islavept(n1    ,7,iseqr)
<           ni0(5)    = islavept(ni0(2),7,iseqr)
<           ni0(6)    = islavept(ni0(1),7,iseqr)
<           ni0(7)    = islavept(ni0(6),5,iseqr)
<           if(ni0(1).ne.n1.and.ni0(2).ne.n1.and.ni0(4).ne.n1) then
<            xcent = 0.
<            ycent = 0.
<            zcent = 0.
<            do ii = 0,7
<              xcent = xcent + xst(ni0(ii))/8. 
<              ycent = ycent + yst(ni0(ii))/8. 
<              zcent = zcent + zst(ni0(ii))/8. 
<            enddo
<            do n2 = 1,nslave
<             if(islavept(n2,8,iseqr).eq.0) then
<               ni1(0)    = n2
<               ni1(1)    = islavept(n2    ,3,iseqr)
<               ni1(2)    = islavept(n2    ,5,iseqr)
<               ni1(3)    = islavept(ni1(1),5,iseqr)
<               ni1(4)    = islavept(n2    ,7,iseqr)
<               ni1(5)    = islavept(ni1(2),7,iseqr)
<               ni1(6)    = islavept(ni1(1),7,iseqr)
<               ni1(7)    = islavept(ni1(6),5,iseqr)
<               test  = (xst(n2)-xcent)*(xst(n2)-xcent)
<      .               +(yst(n2)-ycent)*(yst(n2)-ycent)
<      .               +(zst(n2)-zcent)*(zst(n2)-zcent)
<               test    = sqrt(test)
<               if(r(n1).gt.test) then
<                 r(n1)                 = test   
<                 islavept(n1,21,iseqr) = n2
<               end if
<               if(islavept(ni1(1),8,iseqr).eq.0.and.
<      .           islavept(ni1(2),8,iseqr).eq.0) then 
<                  xsct = (xst(n2)+xst(ni1(1))+xst(ni1(2))
<      .                    +xst(ni1(3)))/4.
<                  ysct = (yst(n2)+yst(ni1(1))+yst(ni1(2))
<      .                    +yst(ni1(3)))/4.
<                  zsct = (zst(n2)+zst(ni1(1))+zst(ni1(2))
<      .                    +zst(ni1(3)))/4.
<                  test  = (xsct-xcent)*(xsct-xcent)
<      .                  +(ysct-ycent)*(ysct-ycent)
<      .                  +(zsct-zcent)*(zsct-zcent)
<                  test    = sqrt(test)
<                  if(r(n1).gt.test) then
<                     r(n1)                 = test   
<                     islavept(n1,21,iseqr) = n2
<                  end if
<               end if
<               if(islavept(ni1(2),8,iseqr).eq.0.and.
<      .           islavept(ni1(4),8,iseqr).eq.0) then 
<                  xsct = (xst(n2)+xst(ni1(2))+xst(ni1(4))
<      .                    +xst(ni1(5)))/4.
<                  ysct = (yst(n2)+yst(ni1(2))+yst(ni1(4))
<      .                    +yst(ni1(5)))/4.
<                  zsct = (zst(n2)+zst(ni1(2))+zst(ni1(4))
<      .                    +zst(ni1(5)))/4.
<                  test  = (xsct-xcent)*(xsct-xcent)
<      .                  +(ysct-ycent)*(ysct-ycent)
<      .                  +(zsct-zcent)*(zsct-zcent)
<                  test    = sqrt(test)
<                  if(r(n1).gt.test) then
<                     r(n1)                 = test   
<                     islavept(n1,21,iseqr) = n2
<                  end if
<               end if
<               if(islavept(ni1(1),8,iseqr).eq.0.and.
<      .           islavept(ni1(4),8,iseqr).eq.0) then 
<                  xsct = (xst(n2)+xst(ni1(1))+xst(ni1(4))
<      .                    +xst(ni1(6)))/4.
<                  ysct = (yst(n2)+yst(ni1(1))+yst(ni1(4))
<      .                    +yst(ni1(6)))/4.
<                  zsct = (zst(n2)+zst(ni1(1))+zst(ni1(4))
<      .                    +zst(ni1(6)))/4.
<                  test  = (xsct-xcent)*(xsct-xcent)
<      .                  +(ysct-ycent)*(ysct-ycent)
<      .                  +(zsct-zcent)*(zsct-zcent)
<                  test    = sqrt(test)
<                  if(r(n1).gt.test) then
<                     r(n1)                 = test   
<                     islavept(n1,21,iseqr) = n2
<                  end if
<               end if
<           
<             end if
<            enddo
< c          if(nt.eq.1) then
<              n2    = islavept(n1,21,iseqr)
<              if(r(n1).gt.rmax) rmax = r(n1)    
<              if(r(n1).lt.rmin.and.r(n1).gt.0.) rmin = r(n1)   
< c          end if
<           end if 
<         enddo
< 
<          
<  
<       e0 = 500000.
<       r0 = (rmax*alog(1.-eini/e0)+beta1*rmin)/
<      .     (     alog(1.-eini/e0)+beta1     ) 
<   
<       do n = 1,nslave
<        nbl = islavept(n,9,iseqr)
<         ni0(1)    = islavept(n     ,3,iseqr)
<         ni0(2)    = islavept(n     ,5,iseqr)
<         ni0(4)    = islavept(n     ,7,iseqr)
<         if(ni0(1).ne.n.and.ni0(2).ne.n.and.ni0(4).ne.n) then
<           rave = r(n)
<           fact     = 1./(1.-exp(-beta1*(rave-r0)/(rmax-r0))) 
<           ej(n) = eini*fact
<           ek(n) = eini*fact
<           ei(n) = eini*fact
<           gij(n)= gini*fact
<           gik(n)= gini*fact
<           gjk(n)= gini*fact
<         end if
<       enddo
<       return
<       end
< 
<       subroutine elmetricsfe(xix,xiy,xiz,etax,etay,etaz,zetax,zetay,
<      .                       zetaz,ooj,xs,ys,zs,eps,islavept,nslave,
<      .                       nmaster,nnodes,myhost,myid,mycomm,
<      .                       mblk2nd,maxbl,iseqr)
< 
<       dimension islavept(nslave,nmaster,5)
<       dimension xs(nslave),ys(nslave),zs(nslave)
<       dimension xix(nslave),xiy(nslave),xiz(nslave),
<      .          etax(nslave),etay(nslave),etaz(nslave),
<      .          zetax(nslave),zetay(nslave),zetaz(nslave),
<      .          ooj(nslave)
<       dimension mblk2nd(maxbl)
< 
< c
<       do n = 1,nslave
<        nbl = islavept(n,9,iseqr)
< c      if (myid .eq. mblk2nd(nbl)) then 
<         njp    = islavept(n,3,iseqr)
<         nkp    = islavept(n,5,iseqr)
<         njpkp  = islavept(nkp,3,iseqr)
<         nip    = islavept(n,7,iseqr)
<         nipkp  = islavept(nkp,7,iseqr)
<         njpip  = islavept(njp,7,iseqr)
<         njpipkp= islavept(njpip,5,iseqr)
<         if(njp.ne.n.and.nip.ne.n.and.nkp.ne.n) then
<           xxi    =.25*(xs(njp)  -xs(n)  +xs(njpkp)  -xs(nkp)
<      .                +xs(njpip)-xs(nip)+xs(njpipkp)-xs(nipkp))
<           xeta   =.25*(xs(nkp)  -xs(n)  +xs(njpkp)  -xs(njp)
<      .                +xs(nipkp)-xs(nip)+xs(njpipkp)-xs(njpip))
<           xzeta  =.25*(xs(nip)  -xs(n)  +xs(nipkp)  -xs(nkp)
<      .                +xs(njpip)-xs(njp)+xs(njpipkp)-xs(njpkp))
<           yxi    =.25*(ys(njp)  -ys(n)  +ys(njpkp)  -ys(nkp)
<      .                +ys(njpip)-ys(nip)+ys(njpipkp)-ys(nipkp))
<           yeta   =.25*(ys(nkp)  -ys(n)  +ys(njpkp)  -ys(njp)
<      .                +ys(nipkp)-ys(nip)+ys(njpipkp)-ys(njpip))
<           yzeta  =.25*(ys(nip)  -ys(n)  +ys(nipkp)  -ys(nkp)
<      .                +ys(njpip)-ys(njp)+ys(njpipkp)-ys(njpkp))
<           zxi    =.25*(zs(njp)  -zs(n)  +zs(njpkp)  -zs(nkp)
<      .                +zs(njpip)-zs(nip)+zs(njpipkp)-zs(nipkp))
<           zeta   =.25*(zs(nkp)  -zs(n)  +zs(njpkp)  -zs(njp)
<      .                +zs(nipkp)-zs(nip)+zs(njpipkp)-zs(njpip))
<           zzeta  =.25*(zs(nip)  -zs(n)  +zs(nipkp)  -zs(nkp)
<      .                +zs(njpip)-zs(njp)+zs(njpipkp)-zs(njpkp))
<           ooj(n)  = 1./(  xxi*(yeta*zzeta-yzeta*zeta)
<      .                  -xeta*(yxi *zzeta-yzeta*zxi )
<      .                 +xzeta*(yxi *zeta -yeta *zxi )) 
<           xix(n)  =(yeta*zzeta-yzeta*zeta)*ooj(n)
<           xiy(n)  =(xzeta*zeta-xeta*zzeta)*ooj(n)
<           xiz(n)  =(xeta*yzeta-xzeta*yeta)*ooj(n)
<           etax(n) =(yzeta*zxi -yxi *zzeta)*ooj(n)
<           etay(n) =(xxi*zzeta -xzeta* zxi)*ooj(n)
<           etaz(n) =(xzeta*yxi -xxi *yzeta)*ooj(n)
<           zetax(n)=(yxi *zeta -yeta*  zxi)*ooj(n)
<           zetay(n)=(xeta*zxi  -xxi * zeta)*ooj(n)
<           zetaz(n)=(xxi *yeta -xeta*  yxi)*ooj(n)
<         else
<           ooj(n)  = 0.
<           xix(n)  = 0.
<           xiy(n)  = 0.
<           xiz(n)  = 0.
<           etax(n) = 0.
<           etay(n) = 0.
<           etaz(n) = 0.
<           zetax(n)= 0.
<           zetay(n)= 0.
<           zetaz(n)= 0.
<         end if
< c      end if
<       enddo
<   
<       return
<       end
< c
<       subroutine elrhs(b,u,islavept,nslave,nmaster,iseqr) 
<       dimension islavept(nslave,nmaster,5)
<       dimension b(3*nslave)
<       dimension u(3*nslave)
< c
< c
<       do n = 1,nslave
<          ii4  = 1
<          ni3  = 0 
<          if(islavept(n,8,iseqr).eq.0) ii4 = 0
<          if(ii4.ne.0) then
<            iimax = islavept(n,11,iseqr)
<            do ii2 = 2,iimax
<              ni3 = islavept(n,12+ii2-2,iseqr)
<              if(islavept(ni3,8,iseqr).eq.0) then
<                ii4 = 0
<                goto 1500
<              end if
<            enddo
<          end if
< 1500     continue
< 
<        if(ii4.eq.0.and.ni3.eq.0) then
<          b(3*(n-1)+1) =  u(3*(n-1)+1)
<          b(3*(n-1)+2) =  u(3*(n-1)+2)
<          b(3*(n-1)+3) =  u(3*(n-1)+3)
<        else if(ii4.eq.0.and.ni3.ne.0) then
<          b(3*(n-1)+1) =  u(3*(ni3-1)+1)
<          b(3*(n-1)+2) =  u(3*(ni3-1)+2)
<          b(3*(n-1)+3) =  u(3*(ni3-1)+3)
<        else
<          b(3*(n-1)+1) =  0.
<          b(3*(n-1)+2) =  0.
<          b(3*(n-1)+3) =  0.
<        end if
<       enddo
< 
<       return
<       end
1199c2
<      .                  xnm1,ynm1,znm1,deltj,deltk,delti,u,
---
>      .                  xnm1,ynm1,znm1,deltj,deltk,delti,
1201c4
<      .                  maxbl,dt,nou,bou,nbuf,ibufdim,myid,
---
>      .                  maxbl,time,dt,ita,nou,bou,nbuf,ibufdim,myid,
1204c7
<      .                  irst,iflag,islavept,nslave,iskip,jskip,
---
>      .                  irst,iflag,ivert,slavept,nslave,iskip,jskip,
1206c9
<      .                  nmaster,iseq,iskmax,jskmax,kskmax,nt)
---
>      .                  nmaster,iseq)
1208c11
< c     $Id: deform.F,v 1.12 2005/10/07 01:23:28 rebart Exp $
---
> c     $Id: deform.F,v 1.4 2003/05/09 19:48:00 rumsey Exp $
1220,1221c23,24
< c     isktyp  = 0 use only transfinite interpolation 
< c             > 0 do isktyp smoothing steps using the spring analogy 
---
> c     ismooth = 0 use only transfinite interpolation 
> c             > 0 do ismooth smoothing steps using the spring analogy 
1243c46
<       dimension iskip(maxbl,500)
---
>       dimension iskip(maxbl)
1247c50
<       dimension jskip(maxbl,500)
---
>       dimension jskip(maxbl)
1251c54
<       dimension kskip(maxbl,500)
---
>       dimension kskip(maxbl)
1260c63
<       dimension islavept(nslave,nmaster,5)
---
>       dimension slavept(nslave,3,nmaster,5)
1263,1275c66,74
<       dimension x(jdim*kdim*idim)
<       dimension xnm1(jdim*kdim*idim)
<       dimension xnm2(jdim*kdim*idim)
<       dimension y(jdim*kdim*idim)
<       dimension ynm1(jdim*kdim*idim)
<       dimension ynm2(jdim*kdim*idim)
<       dimension z(jdim*kdim*idim)
<       dimension znm1(jdim*kdim*idim)
<       dimension znm2(jdim*kdim*idim)
<       dimension u(3*nslave)
<       dimension iskmax(maxbl)
<       dimension jskmax(maxbl)
<       dimension kskmax(maxbl)
---
>       dimension x(jdim,kdim,idim)
>       dimension xnm1(jdim,kdim,idim)
>       dimension xnm2(jdim,kdim,idim)
>       dimension y(jdim,kdim,idim)
>       dimension ynm1(jdim,kdim,idim)
>       dimension ynm2(jdim,kdim,idim)
>       dimension z(jdim,kdim,idim)
>       dimension znm1(jdim,kdim,idim)
>       dimension znm2(jdim,kdim,idim)
1280c79,80
<       allocatable :: dx(:)
---
>       allocatable :: dvol(:)
>       allocatable :: dx(:,:,:)
1284,1288c84
<       allocatable :: dx4(:,:,:)
<       allocatable :: dx5(:,:,:)
<       allocatable :: dx6(:,:,:)
<       allocatable :: dx7(:,:,:)
<       allocatable :: dy(:)
---
>       allocatable :: dy(:,:,:)
1292,1296c88
<       allocatable :: dy4(:,:,:)
<       allocatable :: dy5(:,:,:)
<       allocatable :: dy6(:,:,:)
<       allocatable :: dy7(:,:,:)
<       allocatable :: dz(:)
---
>       allocatable :: dz(:,:,:)
1300,1303d91
<       allocatable :: dz4(:,:,:)
<       allocatable :: dz5(:,:,:)
<       allocatable :: dz6(:,:,:)
<       allocatable :: dz7(:,:,:)
1304a93,97
>       allocatable :: jend(:)
>       allocatable :: jsta(:)
>       allocatable :: xoi(:,:)
>       allocatable :: xoj(:,:)
>       allocatable :: xok(:,:)
1307,1310c100
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
<       common /unst/ time,cfltau,ntstep,ita,iunst
<       common /moov/movie,nframes,icall1,lhdr
---
>       common /deformz/ beta1,ismooth,negvol
1322c112
<       allocate( dx(jdim*kdim*idim), stat=stats )
---
>       allocate( dx(jdim,kdim,idim), stat=stats )
1330,1338c120
<       allocate( dx4(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dx4',memuse,stats)
<       allocate( dx5(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dx5',memuse,stats)
<       allocate( dx6(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dx6',memuse,stats)
<       allocate( dx7(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dx7',memuse,stats)
<       allocate( dy(jdim*kdim*idim), stat=stats )
---
>       allocate( dy(jdim,kdim,idim), stat=stats )
1346,1354c128
<       allocate( dy4(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dy4',memuse,stats)
<       allocate( dy5(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dy5',memuse,stats)
<       allocate( dy6(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dy6',memuse,stats)
<       allocate( dy7(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dy7',memuse,stats)
<       allocate( dz(jdim*kdim*idim), stat=stats )
---
>       allocate( dz(jdim,kdim,idim), stat=stats )
1362,1369d135
<       allocate( dz4(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dz4',memuse,stats)
<       allocate( dz5(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dz5',memuse,stats)
<       allocate( dz6(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dz6',memuse,stats)
<       allocate( dz7(jdim,kdim,idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dz7',memuse,stats)
1380,1442c146,151
<       do j=1,idim*jdim*kdim
<         dx(j) = 0.
<         dy(j) = 0.
<         dz(j) = 0.
<       end do
<       do n = 1,nslave
<         nbl1= islavept(n,9,iseq)
<         ll  = islavept(n,1,iseq)
<         if(nbl1.eq.nbl) then
<           dx(ll+1) = u(3*(n-1)+1)
<           dy(ll+1) = u(3*(n-1)+2)
<           dz(ll+1) = u(3*(n-1)+3)
<         end if
<       enddo
<       if(meshdef.eq.1) then
<         inc = ntstep
<         if(movie.ne.0) then
<           rinc1 = real(nt)/real(movie)
<           inc1  = nt/movie
<           if(real(inc1).eq.rinc1) inc = nt
<         end if
<         if(nt.eq.inc) then
<           write(4000+myid,81621) jskmax(nbl),kskmax(nbl),iskmax(nbl),nbl
<      .                        ,nt
< 81621 format('ZONE I = ',i8,'  J = ',i8,' K = ',i8,
<      .               ' T="Block ',i5,' Time Step = ',i6,'"')
< 31920   format(3(1x,e16.8),1x,e16.8,2(1x,e16.8),2i8)
<           do n = 1,nslave
<             nbl1= islavept(n,9,iseq)
<             ll  = islavept(n,1,iseq)
<             n2  = islavept(n,21,iseq)
<             if(nbl1.eq.nbl) then
<               write(4000+myid,31920) x(ll+1)+u(3*(n-1)+1)
<      .                             ,y(ll+1)+u(3*(n-1)+2)
<      .                             ,z(ll+1)+u(3*(n-1)+3)
<      .                             ,u(3*(n-1)+1)
<      .                             ,u(3*(n-1)+2)
<      .                             ,u(3*(n-1)+3),n,n2
<             end if
<           enddo
<         end if
<       end if
< c
< c
<       if(abs(isktyp).eq.1) then
<         iskp = iskip(nbl,1)
<         jskp = jskip(nbl,1)
<         kskp = kskip(nbl,1)
<       end if
< c
< c     i=1 to idim  subfaces
< c
<       if(abs(isktyp).eq.1) then
<        do i = 1,idim,iskp     
<          js = 1
<          je = jdim
<          ks = 1
<          ke = kdim
<          do j=js,je-jskp,jskp
<             do k=ks,ke,kskp
<                call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i,
<      .                      j,j+jskp,k,k,arci,arcj,arck,
<      .                      nou,bou,nbuf,ibufdim,myid,nbl)
---
>       do i=1,idim
>          do j=1,jdim
>             do k=1,kdim
>                dx(j,k,i) = 0.
>                dy(j,k,i) = 0.
>                dz(j,k,i) = 0.
1445,1479c154
<          do j=js,je,jskp
<             do k=ks,ke-kskp,kskp
<                call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i,
<      .                      j,j,k,k+kskp,arci,arcj,arck,
<      .                      nou,bou,nbuf,ibufdim,myid,nbl)
<             end do
<          end do
<        enddo
<       else
<        do i1 = 1,iskmax(nbl)     
<          i = iskip(nbl,i1)
<          do j1=1,jskmax(nbl)-1 
<             j = jskip(nbl,j1)
<             jskp = jskip(nbl,j1+1)
<             do k1=1,kskmax(nbl) 
<                k = kskip(nbl,k1)
<                call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i,
<      .                      j,jskp,k,k,arci,arcj,arck,
<      .                      nou,bou,nbuf,ibufdim,myid,nbl)
<             end do
<          end do
<          do j1=1,jskmax(nbl)
<             j = jskip(nbl,j1)
<             do k1=1,kskmax(nbl)-1
<                k = kskip(nbl,k1)
<                kskp = kskip(nbl,k1+1)
<                call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i,
<      .                      j,j,k,kskp,arci,arcj,arck,
<      .                      nou,bou,nbuf,ibufdim,myid,nbl)
<             end do
<          end do
<        enddo
<       end if
< c
< c            preserve deltas on edges of solid surfaces
---
>       end do
1481,1485c156,166
<              if (idefrm(nbl).lt.999) then
<                   call bc_delt(nbl,dx,dy,dz,deltj,deltk,delti,jcsi,
<      .                         jcsf,kcsi,kcsf,icsi,icsf,jdim,kdim,
<      .                         idim,maxbl,maxsegdg,nsegdfrm)
<              end if
---
> c     determine the master surface point for the 4 corner
> c     points of each block subface that is NOT on a solid
> c     surface, and calculate the deltas for the corner
> c     points based on a decaying function of distance.
> c     (the x,y,z and dx,dy,dz of the master surface points
> c     are stored in wk); then set deltas interior to such
> c     subfaces via TFI 
> c
>       iskp = iskip(nbl)
>       jskp = jskip(nbl)
>       kskp = kskip(nbl)
1494d174
<      .       abs(ibctyp).ne.2016 .and.
1496c176,177
<      .       abs(ibctyp).ne.1006) then 
---
>      .       abs(ibctyp).ne.1006 .or.
>      .       real(beta1).lt.0.) then
1501,1525c182,214
<              if(abs(isktyp).eq.1) then
<                do j=js,je-jskp,jskp
<                   do k=ks,ke-kskp,kskp
<                      call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                            dx2,dy2,dz2,arci,arcj,arck,1,1,
<      .                            j,j+jskp,k,k+kskp,nou,bou,nbuf,
<      .                            ibufdim,myid)
<                   end do
<                end do
<              else
<                do j1=1,jskmax(nbl)-1
<                   j = jskip(nbl,j1)
<                   jskp = jskip(nbl,j1+1)
<                   do k1=1,kskmax(nbl)-1
<                      k = kskip(nbl,k1)
<                      kskp = kskip(nbl,k1+1)
<                      if((j.ge.js.and.j.lt.je).and.(k.ge.ks.
<      .                  and.k.lt.ke)) then
<                        call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                              dx2,dy2,dz2,arci,arcj,arck,1,1,
<      .                              j,jskp,k,kskp,nou,bou,nbuf,
<      .                              ibufdim,myid)
<                      end if
<                   enddo
<                enddo
---
>              do j=js,je,jskp
>                 do k=ks,ke,kskp
>                    call setcorner(j,k,1,xnm1,ynm1,znm1,dx,dy,
>      .                            dz,jdim,kdim,idim,wk,nsurf,iflag,
>      .                            ivert,slavept,nslave,nou,bou,
>      .                            ibufdim,nbuf,myid,ibl,nmaster,
>      .                            iseq)
>                 end do
>              end do
>              do j=js,je-jskp,jskp
>                 do k=ks,ke,kskp
>                    call tfiedge(idim,jdim,kdim,dx,dy,dz,1,1,
>      .                          j,j+jskp,k,k,arci,arcj,arck,
>      .                          nou,bou,nbuf,ibufdim,myid)
>                 end do
>              end do
>              do j=js,je,jskp
>                 do k=ks,ke-kskp,kskp
>                    call tfiedge(idim,jdim,kdim,dx,dy,dz,1,1,
>      .                          j,j,k,k+kskp,arci,arcj,arck,
>      .                          nou,bou,nbuf,ibufdim,myid)
>                 end do
>              end do
> c
> c            preserve deltas on edges of solid surfaces
> c
>              if (idefrm(nbl).lt.999 .and. real(beta1).ge.0.) then
>                 if (js.eq.1 .or. je.eq.jdim .or.
>      .              ks.eq.1 .or. ke.eq.kdim) then
>                     call bc_delt(nbl,dx,dy,dz,deltj,deltk,delti,jcsi,
>      .                           jcsf,kcsi,kcsf,icsi,icsf,jdim,kdim,
>      .                           idim,maxbl,maxsegdg,nsegdfrm)
>                 end if
1526a216,223
>              do j=js,je-jskp,jskp
>                 do k=ks,ke-kskp,kskp
>                    call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
>      .                          dx2,dy2,dz2,arci,arcj,arck,1,1,
>      .                          j,j+jskp,k,k+kskp,nou,bou,nbuf,
>      .                          ibufdim,myid)
>                 end do
>              end do
1528c225
<       enddo
---
>       end do
1537d233
<      .       abs(ibctyp).ne.2016 .and.
1539c235,236
<      .       abs(ibctyp).ne.1006) then
---
>      .       abs(ibctyp).ne.1006 .or.
>      .       real(beta1).lt.0.) then
1544,1624c241,248
<              if(abs(isktyp).eq.1) then
<                do j=js,je-jskp,jskp
<                   do k=ks,ke-kskp,kskp
<                      call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                            dx2,dy2,dz2,arci,arcj,arck,idim,idim,
<      .                            j,j+jskp,k,k+kskp,nou,bou,nbuf,
<      .                            ibufdim,myid)
<                   end do
<                end do
<              else
<                do j1=1,jskmax(nbl)-1
<                   j = jskip(nbl,j1)
<                   jskp = jskip(nbl,j1+1)
<                   do k1=1,kskmax(nbl)-1
<                      k = kskip(nbl,k1)
<                      kskp = kskip(nbl,k1+1)
<                      if((j.ge.js.and.j.lt.je).and.(k.ge.ks.
<      .                  and.k.lt.ke)) then
<                        call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                              dx2,dy2,dz2,arci,arcj,arck,idim,     
<      .                              idim,j,jskp,k,kskp,nou,bou,nbuf,
<      .                              ibufdim,myid)
<                      end if
<                   enddo
<                enddo
<              end if
<          end if
<       enddo
< c
< c     Intermediate i subfaces
< c
<       if(idim.gt.2) then
<         if(abs(isktyp).eq.1) then 
<          do i = 1+iskp,idim-iskp       
<           js = 1
<           je = jdim
<           ks = 1
<           ke = kdim
<           do j=js,je-jskp,jskp
<             do k=ks,ke-kskp,kskp
<                call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                      dx2,dy2,dz2,arci,arcj,arck,i,i,
<      .                      j,j+jskp,k,k+kskp,nou,bou,nbuf,
<      .                      ibufdim,myid)
<             end do
<           end do
<          enddo
<         else
<          do i1 = 2,iskmax(nbl)-1     
<           i = iskip(nbl,i1)
<           do j1=1,jskmax(nbl)-1 
<             j = jskip(nbl,j1)
<             jskp = jskip(nbl,j1+1)
<             do k1=1,kskmax(nbl)-1 
<                k = kskip(nbl,k1)
<                kskp = kskip(nbl,k1+1)
<                call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                      dx2,dy2,dz2,arci,arcj,arck,i,i,
<      .                      j,jskp,k,kskp,nou,bou,nbuf,
<      .                      ibufdim,myid)
<             enddo
<           enddo
<          enddo
<         end if
<       end if
< c
<       if (i2d .eq. 0) then
< c
< c     j=1 to jdim  subfaces
< c
<         if(abs(isktyp).eq.1) then
<          do j = 1,jdim,jskp     
<            is = 1
<            ie = idim
<            ks = 1
<            ke = kdim
<            do i=is,ie-iskp,iskp
<              do k=ks,ke,kskp
<                call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i+iskp,
<      .                      j,j,k,k,arci,arcj,arck,
<      .                      nou,bou,nbuf,ibufdim,myid,nbl)
---
>              do j=js,je,jskp
>                 do k=ks,ke,kskp
>                    call setcorner(j,k,idim,xnm1,ynm1,znm1,dx,dy,
>      .                            dz,jdim,kdim,idim,wk,nsurf,iflag,
>      .                            ivert,slavept,nslave,nou,bou,
>      .                            ibufdim,nbuf,myid,ibl,nmaster,
>      .                            iseq)
>                 end do
1626,1638c250,262
<            end do
<          enddo
<         else
<          do j1 = 1,jskmax(nbl)     
<            j = jskip(nbl,j1)
<            do i1=1,iskmax(nbl)-1 
<              i = iskip(nbl,i1)
<              iskp = iskip(nbl,i1+1)
<              do k1=1,kskmax(nbl) 
<                k = kskip(nbl,k1)
<                call tfiedge(idim,jdim,kdim,dx,dy,dz,i,iskp,
<      .                      j,j,k,k,arci,arcj,arck,
<      .                      nou,bou,nbuf,ibufdim,myid,nbl)
---
>              do j=js,je-jskp,jskp
>                 do k=ks,ke,kskp
>                    call tfiedge(idim,jdim,kdim,dx,dy,dz,idim,idim,
>      .                          j,j+jskp,k,k,arci,arcj,arck,
>      .                          nou,bou,nbuf,ibufdim,myid)
>                 end do
>              end do
>              do j=js,je,jskp
>                 do k=ks,ke-kskp,kskp
>                    call tfiedge(idim,jdim,kdim,dx,dy,dz,idim,idim,
>      .                          j,j,k,k+kskp,arci,arcj,arck,
>      .                          nou,bou,nbuf,ibufdim,myid)
>                 end do
1640,1642d263
<            end do
<          enddo
<         end if
1646,1650c267,286
<         if (idefrm(nbl).lt.999) then
<            call bc_delt(nbl,dx,dy,dz,deltj,deltk,delti,jcsi,
<      .                  jcsf,kcsi,kcsf,icsi,icsf,jdim,kdim,
<      .                  idim,maxbl,maxsegdg,nsegdfrm)
<         end if
---
>              if (idefrm(nbl).lt.999 .and. real(beta1).ge.0.) then
>                 if (js.eq.1 .or. je.eq.jdim .or.
>      .              ks.eq.1 .or. ke.eq.kdim) then
>                     call bc_delt(nbl,dx,dy,dz,deltj,deltk,delti,jcsi,
>      .                           jcsf,kcsi,kcsf,icsi,icsf,jdim,kdim,
>      .                           idim,maxbl,maxsegdg,nsegdfrm)
>                 end if
>              end if
>              do j=js,je-jskp,jskp
>                 do k=ks,ke-kskp,kskp
>                    call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
>      .                          dx2,dy2,dz2,arci,arcj,arck,idim,idim,
>      .                          j,j+jskp,k,k+kskp,nou,bou,nbuf,
>      .                          ibufdim,myid)
>                 end do
>              end do
>          end if
>       end do
> c
>       if (i2d .eq. 0) then
1655,1666c291,335
<            jj     = 1
<            jbctyp = jbcinfo(nbl,nseg,1,jj)
<            if (abs(jbctyp).ne.2004 .and.
<      .         abs(jbctyp).ne.2014 .and.
<      .         abs(jbctyp).ne.2016 .and.
<      .         abs(jbctyp).ne.1005 .and.
<      .         abs(jbctyp).ne.1006) then
<                is = jbcinfo(nbl,nseg,2,jj)
<                ie = jbcinfo(nbl,nseg,3,jj)
<                ks = jbcinfo(nbl,nseg,4,jj)
<                ke = jbcinfo(nbl,nseg,5,jj)
<                if(abs(isktyp).eq.1) then
---
>             jj     = 1
>             jbctyp = jbcinfo(nbl,nseg,1,jj)
>             if (abs(jbctyp).ne.2004 .and.
>      .          abs(jbctyp).ne.2014 .and.
>      .          abs(jbctyp).ne.1005 .and.
>      .          abs(jbctyp).ne.1006 .or.
>      .          real(beta1).lt.0.) then
>                 is = jbcinfo(nbl,nseg,2,jj)
>                 ie = jbcinfo(nbl,nseg,3,jj)
>                 ks = jbcinfo(nbl,nseg,4,jj)
>                 ke = jbcinfo(nbl,nseg,5,jj)
>                 do i=is,ie,iskp
>                    do k=ks,ke,kskp
>                       call setcorner(1,k,i,xnm1,ynm1,znm1,dx,dy,
>      .                               dz,jdim,kdim,idim,wk,nsurf,iflag,
>      .                               ivert,slavept,nslave,nou,bou,
>      .                               ibufdim,nbuf,myid,ibl,nmaster,
>      .                               iseq)
>                    end do
>                 end do
>                 do i=is,ie-iskp,iskp
>                    do k=ks,ke,kskp
>                       call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i+iskp,
>      .                             1,1,k,k,arci,arcj,arck,
>      .                             nou,bou,nbuf,ibufdim,myid)
>                    end do
>                 end do
>                 do i=is,ie,iskp
>                    do k=ks,ke-kskp,kskp
>                       call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i,
>      .                             1,1,k,k+kskp,arci,arcj,arck,
>      .                             nou,bou,nbuf,ibufdim,myid)
>                    end do
>                 end do
> c
> c               preserve deltas on edges of solid surfaces
> c
>                 if (idefrm(nbl).lt.999 .and. real(beta1).ge.0.) then
>                    if (is.eq.1 .or. ie.eq.idim .or.
>      .                 ks.eq.1 .or. ke.eq.kdim) then
>                        call bc_delt(nbl,dx,dy,dz,deltj,deltk,delti,jcsi,
>      .                              jcsf,kcsi,kcsf,icsi,icsf,jdim,kdim,
>      .                              idim,maxbl,maxsegdg,nsegdfrm)
>                    end if
>                 end if
1675,1692c344
<                else
<                 do i1=1,iskmax(nbl)-1
<                   i = iskip(nbl,i1)
<                   iskp = iskip(nbl,i1+1)
<                   do k1=1,kskmax(nbl)-1
<                      k = kskip(nbl,k1)
<                      kskp = kskip(nbl,k1+1)
<                      if((i.ge.is.and.i.lt.ie).and.(k.ge.ks.
<      .                  and.k.lt.ke)) then
<                       call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                             dx2,dy2,dz2,arci,arcj,arck,i,iskp,
<      .                             1,1,k,kskp,nou,bou,nbuf,
<      .                             ibufdim,myid)
<                      end if
<                   enddo
<                 enddo
<                end if
<            end if
---
>             end if
1698,1709c350,394
<            jj     = 2
<            jbctyp = jbcinfo(nbl,nseg,1,jj)
<            if (abs(jbctyp).ne.2004 .and.
<      .         abs(jbctyp).ne.2014 .and.
<      .         abs(jbctyp).ne.2016 .and.
<      .         abs(jbctyp).ne.1005 .and.
<      .         abs(jbctyp).ne.1006) then
<                is = jbcinfo(nbl,nseg,2,jj)
<                ie = jbcinfo(nbl,nseg,3,jj)
<                ks = jbcinfo(nbl,nseg,4,jj)
<                ke = jbcinfo(nbl,nseg,5,jj)
<                if(abs(isktyp).eq.1) then
---
>             jj     = 2
>             jbctyp = jbcinfo(nbl,nseg,1,jj)
>             if (abs(jbctyp).ne.2004 .and.
>      .          abs(jbctyp).ne.2014 .and.
>      .          abs(jbctyp).ne.1005 .and.
>      .          abs(jbctyp).ne.1006 .or.
>      .          real(beta1).lt.0.) then
>                 is = jbcinfo(nbl,nseg,2,jj)
>                 ie = jbcinfo(nbl,nseg,3,jj)
>                 ks = jbcinfo(nbl,nseg,4,jj)
>                 ke = jbcinfo(nbl,nseg,5,jj)
>                 do i=is,ie,iskp
>                    do k=ks,ke,kskp
>                       call setcorner(jdim,k,i,xnm1,ynm1,znm1,dx,dy,
>      .                               dz,jdim,kdim,idim,wk,nsurf,iflag,
>      .                               ivert,slavept,nslave,nou,bou,
>      .                               ibufdim,nbuf,myid,ibl,nmaster,
>      .                               iseq)
>                    end do
>                 end do
>                 do i=is,ie-iskp,iskp
>                    do k=ks,ke,kskp
>                       call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i+iskp,
>      .                             jdim,jdim,k,k,arci,arcj,arck,
>      .                             nou,bou,nbuf,ibufdim,myid)
>                    end do
>                 end do
>                 do i=is,ie,iskp
>                    do k=ks,ke-kskp,kskp
>                       call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i,
>      .                             jdim,jdim,k,k+kskp,arci,arcj,arck,
>      .                             nou,bou,nbuf,ibufdim,myid)
>                    end do
>                 end do
> c
> c               preserve deltas on edges of solid surfaces
> c
>                 if (idefrm(nbl).lt.999 .and. real(beta1).ge.0.) then
>                    if (is.eq.1 .or. ie.eq.idim .or.
>      .                 ks.eq.1 .or. ke.eq.kdim) then
>                        call bc_delt(nbl,dx,dy,dz,deltj,deltk,delti,jcsi,
>      .                              jcsf,kcsi,kcsf,icsi,icsf,jdim,kdim,
>      .                              idim,maxbl,maxsegdg,nsegdfrm)
>                    end if
>                 end if
1718,1734d402
<                else
<                 do i1=1,iskmax(nbl)-1
<                   i = iskip(nbl,i1)
<                   iskp = iskip(nbl,i1+1)
<                   do k1=1,kskmax(nbl)-1
<                      k = kskip(nbl,k1)
<                      kskp = kskip(nbl,k1+1)
<                      if((i.ge.is.and.i.lt.ie).and.(k.ge.ks.
<      .                  and.k.lt.ke)) then
<                       call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                             dx2,dy2,dz2,arci,arcj,arck,i,iskp,
<      .                             jdim,jdim,k,kskp,nou,bou,nbuf,
<      .                             ibufdim,myid)
<                      end if
<                   enddo
<                 enddo
<                end if
1738c406
< c     Intermediate j subfaces
---
> c        k=1 subfaces
1740,1751c408,441
<          if(abs(isktyp).eq.1) then
<            do j = 1+jskp,jdim-jskp       
<              is = 1
<              ie = idim
<              ks = 1
<              ke = kdim
<              do i=is,ie-iskp,iskp
<                 do k=ks,ke-kskp,kskp
<                    call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                          dx2,dy2,dz2,arci,arcj,arck,i,i+iskp,
<      .                          j,j,k,k+kskp,nou,bou,nbuf,
<      .                          ibufdim,myid)
---
>          do nseg=1,nbck0(nbl)
>             kk     = 1
>             kbctyp = kbcinfo(nbl,nseg,1,kk)
>             if (abs(kbctyp).ne.2004 .and.
>      .          abs(kbctyp).ne.2014 .and.
>      .          abs(kbctyp).ne.1005 .and.
>      .          abs(kbctyp).ne.1006 .or.
>      .          real(beta1).lt.0.) then
>                 is = kbcinfo(nbl,nseg,2,kk)
>                 ie = kbcinfo(nbl,nseg,3,kk)
>                 js = kbcinfo(nbl,nseg,4,kk)
>                 je = kbcinfo(nbl,nseg,5,kk)
>                 do i=is,ie,iskp
>                    do j=js,je,jskp
>                       call setcorner(j,1,i,xnm1,ynm1,znm1,dx,dy,
>      .                               dz,jdim,kdim,idim,wk,nsurf,iflag,
>      .                               ivert,slavept,nslave,nou,bou,
>      .                               ibufdim,nbuf,myid,ibl,nmaster,
>      .                               iseq)
>                    end do
>                 end do
>                 do i=is,ie-iskp,iskp
>                    do j=js,je,jskp
>                       call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i+iskp,
>      .                             j,j,1,1,arci,arcj,arck,
>      .                             nou,bou,nbuf,ibufdim,myid)
>                    end do
>                 end do
>                 do i=is,ie,iskp
>                    do j=js,je-jskp,jskp
>                       call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i,
>      .                             j,j+jskp,1,1,arci,arcj,arck,
>      .                             nou,bou,nbuf,ibufdim,myid)
>                    end do
1753,1771d442
<              end do
<            end do
<          else
<            do j1 = 2,jskmax(nbl)-1     
<              j = jskip(nbl,j1)
<              do i1=1,iskmax(nbl)-1
<                i = iskip(nbl,i1)
<                iskp = iskip(nbl,i1+1)
<                do k1=1,kskmax(nbl)-1
<                   k = kskip(nbl,k1)
<                   kskp = kskip(nbl,k1+1)
<                   call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                         dx2,dy2,dz2,arci,arcj,arck,i,iskp,
<      .                         j,j,k,kskp,nou,bou,nbuf,
<      .                         ibufdim,myid)
<                enddo
<              enddo
<            enddo
<          end if
1773c444
< c        k=1 subfaces
---
> c               preserve deltas on edges of solid surfaces
1775,1788c446,454
<          do nseg=1,nbck0(nbl)
<            kk     = 1
<            kbctyp = kbcinfo(nbl,nseg,1,kk)
<            if (abs(kbctyp).ne.2004 .and.
<      .         abs(kbctyp).ne.2014 .and.
<      .         abs(kbctyp).ne.2016 .and.
<      .         abs(kbctyp).ne.1005 .and.
<      .         abs(kbctyp).ne.1006) then
<                is = kbcinfo(nbl,nseg,2,kk)
<                ie = kbcinfo(nbl,nseg,3,kk)
<                js = kbcinfo(nbl,nseg,4,kk)
<                je = kbcinfo(nbl,nseg,5,kk)
<                if(abs(isktyp).eq.1) then
<                  do i=is,ie-iskp,iskp
---
>                 if (idefrm(nbl).lt.999 .and. real(beta1).ge.0.) then
>                    if (is.eq.1 .or. ie.eq.idim .or.
>      .                 js.eq.1 .or. je.eq.jdim) then
>                        call bc_delt(nbl,dx,dy,dz,deltj,deltk,delti,jcsi,
>      .                              jcsf,kcsi,kcsf,icsi,icsf,jdim,kdim,
>      .                              idim,maxbl,maxsegdg,nsegdfrm)
>                    end if
>                 end if
>                 do i=is,ie-iskp,iskp
1795,1813c461,462
<                  end do
<                else
<                 do i1=1,iskmax(nbl)-1
<                   i = iskip(nbl,i1)
<                   iskp = iskip(nbl,i1+1)
<                   do j1=1,jskmax(nbl)-1
<                      j = jskip(nbl,j1)
<                      jskp = jskip(nbl,j1+1)
<                      if((i.ge.is.and.i.lt.ie).and.(j.ge.js.
<      .                  and.j.lt.je)) then
<                       call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                             dx2,dy2,dz2,arci,arcj,arck,i,iskp,
<      .                             j,jskp,1,1,nou,bou,nbuf,
<      .                             ibufdim,myid)
<                      end if
<                   enddo
<                 enddo
<                end if
<            end if
---
>                 end do
>             end if
1819,1831c468,513
<            kk     = 2
<            kbctyp = kbcinfo(nbl,nseg,1,kk)
<            if (abs(kbctyp).ne.2004 .and.
<      .         abs(kbctyp).ne.2014 .and.
<      .         abs(kbctyp).ne.2016 .and.
<      .         abs(kbctyp).ne.1005 .and.
<      .         abs(kbctyp).ne.1006) then
<                is = kbcinfo(nbl,nseg,2,kk)
<                ie = kbcinfo(nbl,nseg,3,kk)
<                js = kbcinfo(nbl,nseg,4,kk)
<                je = kbcinfo(nbl,nseg,5,kk)
<                if(abs(isktyp).eq.1) then
<                  do i=is,ie-iskp,iskp
---
>             kk     = 2
>             kbctyp = kbcinfo(nbl,nseg,1,kk)
>             if (abs(kbctyp).ne.2004 .and.
>      .          abs(kbctyp).ne.2014 .and.
>      .          abs(kbctyp).ne.1005 .and.
>      .          abs(kbctyp).ne.1006 .or.
>      .          real(beta1).lt.0.) then
>                 is = kbcinfo(nbl,nseg,2,kk)
>                 ie = kbcinfo(nbl,nseg,3,kk)
>                 js = kbcinfo(nbl,nseg,4,kk)
>                 je = kbcinfo(nbl,nseg,5,kk)
>                 do i=is,ie,iskp
>                    do j=js,je,jskp
>                       call setcorner(j,kdim,i,xnm1,ynm1,znm1,dx,dy,
>      .                               dz,jdim,kdim,idim,wk,nsurf,iflag,
>      .                               ivert,slavept,nslave,nou,bou,
>      .                               ibufdim,nbuf,myid,ibl,nmaster,
>      .                               iseq)
>                    end do
>                 end do
>                 do i=is,ie-iskp,iskp
>                    do j=js,je,jskp
>                       call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i+iskp,
>      .                             j,j,kdim,kdim,arci,arcj,arck,
>      .                             nou,bou,nbuf,ibufdim,myid)
>                    end do
>                 end do
>                 do i=is,ie,iskp
>                    do j=js,je-jskp,jskp
>                       call tfiedge(idim,jdim,kdim,dx,dy,dz,i,i,
>      .                             j,j+jskp,kdim,kdim,arci,arcj,arck,
>      .                             nou,bou,nbuf,ibufdim,myid)
>                    end do
>                 end do
> c
> c               preserve deltas on edges of solid surfaces
> c
>                 if (idefrm(nbl).lt.999 .and. real(beta1).ge.0.) then
>                    if (is.eq.1 .or. ie.eq.idim .or.
>      .                 js.eq.1 .or. je.eq.jdim) then
>                        call bc_delt(nbl,dx,dy,dz,deltj,deltk,delti,jcsi,
>      .                              jcsf,kcsi,kcsf,icsi,icsf,jdim,kdim,
>      .                              idim,maxbl,maxsegdg,nsegdfrm)
>                    end if
>                 end if
>                 do i=is,ie-iskp,iskp
1838,1856c520,521
<                  end do
<                else
<                 do i1=1,iskmax(nbl)-1
<                   i = iskip(nbl,i1)
<                   iskp = iskip(nbl,i1+1)
<                   do j1=1,jskmax(nbl)-1
<                      j = jskip(nbl,j1)
<                      jskp = jskip(nbl,j1+1)
<                      if((i.ge.is.and.i.lt.ie).and.(j.ge.js.
<      .                  and.j.lt.je)) then
<                       call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                             dx2,dy2,dz2,arci,arcj,arck,i,iskp,
<      .                             j,jskp,kdim,kdim,nou,bou,nbuf,
<      .                             ibufdim,myid)
<                      end if
<                   enddo
<                 enddo
<                end if
<            end if
---
>                 end do
>             end if
1859,1892c524
< c     Intermediate k subfaces
< c
<          if(abs(isktyp).eq.1) then
<            do k = 1+kskp,kdim-kskp       
<              is = 1
<              ie = idim
<              js = 1
<              je = jdim
<              do i=is,ie-iskp,iskp
<                do j=js,je-jskp,jskp
<                   call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                         dx2,dy2,dz2,arci,arcj,arck,i,i+iskp,
<      .                         j,j+jskp,k,k,nou,bou,nbuf,
<      .                         ibufdim,myid)
<                end do
<              end do
<            end do
<          else
<            do k1=2,kskmax(nbl)-1
<              k = kskip(nbl,k1)
<              do i1=1,iskmax(nbl)-1
<                i = iskip(nbl,i1)
<                iskp = iskip(nbl,i1+1)
<                do j1=1,jskmax(nbl)-1
<                   j = jskip(nbl,j1)
<                   jskp = jskip(nbl,j1+1)
<                    call tfiface(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,
<      .                          dx2,dy2,dz2,arci,arcj,arck,i,iskp,
<      .                          j,jskp,k,k,nou,bou,nbuf,
<      .                          ibufdim,myid)
<                enddo
<              enddo
<            enddo
<          end if
---
>       end if
1896,1901c528,570
<          call tfivol(idim,jdim,kdim,iskp,jskp,kskp,iskmax,jskmax,
<      .               kskmax,iskip,jskip,kskip,isktyp,dx,dy,dz,
<      .               dx1,dy1,dz1,dx2,dy2,dz2,dx3,dy3,dz3,dx4,dy4,
<      .               dz4,dx5,dy5,dz5,dx6,dy6,dz6,dx7,dy7,dz7,
<      .               arci,arcj,arck,nou,bou,nbuf,ibufdim,myid,
<      .               maxbl,nbl)
---
>       call tfivol(idim,jdim,kdim,dx,dy,dz,dx1,dy1,dz1,dx2,dy2,dz2,
>      .            dx3,dy3,dz3,arci,arcj,arck,nou,bou,nbuf,ibufdim,
>      .            myid)
> c
>       if (ismooth.gt.0) then
> c
> c        This step incorporates the correct translation and rota-
> c        tion of the interior mesh near the k=1 and k=kdim boundaries,
> c        exponentially decaying to a spring analogy smoothing away
> c        from the boundary.
> c
> c        allocate memory for the smoothing step
> c
>          allocate( dvol(jdim*idim*kdim), stat=stats )
>          call umalloc(jdim*idim*kdim,0,'dvol',memuse,stats)
>          allocate( xoi(jdim*kdim,6), stat=stats )
>          call umalloc(jdim*kdim*6,0,'xoi',memuse,stats)
>          allocate( xoj(kdim*idim,6), stat=stats )
>          call umalloc(kdim*idim*6,0,'xoj',memuse,stats)
>          allocate( xok(jdim*idim,6), stat=stats )
>          call umalloc(jdim*idim*6,0,'xok',memuse,stats)
>          allocate( jend(2), stat=stats )
>          call umalloc(2,1,'jend',memuse,stats)
>          allocate( jsta(2), stat=stats )
>          call umalloc(2,1,'jsta',memuse,stats)
> c
>          call dmsetup0(jdim,kdim,idim,icsi,icsf,jcsi,jcsf,
>      .                 kcsi,kcsf,nbl,maxbl,maxsegdg,
>      .                 jsta,jend,x,y,z,dx,dy,dz,xoj,xoi,xok,dvol)
> c
>          call gdsa(time,xmach,dt,dx,dy,dz,x,y,z,xnm1,
>      .             ynm1,znm1,dvol,xok,xoi,xoj,irotat,ndeftp1,
>      .             iupdat,nbl,nt,idim,jdim,kdim,iaesol,jsta,jend,
>      .             ismooth)
> c
> c        release memory
> c
>          deallocate(dvol)
>          deallocate(xok)
>          deallocate(xoi)
>          deallocate(xoj)
>          deallocate(jend)
>          deallocate(jsta)
1917,1920c586,591
<                      jj = j + (k-1)*jdim + (i-1)*jdim*kdim
<                      vel(j,k,i,1) = fact*((dx(jj)+x(jj)) - xnm1(jj))
<                      vel(j,k,i,2) = fact*((dy(jj)+y(jj)) - ynm1(jj))
<                      vel(j,k,i,3) = fact*((dz(jj)+z(jj)) - znm1(jj))
---
>                      vel(j,k,i,1) = fact*((dx(j,k,i)+x(j,k,i))
>      .                            - xnm1(j,k,i))
>                      vel(j,k,i,2) = fact*((dy(j,k,i)+y(j,k,i))
>      .                            - ynm1(j,k,i))
>                      vel(j,k,i,3) = fact*((dz(j,k,i)+z(j,k,i))
>      .                            - znm1(j,k,i))
1933,1939c604,609
<                      jj = j + (k-1)*jdim + (i-1)*jdim*kdim
<                      vel(j,k,i,1) = fact*(3.*(dx(jj)+x(jj))
<      .                            - 4*xnm1(jj)+xnm2(jj))
<                      vel(j,k,i,2) = fact*(3.*(dy(jj)+y(jj))
<      .                            - 4*ynm1(jj)+ynm2(jj))
<                      vel(j,k,i,3) = fact*(3.*(dz(jj)+z(jj))
<      .                            - 4*znm1(jj)+znm2(jj))
---
>                      vel(j,k,i,1) = fact*(3.*(dx(j,k,i)+x(j,k,i))
>      .                            - 4*xnm1(j,k,i)+xnm2(j,k,i))
>                      vel(j,k,i,2) = fact*(3.*(dy(j,k,i)+y(j,k,i))
>      .                            - 4*ynm1(j,k,i)+ynm2(j,k,i))
>                      vel(j,k,i,3) = fact*(3.*(dz(j,k,i)+z(j,k,i))
>      .                            - 4*znm1(j,k,i)+znm2(j,k,i))
1952,1955c622,629
<          do i=1,jdim*kdim*idim
<            xnm2(i) = xnm1(i)
<            ynm2(i) = ynm1(i)
<            znm2(i) = znm1(i)
---
>          do i=1,idim
>             do k=1,kdim
>                do j=1,jdim
>                   xnm2(j,k,i) = xnm1(j,k,i)
>                   ynm2(j,k,i) = ynm1(j,k,i)
>                   znm2(j,k,i) = znm1(j,k,i)
>                end do
>             end do
1961,1964c635,642
<       do i=1,jdim*kdim*idim
<         x(i) = x(i) + dx(i)
<         y(i) = y(i) + dy(i)
<         z(i) = z(i) + dz(i)
---
>       do i=1,idim
>          do k=1,kdim
>             do j=1,jdim
>                x(j,k,i) = x(j,k,i) + dx(j,k,i)
>                y(j,k,i) = y(j,k,i) + dy(j,k,i)
>                z(j,k,i) = z(j,k,i) + dz(j,k,i)
>             end do
>          end do
1978,1989d655
<       deallocate(dx4)
<       deallocate(dy4)
<       deallocate(dz4)
<       deallocate(dx5)
<       deallocate(dy5)
<       deallocate(dz5)
<       deallocate(dx6)
<       deallocate(dy6)
<       deallocate(dz6)
<       deallocate(dx7)
<       deallocate(dy7)
<       deallocate(dz7)
2000,2007c666,669
<       subroutine deform_surf(nbl,idim,jdim,kdim,deltj,deltk,delti,
<      .                       lw,lw2,icsi,icsf,jcsi,jcsf,kcsi,kcsf,
<      .                       maxbl,mseq,time,dt,ita,nou,bou,nbuf,
<      .                       ibufdim,myid,idefrm,nbci0,nbcidim,nbcj0,
<      .                       nbcjdim,nbck0,nbckdim,ibcinfo,jbcinfo,
<      .                       kbcinfo,maxseg,wk,u,nsurf,irst,iflag,
<      .                       islavept,nslave,nsegdfrm,idfrmseg,iaesurf,
<      .                       maxsegdg,nmaster,iseq)
---
>        subroutine dmsetup(jdm,kdm,idm,nbl,jsta,jend,ipid,imid,rj1jd,
>      .                    rj2jd,epsilon) 
> c***********************************************************************
> c     Purpose:  Sets up information for use in the smoothing step
2009d670
< c     $Id: deform.F,v 1.12 2005/10/07 01:23:28 rebart Exp $
2010a672,684
> c     Bob Bartels NASA Langley Aeroelasticity Branch    (757)864-2813
> c       responsible for the following subroutines:
> c         gdsa      -      spring analogy smoothing and near surface
> c                          orientation preservation.
> c         dmsetup0  -      some initialization of xoi,xoj and dx,dy,dz 
> c         dmsetup1  -      some initialization of xok and dx,dy,dz 
> c         dmsetup   -      some initialization of arrays 
> c         bdata     -      computation of block boundary face spacing
> c                          arrays 
> c         permut_ijkxyz -  permutes indices i and j to better align 
> c                          k = 0 and k = kdim surfaces for vectorizing 
> c         unperm_ijkxyz -  unpermutes indices i and j after smoothing 
> c     
2012,2013d685
< c     Purpose: Compute solid surface deformations for initializing the
< c              mesh deformation scheme.
2014a687,933
> #   ifdef CMPLX
>       implicit complex(a-h,o-z)
> #   endif
>        common /grid1/ algepmn,coef(2)   
>        common /grid2/ kimx(2),jte1(2),         
>      .   jflp(2,2),icsi(2),icso(2),iafmv1(2),jsp1(2),  
>      .   jsp2(2),jsp3(2),itecs(2),ispcs(2),itp(2,2)
>      .  ,iaxrt(2)
>        common /grid4/ time0
>        common /sklton/ isklton
>        dimension epsilon(kdm,2)
>        dimension  ipid(jdm*idm),imid(jdm*idm),rj1jd(jdm*idm),
>      .            rj2jd(jdm*idm),jend(2),jsta(2)
> 
> 
>        do 30 k = 1,kdm
>          epsilon(k,1) = 1. 
>          epsilon(k,2) = 1. 
> 30     continue
> 
>        coefa  =  -algepmn
>        do 29 n = 1,2
>        do 29 k = kimx(n)+1,kdm 
>           ro1 = coef(n)*real(k-kimx(n)) 
>           arg1= coefa*ro1        
>           epsilon(k,n) = exp(-arg1) 
> 29     continue 
>        if(idm.gt.2) then
>         do 438 j = 1,jdm*idm  
>           ipid(j)= j+jdm           
>           imid(j)= j-jdm  
> 438     continue  
>         jdmi1 = jdm*(idm-1)
>         do 440 j = 1,jdm 
>           imid(j)= j   
>           ipid(j+jdmi1)=j+jdmi1  
> 440     continue 
>        else
>         do 448 j = 1,jdm     
>           imid(j) = j    
>           ipid(j) = j+jdm      
> 448     continue  
>         do 449 j = 1+jdm,jdm*idm     
>           imid(j) = j-jdm      
>           ipid(j) = j      
> 449     continue  
>        end if 
> 
>        do 511 i=1,idm   
>        jdmi1 = jdm*(i-1)  
>        do 511 j = 1,jdm   
>            rj1jd(j+jdmi1) = real(jdm-j) 
>            rj2jd(j+jdmi1) = real(j-1) 
> 511    continue 
> 
>        return
>        end  
>        subroutine dmsetup0(jdm,kdm,idm,itp1,itp2,jtp1,jtp2,
>      .                 ksta,kend,nbl,maxbl,maxsegdg,
>      .                 jsta,jend,x,y,z,dx,dy,dz,xoj,xoi,xok,dvol)
> 
> #   ifdef CMPLX
>       implicit complex(a-h,o-z)
> #   endif
> c
>       integer stats
> c
>       dimension dvol(jdm*idm*kdm)
>       dimension dx(jdm,kdm,idm)
>       dimension dy(jdm,kdm,idm)
>       dimension dz(jdm,kdm,idm)
>       dimension itp1(maxbl,maxsegdg)
>       dimension itp2(maxbl,maxsegdg)
>       dimension jend(2)
>       dimension jsta(2)
>       dimension jtp1(maxbl,maxsegdg)
>       dimension jtp2(maxbl,maxsegdg)
>       dimension kend(maxbl,maxsegdg)
>       dimension ksta(maxbl,maxsegdg)
>       dimension x(jdm,kdm,idm)
>       dimension xoi(jdm*kdm,6)
>       dimension xoj(kdm*idm,6)
>       dimension xok(jdm*idm,6)
>       dimension y(jdm,kdm,idm)
>       dimension z(jdm,kdm,idm)
> 
>       allocatable :: dxn(:,:,:)
>       allocatable :: dyn(:,:,:)
>       allocatable :: dzn(:,:,:)
>       allocatable :: epsilon3(:)
>       allocatable :: epsilon4(:)
> 
>       memuse = 0
> c
>       allocate( dxn(jdm,kdm,idm), stat=stats )
>       call umalloc(jdm*kdm*idm,0,'dxn',memuse,stats)
>       allocate( dyn(jdm,kdm,idm), stat=stats )
>       call umalloc(jdm*kdm*idm,0,'dyn',memuse,stats)
>       allocate( dzn(jdm,kdm,idm), stat=stats )
>       call umalloc(jdm*kdm*idm,0,'dzn',memuse,stats)
>       allocate( epsilon3(jdm), stat=stats )
>       call umalloc(jdm,0,'epsilon3',memuse,stats)
>       allocate( epsilon4(idm), stat=stats )
>       call umalloc(idm,0,'epsilon4',memuse,stats)
> c
>         if(idm.gt.2) then
>           do j = 1,kdm*jdm
>              xoi(j,1)       = x(j,1,1)       + dx(j,1,1)
>              xoi(j,2)       = y(j,1,1)       + dy(j,1,1)
>              xoi(j,3)       = z(j,1,1)       + dz(j,1,1)
>              xoi(j,4)       = x(j,1,idm)    + dx(j,1,idm)
>              xoi(j,5)       = y(j,1,idm)    + dy(j,1,idm)
>              xoi(j,6)       = z(j,1,idm)    + dz(j,1,idm)
>           end do
>         end if
>         if(jdm.gt.2) then
>          do i =1,idm
>           do k =1,kdm
>            xoj(k+kdm*(i-1),1) = x(1,k,i)       + dx(1,k,i)
>            xoj(k+kdm*(i-1),2) = y(1,k,i)       + dy(1,k,i)
>            xoj(k+kdm*(i-1),3) = z(1,k,i)       + dz(1,k,i)
>            xoj(k+kdm*(i-1),4) = x(jdm,k,i)    + dx(jdm,k,i)
>            xoj(k+kdm*(i-1),5) = y(jdm,k,i)    + dy(jdm,k,i)
>            xoj(k+kdm*(i-1),6) = z(jdm,k,i)    + dz(jdm,k,i)
>           end do
>          end do
> 
>          do 303 j = 1,jdm-1 
>           epsilon3(j)=sqrt((x(j+1,1,1)-x(j,1,1))
>      .                  *(x(j+1,1,1)-x(j,1,1))
>      .                  +(y(j+1,1,1)-y(j,1,1))
>      .                  *(y(j+1,1,1)-y(j,1,1))
>      .                  +(z(j+1,1,1)-z(j,1,1))
>      .                  *(z(j+1,1,1)-z(j,1,1))) 
> 303      continue
>          reps3         = 0.
>          do 304 j = 1,jdm-1 
> 304      reps3       = reps3 + epsilon3(j)
>          reps31      = 0.
>          do 305 j = jdm-1,2,-1 
>           reps31      = reps31 + epsilon3(j)
>           epsilon3(j) = reps31/reps3
> 305      continue
>          epsilon3(1)  = 1. 
>          epsilon3(jdm)= 0.
> 
> 
>          do 306 j = 1,jdm 
>           eps3   = epsilon3(j)  
>           omeps3 = 1. - eps3  
>           do 306 i = 1,idm
>           do 306 k = 1,kdm
>            dxn(j,k,i) = eps3*(xoj(k+kdm*(i-1),1)-x(1,k,i))
>      .              + omeps3*(xoj(k+kdm*(i-1),4)-x(jdm,k,i))  
>            dyn(j,k,i) = eps3*(xoj(k+kdm*(i-1),2)-y(1,k,i))
>      .              + omeps3*(xoj(k+kdm*(i-1),5)-y(jdm,k,i))  
>            dzn(j,k,i) = eps3*(xoj(k+kdm*(i-1),3)-z(1,k,i))
>      .              + omeps3*(xoj(k+kdm*(i-1),6)-z(jdm,k,i))  
>  306     continue
>        else
>          do j = 1,jdm
>             do i = 1,idm
>                do k = 1,kdm
>                   dxn(j,k,i) =0.
>                   dyn(j,k,i) =0.
>                   dzn(j,k,i) =0.
>                end do
>             end do
>          end do
>        end if
>        if(idm.gt.2) then
>          do 307 i = 1,idm-1 
>           epsilon4(i)=sqrt((x(1,1,i+1)-x(1,1,i))
>      .                    *(x(1,1,i+1)-x(1,1,i))
>      .                    +(y(1,1,i+1)-y(1,1,i))
>      .                    *(y(1,1,i+1)-y(1,1,i))
>      .                    +(z(1,1,i+1)-z(1,1,i))
>      .                    *(z(1,1,i+1)-z(1,1,i))) 
> 307      continue
>          reps4         = 0.
>          do 308 i = 1,idm-1 
> 308      reps4       = reps4 + epsilon4(i)
>          reps41      = 0.
>          do 309 i = idm-1,2,-1 
>            reps41      = reps41 + epsilon4(i)
>            epsilon4(i) = reps41/reps4
> 309      continue
>          epsilon4(1)  = 1. 
>          epsilon4(idm)= 0.
> 
>          do 310 i = 2,idm 
>            eps    = epsilon4(i)  
>            omeps  = 1. - eps   
>            do 310 j = 1,kdm*jdm
>             dxn(j,1,i)=dxn(j,1,i)+eps*(xoi(j,1)-x(j,1,1)  -dxn(j,1,1))
>      .                        + omeps*(xoi(j,4)-x(j,1,idm)-dxn(j,1,idm))  
>             dyn(j,1,i)=dyn(j,1,i)+eps*(xoi(j,2)-y(j,1,1)  -dyn(j,1,1))
>      .                        + omeps*(xoi(j,5)-y(j,1,idm)-dyn(j,1,idm))  
>             dzn(j,1,i)=dzn(j,1,i)+eps*(xoi(j,3)-z(j,1,1)  -dzn(j,1,1))
>      .                        + omeps*(xoi(j,6)-z(j,1,idm)-dzn(j,1,idm))  
> 310      continue
>          do j = 1,kdm*jdm
>            dxn(j,1,1) = xoi(j,1)-x(j,1,1)
>            dyn(j,1,1) = xoi(j,2)-y(j,1,1)
>            dzn(j,1,1) = xoi(j,3)-z(j,1,1)
>          end do
>        end if
> 
>        deallocate(epsilon3)
>        deallocate(epsilon4)
> 
>        call permut_ijkxyz(jdm,idm,kdm,nbl,dx,dy,dz,dvol)
>        call permut_ijkxyz(jdm,idm,kdm,nbl,dxn,dyn,dzn,dvol)
>        call permut_ijkxyz(jdm,idm,kdm,nbl,x,y,z,dvol)
> 
>        call dmsetup1(jdm,kdm,idm,itp1,itp2,jtp1,jtp2,
>      .                 ksta,kend,nbl,maxbl,maxsegdg,
>      .                 jsta,jend,x,y,z,dx,dy,dz,dxn,
>      .                 dyn,dzn,xok)
> 
>        deallocate(dxn)
>        deallocate(dyn)
>        deallocate(dzn)
>        
>        return
>        end
>        subroutine dmsetup1(jdm,kdm,idm,itp1,itp2,jtp1,jtp2,
>      .                 ksta,kend,nbl,maxbl,maxsegdg,
>      .                 jsta,jend,x,y,z,dx,dy,dz,dxn,
>      .                 dyn,dzn,xok)
> c***********************************************************************
> c     Purpose:  Sets up information for use in the smoothing step
> c
> c
> c     Bob Bartels NASA Langley Aeroelasticity Branch    (757)864-2813
> c       responsible for the following subroutines:
> c         gdsa      -      spring analogy smoothing and near surface
> c                          orientation preservation.
> c         dmsetup0  -      some initialization of xoi,xoj and dx,dy,dz 
> c         dmsetup1  -      some initialization of xok and dx,dy,dz 
> c         dmsetup   -      some initialization of arrays 
> c         bdata     -      computation of block boundary face spacing
> c                          arrays 
> c         permut_ijkxyz -  permutes indices i and j to better align 
> c                          k = 0 and k = kdim surfaces for vectorizing 
> c         unperm_ijkxyz -  unpermutes indices i and j after smoothing 
> c     
2020,2021c939,945
< c
<       character*120 bou(ibufdim,nbuf)
---
>        common /grid1/ algepmn,coef(2)
>        common /grid2/ kimx(2),jte1(2),         
>      .   jflp(2,2),icsi(2),icso(2),iafmv1(2),jsp1(2),  
>      .   jsp2(2),jsp3(2),itecs(2),ispcs(2),itp(2,2)
>      .  ,iaxrt(2)
>        common /grid15/ igtyp(2),idmg(2),jdmg(2),kdmg(2)
>        common /sklton/ isklton
2025,2051c949,961
<       dimension lw(65,maxbl),lw2(43,maxbl)
<       dimension delti(jdim,kdim,3,2)
<       dimension deltj(kdim,idim,3,2)
<       dimension deltk(jdim,idim,3,2)
<       dimension iaesurf(maxbl,maxsegdg)
<       dimension ibcinfo(maxbl,maxseg,7,2)
<       dimension icsf(maxbl,maxsegdg)
<       dimension icsi(maxbl,maxsegdg)
<       dimension idefrm(maxbl)
<       dimension idfrmseg(maxbl,maxsegdg)
<       dimension jbcinfo(maxbl,maxseg,7,2)
<       dimension jcsf(maxbl,maxsegdg)
<       dimension jcsi(maxbl,maxsegdg)
<       dimension kbcinfo(maxbl,maxseg,7,2)
<       dimension kcsf(maxbl,maxsegdg)
<       dimension kcsi(maxbl,maxsegdg)
<       dimension nbci0(maxbl)
<       dimension nbcidim(maxbl)
<       dimension nbcj0(maxbl)
<       dimension nbcjdim(maxbl)
<       dimension nbck0(maxbl)
<       dimension nbckdim(maxbl)
<       dimension nou(nbuf)
<       dimension nsegdfrm(maxbl)
<       dimension islavept(nslave,nmaster,5)
<       dimension wk(9*nsurf)
<       dimension u(3*nslave)
---
>        dimension dx(jdm*idm*kdm),dy(jdm*idm*kdm),dz(jdm*idm*kdm)
>        dimension dxn(jdm*idm*kdm),dyn(jdm*idm*kdm),dzn(jdm*idm*kdm)
>        dimension x(jdm*idm*kdm),y(jdm*idm*kdm),z(jdm*idm*kdm)
>        dimension xok(jdm*idm,6)
>        dimension itp1(maxbl,maxsegdg),itp2(maxbl,maxsegdg),
>      .           jtp1(maxbl,maxsegdg),jtp2(maxbl,maxsegdg),
>      .           ksta(maxbl,maxsegdg),kend(maxbl,maxsegdg)
>      .          ,jend(2),jsta(2)
> 
> 
>       allocatable :: epsilon3(:)
> 
>       memuse = 0
2053,2055c963,1086
<       allocatable :: dx(:)
<       allocatable :: dy(:)
<       allocatable :: dz(:)
---
>       allocate( epsilon3(kdm), stat=stats )
>       call umalloc(kdm,0,'epsilon3',memuse,stats)
> c
>          jsta(1)= jtp1(nbl,1)
>          jend(1)= jtp2(nbl,1)
>          itp(1,1) = itp1(nbl,1)
>          itp(2,1) = itp2(nbl,1)
> 
>          igtyp(1)=1
>          idmg(1) = idm
>          jdmg(1) = jdm
>          kdmg(1) = kdm
> 
>         if(jdmg(1)-jend(1)+1.ne.jsta(1)) then
>           jsta(1)= 1
>           jend(1)= jdmg(1)
>         end if 
> 
> 
>         jdid = jdm*idm
>         jk2 = jdm*idm*(kdm-1)  
>         do 1013 j = 1,jdid 
>               xok(j,1) = x(j)     + dx(j) 
>               xok(j,2) = y(j)     + dy(j) 
>               xok(j,3) = z(j)     + dz(j) 
>               xok(j,4) = x(j+jk2) + dx(j+jk2)
>               xok(j,5) = y(j+jk2) + dy(j+jk2)
>               xok(j,6) = z(j+jk2) + dz(j+jk2)
> 1010        continue  
> 1013    continue
>        rjdm1 = 1.e+6
>        rjdm2 = 1.e+6
>        do j = 1,jdm-1 
>          rjdm3= ((x(j+1)- x(j)) *(x(j+1)- x(j))
>      .          +(y(j+1)- y(j)) *(y(j+1)- y(j))
>      .          +(z(j+1)- z(j)) *(z(j+1)- z(j)))
>          rjdm4= ((x(j+1+jdm*idm*(kdm-1))- x(j+jdm*idm*(kdm-1))) 
>      .          *(x(j+1+jdm*idm*(kdm-1))- x(j+jdm*idm*(kdm-1)))
>      .          +(y(j+1+jdm*idm*(kdm-1))- y(j+jdm*idm*(kdm-1)))
>      .          *(y(j+1+jdm*idm*(kdm-1))- y(j+jdm*idm*(kdm-1)))
>      .          +(z(j+1+jdm*idm*(kdm-1))- z(j+jdm*idm*(kdm-1)))
>      .          *(z(j+1+jdm*idm*(kdm-1))- z(j+jdm*idm*(kdm-1))))
>          if(real(rjdm1).gt.real(rjdm3)) then
>              rjdm1 = rjdm3
>              jrjdm1= j
>          end if
>          if(real(rjdm2).gt.real(rjdm4)) then
>              rjdm2 = rjdm4
>              jrjdm2= j
>          end if
>        enddo
>        j    = jrjdm1
>        rkdm1= ((x(j+jdm*idm)- x(j))
>      .        *(x(j+jdm*idm)- x(j))
>      .        +(y(j+jdm*idm)- y(j))
>      .        *(y(j+jdm*idm)- y(j))
>      .        +(z(j+jdm*idm)- z(j))
>      .        *(z(j+jdm*idm)- z(j)))
>        j    = jrjdm2
>        rkdm2= ((x(j+jdm*idm*(kdm-1))-
>      .          x(j+jdm*idm*(kdm-2)))
>      .        *(x(j+jdm*idm*(kdm-1))-
>      .          x(j+jdm*idm*(kdm-2)))
>      .        +(y(j+jdm*idm*(kdm-1))-
>      .          y(j+jdm*idm*(kdm-2)))
>      .        *(y(j+jdm*idm*(kdm-1))-
>      .          y(j+jdm*idm*(kdm-2)))
>      .        +(z(j+jdm*idm*(kdm-1))-
>      .          z(j+jdm*idm*(kdm-2)))
>      .        *(z(j+jdm*idm*(kdm-1))-
>      .          z(j+jdm*idm*(kdm-2))))
>        rkdm = ((x(jsta(1)+jdm*idm*(kdm-1))- x(jsta(1)))
>      .        *(x(jsta(1)+jdm*idm*(kdm-1))- x(jsta(1)))
>      .        +(y(jsta(1)+jdm*idm*(kdm-1))- y(jsta(1)))
>      .        *(y(jsta(1)+jdm*idm*(kdm-1))- y(jsta(1)))
>      .        +(z(jsta(1)+jdm*idm*(kdm-1))- z(jsta(1)))
>      .        *(z(jsta(1)+jdm*idm*(kdm-1))- z(jsta(1))))
> 
> 
>    
>        if((real(rkdm1).lt.real(.0004*rkdm)).and.(real(rjdm1).gt.
>      .                                      real(2.*rkdm1))) then 
>         if(kdm.lt.15) then
>           kimx(1) =1
>           coef(1) = .016/real(kdm)
>         else if(kdm.lt.20) then
>           kimx(1) =2 
>           coef(1) = .014/real(kdm)
>         else if(kdm.lt.30) then
>           kimx(1) =3
>           coef(1) = .010/real(kdm)
>         else
>           kimx(1) =3 
>           coef(1) = .006/real(kdm)
>         end if
>        else if(real(rjdm1).lt.real(rkdm1)) then 
>         kimx(1) =0  
>         coef(1) = .028/real(kdm)
>        else 
>         kimx(1) =1 
>         coef(1) = .018/real(kdm)
>        end if
>        if((real(rkdm2).lt.real(.0004*rkdm)).and.(real(rjdm2).gt.
>      .                                      real(2.*rkdm2))) then 
>         if(kdm.lt.15) then
>           kimx(2) =1
>           coef(2) = .016/real(kdm)
>         else if(kdm.lt.20) then
>           kimx(2) =2
>           coef(2) = .014/real(kdm) 
>         else if(kdm.lt.30) then
>           kimx(2) =3
>           coef(2) = .010/real(kdm)
>         else
>           kimx(2) =3
>           coef(2) = .006/real(kdm) 
>         end if
>        else if(real(rjdm2).lt.real(rkdm2)) then 
>         kimx(2) =0 
>         coef(2) = .058/real(kdm)
>        else
>         kimx(2) =1
>         coef(2) = .018/real(kdm)
>        end if
2057c1088,1162
<       common /twod/ i2d
---
> 
>         algepmn = -2000. 
> 
>        do k = 1,kimx(1)
>          epsilon3(k) = 1. 
>        enddo
>        do k = kdm,kdm-kimx(2),-1 
>          epsilon3(k) = 0. 
>        enddo
>        rkdm = sqrt((x(jsta(1)+jdm*idm*kimx(1))-
>      .              x(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .            *(x(jsta(1)+jdm*idm*kimx(1))-
>      .              x(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .            +(y(jsta(1)+jdm*idm*kimx(1))-
>      .              y(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .            *(y(jsta(1)+jdm*idm*kimx(1))-
>      .              y(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .            +(z(jsta(1)+jdm*idm*kimx(1))-
>      .              z(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .            *(z(jsta(1)+jdm*idm*kimx(1))-
>      .              z(jsta(1)+jdm*idm*(kdm-kimx(2)-1))))
>        do 28 k = kimx(1)+1,kdm-kimx(2)       
>          epsilon3(k)= sqrt((x(jsta(1)+jdm*idm*(k-1))-
>      .                      x(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .                    *(x(jsta(1)+jdm*idm*(k-1))-
>      .                      x(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .                    +(y(jsta(1)+jdm*idm*(k-1))-
>      .                      y(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .                    *(y(jsta(1)+jdm*idm*(k-1))-
>      .                      y(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .                    +(z(jsta(1)+jdm*idm*(k-1))-
>      .                      z(jsta(1)+jdm*idm*(kdm-kimx(2)-1)))
>      .                    *(z(jsta(1)+jdm*idm*(k-1))-
>      .                      z(jsta(1)+jdm*idm*(kdm-kimx(2)-1))))
> 28     continue
>        do 29 k = kimx(1)+1,kdm-kimx(2)    
>          epsilon3(k)=epsilon3(k)/rkdm
> 29     continue
> 
>        jdid = jdm*idm  
>        jk2  = jdm*idm*(kdm-1)  
>        do 300 k = 2,kdm
>          eps    = epsilon3(k)
>          omeps  = 1.-eps 
>          jdidk  = jdid*(k-1)
>          do j  = 1,jdm*idm                    
>            dxn(j+jdidk)=dxn(j+jdidk)+eps*(xok(j,1)-x(j)    -dxn(j))
>      .                            +omeps*(xok(j,4)-x(j+jk2)-dxn(j+jk2))
>            dyn(j+jdidk)=dyn(j+jdidk)+eps*(xok(j,2)-y(j)    -dyn(j))
>      .                            +omeps*(xok(j,5)-y(j+jk2)-dyn(j+jk2))
>            dzn(j+jdidk)=dzn(j+jdidk)+eps*(xok(j,3)-z(j)    -dzn(j))
>      .                            +omeps*(xok(j,6)-z(j+jk2)-dzn(j+jk2))
>          end do
> 300    continue 
>        do j  = 1,jdm*idm                    
>          dxn(j)= xok(j,1)-x(j) 
>          dyn(j)= xok(j,2)-y(j)
>          dzn(j)= xok(j,3)-z(j)
>        end do
> 
>       do j = 1,jdm*idm*kdm
>          dx(j) = dxn(j)
>          dy(j) = dyn(j)
>          dz(j) = dzn(j)
>       end do
>     
>       deallocate(epsilon3)
> 
>       return
>       end 
>        subroutine bdata(jdm,kdm,idm,nbl,x,y,z,xj1p,xj1m,xj2p,xj2m
>      .                 ,xi1p,xi1m,xi2p,xi2m,xk1p,xk1m,xk2p,xk2m 
>      .                 ,xj3p,seta)   
> c***********************************************************************
> c     Purpose:  Sets up boundary spacing arrays for use in the smoothing step
2059d1163
< c     allocate memory
2061c1165,1178
<       memuse = 0
---
> c     Bob Bartels NASA Langley Aeroelasticity Branch    (757)864-2813
> c       responsible for the following subroutines:
> c         gdsa      -      spring analogy smoothing and near surface
> c                          orientation preservation.
> c         dmsetup0  -      some initialization of xoi,xoj and dx,dy,dz 
> c         dmsetup1  -      some initialization of xok and dx,dy,dz 
> c         dmsetup   -      some initialization of arrays 
> c         bdata     -      computation of block boundary face spacing
> c                          arrays 
> c         permut_ijkxyz -  permutes indices i and j to better align 
> c                          k = 0 and k = kdim surfaces for vectorizing 
> c         unperm_ijkxyz -  unpermutes indices i and j after smoothing 
> c     
> c***********************************************************************
2063,2068c1180,1366
<       allocate( dx(jdim*kdim*idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dx',memuse,stats)
<       allocate( dy(jdim*kdim*idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dy',memuse,stats)
<       allocate( dz(jdim*kdim*idim), stat=stats )
<       call umalloc(jdim*kdim*idim,0,'dz',memuse,stats)
---
> #   ifdef CMPLX
>       implicit complex(a-h,o-z)
> #   endif
>        dimension x(jdm*kdm*idm),y(jdm*kdm*idm),z(jdm*kdm*idm) 
>        dimension xj1p(jdm*idm),xk1p(kdm), xj2p(jdm*idm)                          
>      .          ,xk2p(kdm),xj1m(jdm*idm),xk1m(kdm),
>      .           xj2m(jdm*idm), xk2m(kdm),xj3p(jdm*idm,2)  
>      .          ,xi1m(jdm*idm),xi1p(jdm*idm),xi2m(jdm*idm),
>      .           xi2p(jdm*idm)
>        dimension seta(kdm) 
> 
>         jdid   = jdm*idm 
>         jdidkpo= 1+jdid*(kdm-1)
>         jdidkmo=-1+jdid*(kdm-1)
>         jdidkd = jdid*(kdm-1)
>         do 2 j = 2,idm*jdm-1
>            xj1p(j)=(x(j+1)-x(j))*(x(j+1)-x(j))
>      1            +(y(j+1)-y(j))*(y(j+1)-y(j))  
>      2            +(z(j+1)-z(j))*(z(j+1)-z(j))  
>            xj1m(j)=(x(j)-x(j-1))*(x(j)-x(j-1))
>      1            +(y(j)-y(j-1))*(y(j)-y(j-1))  
>      2            +(z(j)-z(j-1))*(z(j)-z(j-1))  
>            xj2p(j)=(x(j+jdidkpo)-x(j+jdidkd))*
>      .             (x(j+jdidkpo)-x(j+jdidkd))
>      .            +(y(j+jdidkpo)-y(j+jdidkd))*
>      .             (y(j+jdidkpo)-y(j+jdidkd))  
>      .            +(z(j+jdidkpo)-z(j+jdidkd))*
>      .             (z(j+jdidkpo)-z(j+jdidkd))  
>            xj2m(j)=(x(j+jdidkd)-x(j+jdidkmo))*
>      .             (x(j+jdidkd)-x(j+jdidkmo))
>      .            +(y(j+jdidkd)-y(j+jdidkmo))* 
>      .             (y(j+jdidkd)-y(j+jdidkmo))  
>      .            +(z(j+jdidkd)-z(j+jdidkmo))*
>      .             (z(j+jdidkd)-z(j+jdidkmo))  
> 2       continue
>         do 3 j = 2,idm*jdm-1
>            xj2m(j) = 1./sqrt(xj2m(j))  
>            xj2p(j) = 1./sqrt(xj2p(j))  
>            xj1m(j) = 1./sqrt(xj1m(j))  
>            xj1p(j) = 1./sqrt(xj1p(j))  
>  3      continue 
>         nb0 = 0
>         nb1 =  1
>         nb2 =  2
>         do 4 i = 1,idm
>          xj1p(nb1+jdm*(i-1)) = xj1p(nb2+jdm*(i-1))  
>          xj1m(nb1+jdm*(i-1)) = xj1p(nb2+jdm*(i-1))  
>          xj2p(nb1+jdm*(i-1)) = xj1p(nb2+jdm*(i-1))  
>          xj2m(nb1+jdm*(i-1)) = xj1p(nb2+jdm*(i-1))  
>          xj1p(jdm*i)         = xj1p(jdm*i-1)  
>          xj1m(jdm*i)         = xj1p(jdm*i-1)  
>          xj2p(jdm*i)         = xj1p(jdm*i-1)  
>          xj2m(jdm*i)         = xj1p(jdm*i-1)  
> 4       continue 
> 
>         jdidkd = jdid*(kdm-1)
>         do 8 i = 2,idm-1
>         do 7 j = 2,jdm-1
>         xi1p(j+jdm*(i-1))=(x(j+i*jdm)-x(j+jdm*(i-1)))*
>      .                    (x(j+i*jdm)-x(j+jdm*(i-1)))
>      .                   +(y(j+i*jdm)-y(j+jdm*(i-1)))*
>      .                    (y(j+i*jdm)-y(j+jdm*(i-1)))  
>      .                   +(z(j+i*jdm)-z(j+jdm*(i-1)))*
>      .                    (z(j+i*jdm)-z(j+jdm*(i-1)))  
>         xi1m(j+jdm*(i-1))=(x(j+jdm*(i-1))-x(j+jdm*(i-2)))*
>      .                    (x(j+jdm*(i-1))-x(j+jdm*(i-2)))
>      .                   +(y(j+jdm*(i-1))-y(j+jdm*(i-2)))*
>      .                    (y(j+jdm*(i-1))-y(j+jdm*(i-2)))  
>      .                   +(z(j+jdm*(i-1))-z(j+jdm*(i-2)))*
>      .                    (z(j+jdm*(i-1))-z(j+jdm*(i-2)))  
>         xi2p(j+jdm*(i-1))=(x(j+jdm*i+jdidkd)-
>      .                     x(j+jdm*(i-1)+jdidkd))*
>      .                    (x(j+jdm*i+jdidkd)-
>      .                     x(j+jdm*(i-1)+jdidkd))
>      .                   +(y(j+jdm*i+jdidkd)-
>      .                     y(j+jdm*(i-1)+jdidkd))*
>      .                    (y(j+jdm*i+jdidkd)-
>      .                     y(j+jdm*(i-1)+jdidkd))  
>      .                   +(z(j+jdm*i+jdidkd)-
>      .                     z(j+jdm*(i-1)+jdidkd))*
>      .                    (z(j+jdm*i+jdidkd)-
>      .                     z(j+jdm*(i-1)+jdidkd))  
>         xi2m(j+jdm*(i-1))=(x(j+jdm*(i-1)+jdidkd)-
>      .                     x(j+jdm*(i-2)+jdidkd))*
>      .                    (x(j+jdm*(i-1)+jdidkd)-
>      .                     x(j+jdm*(i-2)+jdidkd))
>      .                   +(y(j+jdm*(i-1)+jdidkd)-
>      .                     y(j+jdm*(i-2)+jdidkd))* 
>      .                    (y(j+jdm*(i-1)+jdidkd)-
>      .                     y(j+jdm*(i-2)+jdidkd))  
>      .                   +(z(j+jdm*(i-1)+jdidkd)-
>      .                     z(j+jdm*(i-2)+jdidkd))*
>      .                    (z(j+jdm*(i-1)+jdidkd)-
>      .                     z(j+jdm*(i-2)+jdidkd))  
>            xi2tp = xi2m(j+jdm*(i-1)) 
>            xi2m(j+jdm*(i-1)) = 1./sqrt(xi2tp)   
>            xi2tp = xi2p(j+jdm*(i-1)) 
>            xi2p(j+jdm*(i-1)) = 1./sqrt(xi2tp)  
>            xi2tp = xi1m(j+jdm*(i-1)) 
>            xi1m(j+jdm*(i-1)) = 1./sqrt(xi2tp)  
>            xi2tp = xi1p(j+jdm*(i-1)) 
>            xi1p(j+jdm*(i-1)) = 1./sqrt(xi2tp)  
>  7      continue 
>         xi2m(jdm*i)=xi2m(jdm*i-1) 
>         xi2p(jdm*i)=xi2p(jdm*i-1) 
>         xi1m(jdm*i)=xi1m(jdm*i-1) 
>         xi1p(jdm*i)=xi1p(jdm*i-1) 
>         xi2m(1+jdm*(i-1))=xi2m(2+jdm*(i-1)) 
>         xi2p(1+jdm*(i-1))=xi2p(2+jdm*(i-1)) 
>         xi1m(1+jdm*(i-1))=xi1m(2+jdm*(i-1)) 
>         xi1p(1+jdm*(i-1))=xi1p(2+jdm*(i-1)) 
> 8       continue  
> 
>         jdid = jdm*idm  
>           do 14 k = 2,kdm-1 
>             xk1p(k)=(x(1+jdid*k)-x(1+jdid*(k-1)))*
>      .              (x(1+jdid*k)-x(1+jdid*(k-1)))
>      .           +(y(1+jdid*k)-y(1+jdid*(k-1)))*
>      .            (y(1+jdid*k)-y(1+jdid*(k-1)))  
>      .           +(z(1+jdid*k)-z(1+jdid*(k-1)))*
>      .            (z(1+jdid*k)-z(1+jdid*(k-1)))  
>             xk1m(k)=(x(1+jdid*(k-1))-x(1+jdid*(k-2)))*
>      .            (x(1+jdid*(k-1))-x(1+jdid*(k-2)))
>      .           +(y(1+jdid*(k-1))-y(1+jdid*(k-2)))*
>      .            (y(1+jdid*(k-1))-y(1+jdid*(k-2)))  
>      .           +(z(1+jdid*(k-1))-z(1+jdid*(k-2)))*
>      .            (z(1+jdid*(k-1))-z(1+jdid*(k-2)))  
>             xk2p(k)=(x(jdm+jdid*k)-x(jdm+jdid*(k-1)))
>      .              *(x(jdm+jdid*k)-x(jdm+jdid*(k-1)))
>      .           +(y(jdm+jdid*k)-y(jdm+jdid*(k-1)))*
>      .            (y(jdm+jdid*k)-y(jdm+jdid*(k-1)))  
>      .           +(z(jdm+jdid*k)-z(jdm+jdid*(k-1)))*
>      .            (z(jdm+jdid*k)-z(jdm+jdid*(k-1)))  
>             xk2m(k)=(x(jdm+jdid*(k-1))-x(jdm+jdid*(k-2)))
>      .           *(x(jdm+jdid*(k-1))-x(jdm+jdid*(k-2)))
>      .           +(y(jdm+jdid*(k-1))-y(jdm+jdid*(k-2)))*
>      .            (y(jdm+jdid*(k-1))-y(jdm+jdid*(k-2)))  
>      .           +(z(jdm+jdid*(k-1))-z(jdm+jdid*(k-2)))*
>      .            (z(jdm+jdid*(k-1))-z(jdm+jdid*(k-2)))  
> 14        continue
>           do 15 k = 2,kdm-1
>            xk2m(k) = 1./sqrt(xk2m(k))  
>            xk2p(k) = 1./sqrt(xk2p(k))  
>            xk1m(k) = 1./sqrt(xk1m(k))  
>            xk1p(k) = 1./sqrt(xk1p(k))  
> 15        continue
>           do 16 k = 2,kdm-1
>            seta(k) = 1./xk1m(k) 
> 16        continue   
>           seta(kdm) = 1./xk1p(kdm-1)
>  
>        jdkdm = jdm*idm*(kdm-2)
>        do 20 j = 1,jdm*idm-1
>          xk1mt =(x(j+jdid)-x(j))*
>      .            (x(j+jdid)-x(j))
>      .           +(y(j+jdid)-y(j))*
>      .            (y(j+jdid)-y(j))  
>      .           +(z(j+jdid)-z(j))*
>      .            (z(j+jdid)-z(j))  
>          xk2mt =(x(j+jdid+jdkdm)-x(j+jdkdm))*
>      .            (x(j+jdid+jdkdm)-x(j+jdkdm))
>      .           +(y(j+jdid+jdkdm)-y(j+jdkdm))*
>      .            (y(j+jdid+jdkdm)-y(j+jdkdm))  
>      .           +(z(j+jdid+jdkdm)-z(j+jdkdm))*
>      .            (z(j+jdid+jdkdm)-z(j+jdkdm))  
>          xj3p(j,1) = sqrt(xk1mt)/seta(2)
>          xj3p(j,2) = sqrt(xk2mt)/seta(kdm)
> 20     continue
>         do 24 i = 1,idm
>          xj3p(jdm*i,1)       = xj3p(jdm*i-1,1) 
>          xj3p(jdm*i,2)       = xj3p(jdm*i-1,2) 
> 24      continue 
> 
> 
>        return
>         end 
>        subroutine permut_ijkxyz(jdm,idm,kdm,nbl,x,y,z,dvol)
> #   ifdef CMPLX
>       implicit complex(a-h,o-z)
> #   endif
>        dimension x(jdm*idm*kdm),y(jdm*idm*kdm),
>      .               z(jdm*idm*kdm)
>        dimension dvol(jdm*idm*kdm)
> 
> c***********************************************************************
> c     Purpose:  Permutes the indices i,j,k for more efficient computation 
> c               within the smoothing step.
2070d1367
< c     initialize deltas
2072,2076c1369,1382
<       do i=1,jdim*kdim*idim
<         dx(i) = 0.
<         dy(i) = 0.
<         dz(i) = 0.
<       end do
---
> c     Bob Bartels NASA Langley Aeroelasticity Branch    (757)864-2813
> c       responsible for the following subroutines:
> c         gdsa      -      spring analogy smoothing and near surface
> c                          orientation preservation.
> c         dmsetup0  -      some initialization of xoi,xoj and dx,dy,dz 
> c         dmsetup1  -      some initialization of xok and dx,dy,dz 
> c         dmsetup   -      some initialization of arrays 
> c         bdata     -      computation of block boundary face spacing
> c                          arrays 
> c         permut_ijkxyz -  permutes indices i and j to better align 
> c                          k = 0 and k = kdim surfaces for vectorizing 
> c         unperm_ijkxyz -  unpermutes indices i and j after smoothing 
> c     
> c***********************************************************************
2078c1384,1434
< c               preserve deltas on edges of solid surfaces
---
>          jdid = jdm*idm
>          jdkd = jdm*kdm 
>          do 10 k = 1,kdm 
>            jd2 = jdid*(k-1) 
>            jk1 = jdm*(k-1)  
>            do 10 i = 1,idm 
>              ji1 = jdm*(i-1) 
>              jdi1= jdkd*(i-1) 
>              do 10 j = 1,jdm 
>                dvol(j+ji1+jd2) = x(j+jk1+jdi1)
> 10           continue  
>          do 11 j = 1,jdm*kdm*idm  
>            x(j)  = dvol(j) 
> 11       continue  
>          do 12 k = 1,kdm 
>            jd2 = jdid*(k-1) 
>            jk1 = jdm*(k-1)  
>            do 12 i = 1,idm 
>              ji1 = jdm*(i-1) 
>              jdi1= jdkd*(i-1) 
>              do 12 j = 1,jdm 
>                dvol(j+ji1+jd2) = y(j+jk1+jdi1)
> 12           continue  
>          do 13 j = 1,jdm*kdm*idm  
>            y(j)  = dvol(j) 
> 13       continue  
>          do 14 k = 1,kdm 
>            jd2 = jdid*(k-1) 
>            jk1 = jdm*(k-1)  
>            do 14 i = 1,idm 
>              ji1 = jdm*(i-1) 
>              jdi1= jdkd*(i-1) 
>              do 14 j = 1,jdm 
>               dvol(j+ji1+jd2) = z(j+jk1+jdi1)
> 14           continue  
>          do 15 j = 1,jdm*kdm*idm  
>            z(j)  = dvol(j) 
> 15       continue  
> 
>        return
>        end
>        subroutine unperm_ijkxyz(jdm,idm,kdm,nbl,x,y,z,dvol)
> #   ifdef CMPLX
>       implicit complex(a-h,o-z)
> #   endif
>        dimension x(jdm*idm*kdm),y(jdm*idm*kdm),
>      .               z(jdm*idm*kdm)
>        dimension dvol(jdm*idm*kdm)
> c***********************************************************************
> c     Purpose:  Reverses the permuted indices i,j,k 
> c               after the smoothing step.
2080,2095d1435
<        if (idefrm(nbl).lt.999) then
<           call bc_delt(nbl,dx,dy,dz,deltj,deltk,delti,jcsi,
<      .                 jcsf,kcsi,kcsf,icsi,icsf,jdim,kdim,
<      .                 idim,maxbl,maxsegdg,nsegdfrm)
< c
<         do n = 1,nslave
<           nbl1= islavept(n,9,iseq)
<           ll  = islavept(n,1,iseq)
<           isrf= islavept(n,8,iseq)
<           if(nbl1.eq.nbl.and.isrf.eq.0) then
<             u(3*(n-1)+1) = dx(ll+1)
<             u(3*(n-1)+2) = dy(ll+1)
<             u(3*(n-1)+3) = dz(ll+1)
<           end if
<         enddo
<       end if
2097c1437,1498
< c     release memory
---
> c     Bob Bartels NASA Langley Aeroelasticity Branch    (757)864-2813
> c       responsible for the following subroutines:
> c         gdsa      -      spring analogy smoothing and near surface
> c                          orientation preservation.
> c         dmsetup0  -      some initialization of xoi,xoj and dx,dy,dz 
> c         dmsetup1  -      some initialization of xok and dx,dy,dz 
> c         dmsetup   -      some initialization of arrays 
> c         bdata     -      computation of block boundary face spacing
> c                          arrays 
> c         permut_ijkxyz -  permutes indices i and j to better align 
> c                          k = 0 and k = kdim surfaces for vectorizing 
> c         unperm_ijkxyz -  unpermutes indices i and j after smoothing 
> c     
> c***********************************************************************
> 
>          jdid = jdm*idm
>          jdkd = jdm*kdm 
>          do 1010 k = 1,kdm 
>            jd2 = jdid*(k-1) 
>            jk1 = jdm*(k-1)  
>            do 1010 i = 1,idm 
>              ji1 = jdm*(i-1) 
>              jdi1= jdkd*(i-1) 
>              do 1010 j = 1,jdm 
>                dvol(j+jk1+jdi1)=x(j+ji1+jd2)                
> 1010         continue  
>          do 1011 j = 1,jdm*kdm*idm  
>            x(j)  = dvol(j) 
> 1011     continue  
>          do 1012 k = 1,kdm 
>            jd2 = jdid*(k-1) 
>            jk1 = jdm*(k-1)  
>            do 1012 i = 1,idm 
>              ji1 = jdm*(i-1) 
>              jdi1= jdkd*(i-1) 
>              do 1012 j = 1,jdm 
>                dvol(j+jk1+jdi1) = y(j+ji1+jd2)
> 1012         continue  
>          do 1013 j = 1,jdm*kdm*idm  
>            y(j)  = dvol(j) 
> 1013     continue  
>          do 1014 k = 1,kdm 
>            jd2 = jdid*(k-1) 
>            jk1 = jdm*(k-1)  
>            do 1014 i = 1,idm 
>              ji1 = jdm*(i-1) 
>              jdi1= jdkd*(i-1) 
>              do 1014 j = 1,jdm 
>                dvol(j+jk1+jdi1) = z(j+ji1+jd2)
> 1014         continue  
>          do 1015 j = 1,jdm*kdm*idm  
>            z(j)  = dvol(j) 
> 1015     continue  
>        return
>        end
>       subroutine gdsa(time,xmach,dt,dx,dy,dz,x,y,z,xnm1,ynm1,
>      .                znm1,dvol,xok,xoi,xoj,irotat,ndeftp1,
>      .                iupdat,nbl,nt,idmt,jdmt,kdmt,iaesol,jsta,jend,
>      .                ismooth)
> c***********************************************************************
> c     Purpose:  Determines increment to grid position due to mesh smoothing
> c               caused by movement of the solid surface 
2099,2101c1500,1579
<       deallocate(dx)
<       deallocate(dy)
<       deallocate(dz)
---
> c
> c     Bob Bartels NASA Langley Aeroelasticity Branch    (757)864-2813
> c       responsible for the following subroutines:
> c         gdsa      -      spring analogy smoothing and near surface
> c                          orientation preservation.
> c         dmsetup0  -      some initialization of xoi,xoj and dx,dy,dz 
> c         dmsetup1  -      some initialization of xok and dx,dy,dz 
> c         dmsetup   -      some initialization of arrays 
> c         bdata     -      computation of block boundary face spacing
> c                          arrays 
> c         permut_ijkxyz -  permutes indices i and j to better align 
> c                          k = 0 and k = kdim surfaces for vectorizing 
> c         unperm_ijkxyz -  unpermutes indices i and j after smoothing 
> c     
> c***********************************************************************
> c
> #   ifdef CMPLX
>       implicit complex(a-h,o-z)
> #   endif
>        common /grid1/ algepmn,coef(2)   
>        common /grid2/ kimx(2),jte1(2),         
>      .   jflp(2,2),icsi(2),icso(2),iafmv1(2),jsp1(2),  
>      .   jsp2(2),jsp3(2),itecs(2),ispcs(2),itp(2,2)
>      .  ,iaxrt(2)
>        common /grid4/ time0
>        common /grid8/ fc3,dxave
>        common /grid15/ igtyp(2),idmg(2),jdmg(2),kdmg(2)
>        common /sklton/ isklton
>        common /zero/ iexp
> c
>        common /twod/ i2d
> c
>       integer stats
> c
>       dimension dvol(jdmt*idmt*kdmt)
>       dimension dx(jdmt*kdmt*idmt)
>       dimension dy(jdmt*kdmt*idmt)
>       dimension dz(jdmt*kdmt*idmt)
>       dimension jend(2)
>       dimension jsta(2)
>       dimension x(jdmt*idmt*kdmt)
>       dimension xnm1(jdmt*kdmt*idmt)
>       dimension xoi(jdmt*kdmt,6)
>       dimension xoj(kdmt*idmt,6)
>       dimension xok(jdmt*idmt,6)
>       dimension y(jdmt*idmt*kdmt)
>       dimension ynm1(jdmt*kdmt*idmt)
>       dimension z(jdmt*idmt*kdmt)
>       dimension znm1(jdmt*kdmt*idmt)
> 
>       allocatable :: dxj(:,:)
>       allocatable :: dyj(:,:)
>       allocatable :: dzj(:,:)
>       allocatable :: epsilon(:,:)
>       allocatable :: imid(:)
>       allocatable :: ipid(:)
>       allocatable :: rj1jd(:)
>       allocatable :: rj2jd(:)
>       allocatable :: seta(:)
>       allocatable :: xi1m(:)
>       allocatable :: xi1p(:)
>       allocatable :: xi2m(:)
>       allocatable :: xi2p(:)
>       allocatable :: xid(:,:)
>       allocatable :: xim(:,:)
>       allocatable :: xip(:,:)
>       allocatable :: xj1m(:)
>       allocatable :: xj1p(:)
>       allocatable :: xj2m(:)
>       allocatable :: xj2p(:)
>       allocatable :: xj3p(:,:)
>       allocatable :: xjd(:,:)
>       allocatable :: xjm(:,:)
>       allocatable :: xjp(:,:)
>       allocatable :: xk1m(:)
>       allocatable :: xk1p(:)
>       allocatable :: xk2m(:)
>       allocatable :: xk2p(:)
>       allocatable :: xkm(:,:)
>       allocatable :: xkp(:,:)
2102a1581,2140
>       memuse = 0
> c
>       allocate( dxj(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'dxj',memuse,stats)
>       allocate( dyj(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'dyj',memuse,stats)
>       allocate( dzj(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'dzj',memuse,stats)
>       allocate( epsilon(kdmt,2), stat=stats)
>       call umalloc(kdmt*2,0,'epsilon',memuse,stats)
>       allocate( imid(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,1,'imid',memuse,stats)
>       allocate( ipid(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,1,'ipid',memuse,stats)
>       allocate( rj1jd(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'rj1jd',memuse,stats)
>       allocate( rj2jd(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'rj2jd',memuse,stats)
>       allocate( seta(kdmt), stat=stats)
>       call umalloc(kdmt,0,'seta',memuse,stats)
>       allocate( xi1m(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'xi1m',memuse,stats)
>       allocate( xi1p(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'xi1p',memuse,stats)
>       allocate( xi2m(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'xi2m',memuse,stats)
>       allocate( xi2p(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'xi2p',memuse,stats)
>       allocate( xid(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'xid',memuse,stats)
>       allocate( xim(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'xim',memuse,stats)
>       allocate( xip(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'xip',memuse,stats)
>       allocate( xj1m(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'xj1m',memuse,stats)
>       allocate( xj1p(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'xj1p',memuse,stats)
>       allocate( xj2m(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'xj2m',memuse,stats)
>       allocate( xj2p(jdmt*idmt), stat=stats)
>       call umalloc(jdmt*idmt,0,'xj2p',memuse,stats)
>       allocate( xj3p(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'xj3p',memuse,stats)
>       allocate( xjd(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'xjd',memuse,stats)
>       allocate( xjm(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'xjm',memuse,stats)
>       allocate( xjp(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'xjp',memuse,stats)
>       allocate( xk1m(kdmt), stat=stats)
>       call umalloc(kdmt,0,'xk1m',memuse,stats)
>       allocate( xk1p(kdmt), stat=stats)
>       call umalloc(kdmt,0,'xk1p',memuse,stats)
>       allocate( xk2m(kdmt), stat=stats)
>       call umalloc(kdmt,0,'xk2m',memuse,stats)
>       allocate( xk2p(kdmt), stat=stats)
>       call umalloc(kdmt,0,'xk2p',memuse,stats)
>       allocate( xkm(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'xkm',memuse,stats)
>       allocate( xkp(jdmt*idmt,2), stat=stats)
>       call umalloc(jdmt*idmt*2,0,'xkp',memuse,stats)
> c
>       idm = idmg(1)
>       jdm = jdmg(1)
>       kdm = kdmg(1)
> 
>       call dmsetup(jdm,kdm,idm,nbl,jsta,jend,ipid,imid,rj1jd,
>      .             rj2jd,epsilon)
> 
>       call permut_ijkxyz(jdmt,idmt,kdmt,nbl,xnm1,ynm1,znm1,dvol)
> 
>       call bdata(jdm,kdm,idm,nbl,xnm1,ynm1,znm1,xj1p,xj1m,xj2p
>      .          ,xj2m,xi1p,xi1m,xi2p,xi2m,xk1p,xk1m,xk2p,xk2m,xj3p
>      .          ,seta)   
> 
> 
>         fc3 =  600.   
> 
>         jdi1 = jdm*idm
>         jdi2 = 2*jdm*idm
>         jdi3 = 3*jdm*idm
>         jdi4 = 4*jdm*idm
>         jdi5 = 5*jdm*idm
> 
> 
> 
>         eps = 10.**(-iexp+1)
>         eps1= 10.*eps
>         if(idm.gt.2) then 
>          ilow = 2
>          ihgh = idm - 1
>          jdmi1 = jdm*(ilow-1) 
>          jdmi2 = jdm*ihgh    
>          do 132 j = 2+jdmi1,jdmi2-1  
>           dxip =  (xok(ipid(j),1)
>      .                  -xok(j,1))         
>           dyip =  (xok(ipid(j),2)
>      .                  -xok(j,2)) 
>           dzip =  (xok(ipid(j),3)
>      .                  -xok(j,3)) 
>           dxim =  (xok(imid(j),1)
>      .                  -xok(j,1))         
>           dyim =  (xok(imid(j),2)
>      .                  -xok(j,2)) 
>           dzim =  (xok(imid(j),3)
>      .                  -xok(j,3)) 
>           dxi  =  dxip-dxim
>           dyi  =  dyip-dyim
>           dzi  =  dzip-dzim
>           dyjp =  (xok(j+1,2)-xok(j,2))
>           dyjm =  (xok(j-1,2)-xok(j,2))  
>           dzjp =  (xok(j+1,3)-xok(j,3))  
>           dzjm =  (xok(j-1,3)-xok(j,3)) 
>           dxjm =  (xok(j-1,1)-xok(j,1))  
>           dxjp =  (xok(j+1,1)-xok(j,1)) 
>           dxj1 = dxjp-dxjm  
>           dyj1 = dyjp-dyjm
>           dzj1 = dzjp-dzjm 
>           rjp  = sqrt(dxjp*dxjp+dyjp*dyjp+dzjp*dzjp) 
>           rjm  = sqrt(dxjm*dxjm+dyjm*dyjm+dzjm*dzjm)  
>           rjpm = rjp+rjm
>           rip  = sqrt(dxip*dxip+dyip*dyip+dzip*dzip) 
>           rim  = sqrt(dxim*dxim+dyim*dyim+dzim*dzim) 
>           ripm = rip+rim
>           term1   = (dxi*(dyjp*dzjm-dyjm*dzjp)
>      .              +dyi*(dzjp*dxjm-dzjm*dxjp) 
>      .              +dzi*(dxjp*dyjm-dxjm*dyjp))-eps1        
>           term2   = (ripm*(rjp*rjm-
>      .            (dxjp*dxjm+dyjp*dyjm+dzjp*dzjm)+eps))   
>           xjd(j,1)= term1/term2
>           term3   =-(dxj1*(dyip*dzim-dyim*dzip)
>      .             +dyj1*(dzip*dxim-dzim*dxip) 
>      .             +dzj1*(dxip*dyim-dxim*dyip))-eps1 
>           term4    = (rjpm*(rip*rim-
>      .            (dxip*dxim+dyip*dyim+dzip*dzim)+eps)) 
>           xid(j,1)= term3/term4
>           xjp(j,1) = (dxjp*rjm-dxjm*rjp)/rjpm     
>           xjm(j,1) = (dyjp*rjm-dyjm*rjp)/rjpm     
>           xkm(j,1) = (dzjp*rjm-dzjm*rjp)/rjpm     
>           xkp(j,1) = .5*dxi
>           xim(j,1) = .5*dyi
>           xip(j,1) = .5*dzi
> 132      continue  
>          do 133 j = 2+jdmi1,jdmi2-1  
>           dxip =  (xok(ipid(j),4)
>      .                  -xok(j,4))         
>           dyip =  (xok(ipid(j),5)
>      .                  -xok(j,5)) 
>           dzip =  (xok(ipid(j),6)
>      .                  -xok(j,6)) 
>           dxim =  (xok(imid(j),4)
>      .                  -xok(j,4))         
>           dyim =  (xok(imid(j),5)
>      .                  -xok(j,5)) 
>           dzim =  (xok(imid(j),6)
>      .                  -xok(j,6)) 
>           dxi  =  dxip-dxim
>           dyi  =  dyip-dyim
>           dzi  =  dzip-dzim
>           dyjp =  (xok(j+1,5)-xok(j,5))
>           dyjm =  (xok(j-1,5)-xok(j,5))  
>           dzjp =  (xok(j+1,6)-xok(j,6))  
>           dzjm =  (xok(j-1,6)-xok(j,6)) 
>           dxjm =  (xok(j-1,4)-xok(j,4))  
>           dxjp =  (xok(j+1,4)-xok(j,4)) 
>           dxj1 = dxjp-dxjm  
>           dyj1 = dyjp-dyjm
>           dzj1 = dzjp-dzjm 
>           rjp  = sqrt(dxjp*dxjp+dyjp*dyjp+dzjp*dzjp) 
>           rjm  = sqrt(dxjm*dxjm+dyjm*dyjm+dzjm*dzjm)  
>           rjpm = rjp+rjm
>           rip  = sqrt(dxip*dxip+dyip*dyip+dzip*dzip) 
>           rim  = sqrt(dxim*dxim+dyim*dyim+dzim*dzim) 
>           ripm = rip+rim
>           term1   =-(dxi*(dyjp*dzjm-dyjm*dzjp)
>      .              +dyi*(dzjp*dxjm-dzjm*dxjp) 
>      .              +dzi*(dxjp*dyjm-dxjm*dyjp))-eps1        
>           term2   = (ripm*(rjp*rjm-
>      .            (dxjp*dxjm+dyjp*dyjm+dzjp*dzjm)+eps))   
>           xjd(j,2)= term1/term2
>           term3   = (dxj1*(dyip*dzim-dyim*dzip)
>      .             +dyj1*(dzip*dxim-dzim*dxip) 
>      .             +dzj1*(dxip*dyim-dxim*dyip))-eps1 
>           term4    = (rjpm*(rip*rim-
>      .            (dxip*dxim+dyip*dyim+dzip*dzim)+eps)) 
>           xid(j,2)= term3/term4
>           xjp(j,2) = (dxjp*rjm-dxjm*rjp)/rjpm     
>           xjm(j,2) = (dyjp*rjm-dyjm*rjp)/rjpm     
>           xkm(j,2) = (dzjp*rjm-dzjm*rjp)/rjpm     
>           xkp(j,2) = .5*dxi
>           xim(j,2) = .5*dyi
>           xip(j,2) = .5*dzi
> 133      continue  
>         else
>          ilow = 1
>          ihgh = 2 
>          jdmi1 = jdm*(ilow-1) 
>          jdmi2 = jdm*ihgh    
>          do 134 j = 2+jdmi1,jdmi2-1  
>           dxip =  (xok(ipid(j),1)
>      .            -xok(imid(j),1))         
>           dyip =  (xok(ipid(j),2)
>      .            -xok(imid(j),2)) 
>           dzip =  (xok(ipid(j),3)
>      .            -xok(imid(j),3)) 
>           dxim = -(xok(ipid(j),1)
>      .            -xok(imid(j),1))         
>           dyim = -(xok(ipid(j),2)
>      .            -xok(imid(j),2)) 
>           dzim = -(xok(ipid(j),3)
>      .            -xok(imid(j),3)) 
>           dxi  =  dxip-dxim
>           dyi  =  dyip-dyim
>           dzi  =  dzip-dzim
>           dyjp =  (xok(j+1,2)-xok(j,2))
>           dyjm =  (xok(j-1,2)-xok(j,2))  
>           dzjp =  (xok(j+1,3)-xok(j,3))  
>           dzjm =  (xok(j-1,3)-xok(j,3)) 
>           dxjm =  (xok(j-1,1)-xok(j,1))  
>           dxjp =  (xok(j+1,1)-xok(j,1)) 
>           dxj1 = dxjp-dxjm  
>           dyj1 = dyjp-dyjm
>           dzj1 = dzjp-dzjm 
>           rjp  = sqrt(dxjp*dxjp+dyjp*dyjp+dzjp*dzjp) 
>           rjm  = sqrt(dxjm*dxjm+dyjm*dyjm+dzjm*dzjm)  
>           rjpm = rjp+rjm
>           rip  = sqrt(dxip*dxip+dyip*dyip+dzip*dzip) 
>           rim  = sqrt(dxim*dxim+dyim*dyim+dzim*dzim) 
>           ripm = rip+rim
>           term1   = (dxi*(dyjp*dzjm-dyjm*dzjp)
>      .              +dyi*(dzjp*dxjm-dzjm*dxjp) 
>      .              +dzi*(dxjp*dyjm-dxjm*dyjp))-eps1        
>           term2   = (ripm*(rjp*rjm-
>      .            (dxjp*dxjm+dyjp*dyjm+dzjp*dzjm)+eps))   
>           xjd(j,1)= term1/term2
>           term3   =-(dxj1*(dyip*dzim-dyim*dzip)
>      .              +dyj1*(dzip*dxim-dzim*dxip) 
>      .             +dzj1*(dxip*dyim-dxim*dyip))-eps1 
>           term4    = (rjpm*(rip*rim-
>      .            (dxip*dxim+dyip*dyim+dzip*dzim)+eps)) 
>           xid(j,1)= term3/term4
>           xjp(j,1) = (dxjp*rjm-dxjm*rjp)/rjpm     
>           xjm(j,1) = (dyjp*rjm-dyjm*rjp)/rjpm     
>           xkm(j,1) = (dzjp*rjm-dzjm*rjp)/rjpm     
>           xkp(j,1) = .5*dxi
>           xim(j,1) = .5*dyi
>           xip(j,1) = .5*dzi
> 134      continue  
>          do 135 j = 2+jdmi1,jdmi2-1  
>           dxip =  (xok(ipid(j),4)
>      .            -xok(imid(j),4))         
>           dyip =  (xok(ipid(j),5)
>      .            -xok(imid(j),5)) 
>           dzip =  (xok(ipid(j),6)
>      .            -xok(imid(j),6)) 
>           dxim = -(xok(ipid(j),4)
>      .            -xok(imid(j),4))         
>           dyim = -(xok(ipid(j),5)
>      .            -xok(imid(j),5)) 
>           dzim = -(xok(ipid(j),6)
>      .            -xok(imid(j),6)) 
>           dxi  =  dxip-dxim
>           dyi  =  dyip-dyim
>           dzi  =  dzip-dzim
>           dyjp =  (xok(j+1,5)-xok(j,5))
>           dyjm =  (xok(j-1,5)-xok(j,5))  
>           dzjp =  (xok(j+1,6)-xok(j,6))  
>           dzjm =  (xok(j-1,6)-xok(j,6)) 
>           dxjm =  (xok(j-1,4)-xok(j,4))  
>           dxjp =  (xok(j+1,4)-xok(j,4)) 
>           dxj1 = dxjp-dxjm  
>           dyj1 = dyjp-dyjm
>           dzj1 = dzjp-dzjm 
>           rjp  = sqrt(dxjp*dxjp+dyjp*dyjp+dzjp*dzjp) 
>           rjm  = sqrt(dxjm*dxjm+dyjm*dyjm+dzjm*dzjm)  
>           rjpm = rjp+rjm
>           rip  = sqrt(dxip*dxip+dyip*dyip+dzip*dzip) 
>           rim  = sqrt(dxim*dxim+dyim*dyim+dzim*dzim) 
>           ripm = rip+rim
>           term1   =-(dxi*(dyjp*dzjm-dyjm*dzjp)
>      .              +dyi*(dzjp*dxjm-dzjm*dxjp) 
>      .              +dzi*(dxjp*dyjm-dxjm*dyjp))-eps1        
>           term2   = (ripm*(rjp*rjm-
>      .            (dxjp*dxjm+dyjp*dyjm+dzjp*dzjm)+eps))   
>           xjd(j,2)= term1/term2
>           term3   = (dxj1*(dyip*dzim-dyim*dzip)
>      .             +dyj1*(dzip*dxim-dzim*dxip) 
>      .             +dzj1*(dxip*dyim-dxim*dyip))-eps1 
>           term4    = (rjpm*(rip*rim-
>      .            (dxip*dxim+dyip*dyim+dzip*dzim)+eps)) 
>           xid(j,2)= term3/term4
>           xjp(j,2) = (dxjp*rjm-dxjm*rjp)/rjpm     
>           xjm(j,2) = (dyjp*rjm-dyjm*rjp)/rjpm     
>           xkm(j,2) = (dzjp*rjm-dzjm*rjp)/rjpm     
>           xkp(j,2) = .5*dxi
>           xim(j,2) = .5*dyi
>           xip(j,2) = .5*dzi
> 135      continue  
>         end if  
>         do 136 j = 2+jdmi1,jdmi2-1 
>           xjd(j,1) = exp(fc3*xjd(j,1))
>           xid(j,1) = exp(fc3*xid(j,1))
>           xjd(j,2) = exp(fc3*xjd(j,2))
>           xid(j,2) = exp(fc3*xid(j,2))
> 136     continue
>         arg1 = exp(-12.)
>         arg2 = 1. 
>         do 138 j = 2+jdmi1,jdmi2-1 
>           if(real(xjd(j,1)).lt.real(arg1)) xjd(j,1)=arg1 
>           if(real(xjd(j,1)).gt.real(arg2)) xjd(j,1)=arg2 
>           if(real(xid(j,1)).lt.real(arg1)) xid(j,1)=arg1 
>           if(real(xid(j,1)).gt.real(arg2)) xid(j,1)=arg2 
>           if(real(xjd(j,2)).lt.real(arg1)) xjd(j,2)=arg1 
>           if(real(xjd(j,2)).gt.real(arg2)) xjd(j,2)=arg2 
>           if(real(xid(j,2)).lt.real(arg1)) xid(j,2)=arg1 
>           if(real(xid(j,2)).gt.real(arg2)) xid(j,2)=arg2 
> 138     continue 
>         do 141 i=ilow,ihgh  
>         jdmi1 = jdm*(i-1)
>         xjd(1+jdmi1,1)    = xjd(2+jdmi1,1) 
>         xjd(jdm+jdmi1,1)  = xjd(jdm-1+jdmi1,1) 
>         xid(1+jdmi1,1)    = xid(2+jdmi1,1) 
>         xid(jdm+jdmi1,1)  = xid(jdm-1+jdmi1,1) 
>         xjd(1+jdmi1,2)    = xjd(2+jdmi1,2) 
>         xjd(jdm+jdmi1,2)  = xjd(jdm-1+jdmi1,2) 
>         xid(1+jdmi1,2)    = xid(2+jdmi1,2) 
>         xid(jdm+jdmi1,2)  = xid(jdm-1+jdmi1,2) 
>         xjp(1+jdmi1,1)   = xjp(2+jdmi1,1)
>         xjp(jdm+jdmi1,1) = xjp(jdm-1+jdmi1,1)
>         xjm(1+jdmi1,1)   = xjm(2+jdmi1,1)
>         xjm(jdm+jdmi1,1) = xjm(jdm-1+jdmi1,1)
>         xkm(1+jdmi1,1)   = xkm(2+jdmi1,1)
>         xkm(jdm+jdmi1,1) = xkm(jdm-1+jdmi1,1)
>         xkp(1+jdmi1,1)   = xkp(2+jdmi1,1)
>         xkp(jdm+jdmi1,1) = xkp(jdm-1+jdmi1,1)
>         xim(1+jdmi1,1)   = xim(2+jdmi1,1)
>         xim(jdm+jdmi1,1) = xim(jdm-1+jdmi1,1)
>         xip(1+jdmi1,1)   = xip(2+jdmi1,1)
>         xip(jdm+jdmi1,1) = xip(jdm-1+jdmi1,1)
>         xjp(1+jdmi1,2)   = xjp(2+jdmi1,2)
>         xjp(jdm+jdmi1,2) = xjp(jdm-1+jdmi1,2)
>         xjm(1+jdmi1,2)   = xjm(2+jdmi1,2)
>         xjm(jdm+jdmi1,2) = xjm(jdm-1+jdmi1,2)
>         xkm(1+jdmi1,2)   = xkm(2+jdmi1,2)
>         xkm(jdm+jdmi1,2) = xkm(jdm-1+jdmi1,2)
>         xkp(1+jdmi1,2)   = xkp(2+jdmi1,2)
>         xkp(jdm+jdmi1,2) = xkp(jdm-1+jdmi1,2)
>         xim(1+jdmi1,2)   = xim(2+jdmi1,2)
>         xim(jdm+jdmi1,2) = xim(jdm-1+jdmi1,2)
>         xip(1+jdmi1,2)   = xip(2+jdmi1,2)
>         xip(jdm+jdmi1,2) = xip(jdm-1+jdmi1,2)
>  141      continue 
> 
>         jdmi1 = jdm*(ilow-1) 
>         do j = 2+jdmi1,jdmi2-1
>           if(real(xjd(j,1)).lt.1.e-2) xjd(j,2) = xjd(j,1)
>           if(real(xjd(j,2)).lt.1.e-2) xjd(j,1) = xjd(j,2)
>           if(real(xid(j,1)).lt.1.e-2) xid(j,2) = xid(j,1)
>           if(real(xid(j,2)).lt.1.e-2) xid(j,1) = xid(j,2)
>         enddo
>          
>          
>         jdmi1 = jdm*(ilow-1) 
>         jdmi2 = jdm*ihgh    
>           do 154 j = 1+jdmi1,jdmi2    
>             dzj(j,1) =-(xjp(j,1)*xim(j,1)-xjm(j,1)*xkp(j,1)) 
>             dxj(j,1) =-(xjm(j,1)*xip(j,1)-xkm(j,1)*xim(j,1))  
>             dzj(j,2) =-(xjp(j,2)*xim(j,2)-xjm(j,2)*xkp(j,2)) 
>             dxj(j,2) =-(xjm(j,2)*xip(j,2)-xkm(j,2)*xim(j,2))  
> 154       continue  
>         do 156 j = 1+jdmi1,jdmi2    
>           term1 =  sqrt((xkm(j,1)*xkp(j,1)-xjp(j,1)*xip(j,1))  
>      .              *(xkm(j,1)*xkp(j,1)-xjp(j,1)*xip(j,1))  
>      .                    +dxj(j,1)*dxj(j,1)+dzj(j,1)*dzj(j,1))   
>           term2 =  sqrt((xkm(j,2)*xkp(j,2)-xjp(j,2)*xip(j,2))  
>      .              *(xkm(j,2)*xkp(j,2)-xjp(j,2)*xip(j,2))  
>      .                    +dxj(j,2)*dxj(j,2)+dzj(j,2)*dzj(j,2))   
>           dyj(j,1) = 1./(term1+eps) 
>           dxj(j,1) = dxj(j,1)*dyj(j,1) 
>           dzj(j,1) = dzj(j,1)*dyj(j,1) 
>           dyj(j,2) = 1./(term2+eps) 
>           dxj(j,2) = dxj(j,2)*dyj(j,2) 
>           dzj(j,2) = dzj(j,2)*dyj(j,2) 
> 156     continue  
>           
>        if(i2d.eq.0) then            
>           do 222 j = 1+jdmi1,jdmi2
>            dyj(j,1) =-(xkm(j,1)*xkp(j,1)-xjp(j,1)*xip(j,1))*dyj(j,1)     
>            dyj(j,2) =-(xkm(j,2)*xkp(j,2)-xjp(j,2)*xip(j,2))*dyj(j,2)     
>  222      continue  
>        else 
>          do 225 j = 1,jdm*idm
>            xid(j,1) = 0.    
>            xid(j,2) = 0.    
>            dyj(j,1) = 0.
>            dyj(j,2) = 0.
>  225      continue
>        end if 
> 
> 
> 
> 
>         if(idm.gt.2) then 
>          ilow = 2
>          ihgh = idm - 1
>          jdmi1 = jdm*(ilow-1) 
>          jdmi2 = jdm*ihgh    
>          do 252 j = 2+jdmi1,jdmi2-1  
>           dxip =  (x(ipid(j)) -x(j))         
>           dyip =  (y(ipid(j)) -y(j)) 
>           dzip =  (z(ipid(j)) -z(j)) 
>           dxim =  (x(imid(j)) -x(j))         
>           dyim =  (y(imid(j)) -y(j)) 
>           dzim =  (z(imid(j)) -z(j)) 
>           dxi  =  dxip-dxim
>           dyi  =  dyip-dyim
>           dzi  =  dzip-dzim
>           dyjp =  (y(j+1)-y(j))
>           dyjm =  (y(j-1)-y(j))  
>           dzjp =  (z(j+1)-z(j))  
>           dzjm =  (z(j-1)-z(j)) 
>           dxjm =  (x(j-1)-x(j))  
>           dxjp =  (x(j+1)-x(j)) 
>           rjp  = sqrt(dxjp*dxjp+dyjp*dyjp+dzjp*dzjp) 
>           rjm  = sqrt(dxjm*dxjm+dyjm*dyjm+dzjm*dzjm)  
>           rjpm = rjp+rjm
>           rip  = sqrt(dxip*dxip+dyip*dyip+dzip*dzip) 
>           rim  = sqrt(dxim*dxim+dyim*dyim+dzim*dzim) 
>           ripm = rip+rim
>           xjp(j,1) = (dxjp*rjm-dxjm*rjp)/rjpm     
>           xjm(j,1) = (dyjp*rjm-dyjm*rjp)/rjpm     
>           xkm(j,1) = (dzjp*rjm-dzjm*rjp)/rjpm     
>           xkp(j,1) = .5*dxi
>           xim(j,1) = .5*dyi
>           xip(j,1) = .5*dzi
> 252      continue  
>          jdkdm = jdm*idm*(kdm-1)
>          do 253 j = 2+jdmi1,jdmi2-1  
>           dxip =  (x(jdkdm+ipid(j)) -x(jdkdm+j))         
>           dyip =  (y(jdkdm+ipid(j)) -y(jdkdm+j)) 
>           dzip =  (z(jdkdm+ipid(j)) -z(jdkdm+j)) 
>           dxim =  (x(jdkdm+imid(j)) -x(jdkdm+j))         
>           dyim =  (y(jdkdm+imid(j)) -y(jdkdm+j)) 
>           dzim =  (z(jdkdm+imid(j)) -z(jdkdm+j)) 
>           dxi  =  dxip-dxim
>           dyi  =  dyip-dyim
>           dzi  =  dzip-dzim
>           dyjp =  (y(jdkdm+j+1)-y(jdkdm+j))
>           dyjm =  (y(jdkdm+j-1)-y(jdkdm+j))  
>           dzjp =  (z(jdkdm+j+1)-z(jdkdm+j))  
>           dzjm =  (z(jdkdm+j-1)-z(jdkdm+j)) 
>           dxjm =  (x(jdkdm+j-1)-x(jdkdm+j))  
>           dxjp =  (x(jdkdm+j+1)-x(jdkdm+j)) 
>           rjp  = sqrt(dxjp*dxjp+dyjp*dyjp+dzjp*dzjp) 
>           rjm  = sqrt(dxjm*dxjm+dyjm*dyjm+dzjm*dzjm)  
>           rjpm = rjp+rjm
>           rip  = sqrt(dxip*dxip+dyip*dyip+dzip*dzip) 
>           rim  = sqrt(dxim*dxim+dyim*dyim+dzim*dzim) 
>           ripm = rip+rim
>           xjp(j,2) = (dxjp*rjm-dxjm*rjp)/rjpm     
>           xjm(j,2) = (dyjp*rjm-dyjm*rjp)/rjpm     
>           xkm(j,2) = (dzjp*rjm-dzjm*rjp)/rjpm     
>           xkp(j,2) = .5*dxi
>           xim(j,2) = .5*dyi
>           xip(j,2) = .5*dzi
> 253      continue  
>         else
>          ilow = 1
>          ihgh = 2 
>          jdmi1 = jdm*(ilow-1) 
>          jdmi2 = jdm*ihgh    
>          do 254 j = 2+jdmi1,jdmi2-1  
>           dxip =  (x(ipid(j)) -x(imid(j)))         
>           dyip =  (y(ipid(j)) -y(imid(j))) 
>           dzip =  (z(ipid(j)) -z(imid(j))) 
>           dxim = -(x(ipid(j)) -x(imid(j)))         
>           dyim = -(y(ipid(j)) -y(imid(j))) 
>           dzim = -(z(ipid(j)) -z(imid(j))) 
>           dxi  =  dxip-dxim
>           dyi  =  dyip-dyim
>           dzi  =  dzip-dzim
>           dyjp =  (y(j+1)-y(j))
>           dyjm =  (y(j-1)-y(j))  
>           dzjp =  (z(j+1)-z(j))  
>           dzjm =  (z(j-1)-z(j)) 
>           dxjm =  (x(j-1)-x(j))  
>           dxjp =  (x(j+1)-x(j)) 
>           rjp  = sqrt(dxjp*dxjp+dyjp*dyjp+dzjp*dzjp) 
>           rjm  = sqrt(dxjm*dxjm+dyjm*dyjm+dzjm*dzjm)  
>           rjpm = rjp+rjm
>           rip  = sqrt(dxip*dxip+dyip*dyip+dzip*dzip) 
>           rim  = sqrt(dxim*dxim+dyim*dyim+dzim*dzim) 
>           ripm = rip+rim
>           xjp(j,1) = (dxjp*rjm-dxjm*rjp)/rjpm     
>           xjm(j,1) = (dyjp*rjm-dyjm*rjp)/rjpm     
>           xkm(j,1) = (dzjp*rjm-dzjm*rjp)/rjpm     
>           xkp(j,1) = .5*dxi
>           xim(j,1) = .5*dyi
>           xip(j,1) = .5*dzi
> 254      continue
>          jdkdm = jdm*idm*(kdm-1)
>          do 255 j = 2+jdmi1,jdmi2-1  
>           dxip =  (x(jdkdm+ipid(j)) -x(jdkdm+imid(j)))         
>           dyip =  (y(jdkdm+ipid(j)) -y(jdkdm+imid(j))) 
>           dzip =  (z(jdkdm+ipid(j)) -z(jdkdm+imid(j))) 
>           dxim = -(x(jdkdm+ipid(j)) -x(jdkdm+imid(j)))         
>           dyim = -(y(jdkdm+ipid(j)) -y(jdkdm+imid(j))) 
>           dzim = -(z(jdkdm+ipid(j)) -z(jdkdm+imid(j))) 
>           dxi  =  dxip-dxim
>           dyi  =  dyip-dyim
>           dzi  =  dzip-dzim
>           dyjp =  (y(jdkdm+j+1)-y(jdkdm+j))
>           dyjm =  (y(jdkdm+j-1)-y(jdkdm+j))  
>           dzjp =  (z(jdkdm+j+1)-z(jdkdm+j))  
>           dzjm =  (z(jdkdm+j-1)-z(jdkdm+j)) 
>           dxjm =  (x(jdkdm+j-1)-x(jdkdm+j))  
>           dxjp =  (x(jdkdm+j+1)-x(jdkdm+j)) 
>           rjp  = sqrt(dxjp*dxjp+dyjp*dyjp+dzjp*dzjp) 
>           rjm  = sqrt(dxjm*dxjm+dyjm*dyjm+dzjm*dzjm)  
>           rjpm = rjp+rjm
>           rip  = sqrt(dxip*dxip+dyip*dyip+dzip*dzip) 
>           rim  = sqrt(dxim*dxim+dyim*dyim+dzim*dzim) 
>           ripm = rip+rim
>           xjp(j,2) = (dxjp*rjm-dxjm*rjp)/rjpm     
>           xjm(j,2) = (dyjp*rjm-dyjm*rjp)/rjpm     
>           xkm(j,2) = (dzjp*rjm-dzjm*rjp)/rjpm     
>           xkp(j,2) = .5*dxi
>           xim(j,2) = .5*dyi
>           xip(j,2) = .5*dzi
> 255      continue  
>         end if  
>         do 261 i=ilow,ihgh  
>         jdmi1 = jdm*(i-1)
>         xjp(1+jdmi1,1)   = xjp(2+jdmi1,1)
>         xjp(jdm+jdmi1,1) = xjp(jdm-1+jdmi1,1)
>         xjm(1+jdmi1,1)   = xjm(2+jdmi1,1)
>         xjm(jdm+jdmi1,1) = xjm(jdm-1+jdmi1,1)
>         xkm(1+jdmi1,1)   = xkm(2+jdmi1,1)
>         xkm(jdm+jdmi1,1) = xkm(jdm-1+jdmi1,1)
>         xkp(1+jdmi1,1)   = xkp(2+jdmi1,1)
>         xkp(jdm+jdmi1,1) = xkp(jdm-1+jdmi1,1)
>         xim(1+jdmi1,1)   = xim(2+jdmi1,1)
>         xim(jdm+jdmi1,1) = xim(jdm-1+jdmi1,1)
>         xip(1+jdmi1,1)   = xip(2+jdmi1,1)
>         xip(jdm+jdmi1,1) = xip(jdm-1+jdmi1,1)
>         xjp(1+jdmi1,2)   = xjp(2+jdmi1,2)
>         xjp(jdm+jdmi1,2) = xjp(jdm-1+jdmi1,2)
>         xjm(1+jdmi1,2)   = xjm(2+jdmi1,2)
>         xjm(jdm+jdmi1,2) = xjm(jdm-1+jdmi1,2)
>         xkm(1+jdmi1,2)   = xkm(2+jdmi1,2)
>         xkm(jdm+jdmi1,2) = xkm(jdm-1+jdmi1,2)
>         xkp(1+jdmi1,2)   = xkp(2+jdmi1,2)
>         xkp(jdm+jdmi1,2) = xkp(jdm-1+jdmi1,2)
>         xim(1+jdmi1,2)   = xim(2+jdmi1,2)
>         xim(jdm+jdmi1,2) = xim(jdm-1+jdmi1,2)
>         xip(1+jdmi1,2)   = xip(2+jdmi1,2)
>         xip(jdm+jdmi1,2) = xip(jdm-1+jdmi1,2)
>  261      continue 
>          
2104,2105c2142,2513
<       return
<       end
---
>         jdmi1 = jdm*(ilow-1) 
>         jdmi2 = jdm*ihgh    
>         do 274 j = 1+jdmi1,jdmi2  
>           dvol(j+jdi2) =-(xjp(j,1)*xim(j,1)-xjm(j,1)*xkp(j,1)) 
>           dvol(j)      =-(xjm(j,1)*xip(j,1)-xkm(j,1)*xim(j,1))  
>           dvol(j+jdi5) =-(xjp(j,2)*xim(j,2)-xjm(j,2)*xkp(j,2)) 
>           dvol(j+jdi3) =-(xjm(j,2)*xip(j,2)-xkm(j,2)*xim(j,2))  
> 274     continue  
>         do 276 j = 1+jdmi1,jdmi2    
>           term1 =  sqrt((xkm(j,1)*xkp(j,1)-xjp(j,1)*xip(j,1))  
>      .              *(xkm(j,1)*xkp(j,1)-xjp(j,1)*xip(j,1))  
>      .            +dvol(j)*dvol(j)+dvol(j+jdi2)*dvol(j+jdi2))   
>           term2 =  sqrt((xkm(j,2)*xkp(j,2)-xjp(j,2)*xip(j,2))  
>      .              *(xkm(j,2)*xkp(j,2)-xjp(j,2)*xip(j,2))  
>      .         +dvol(j+jdi3)*dvol(j+jdi3)+dvol(j+jdi5)*dvol(j+jdi5))   
>           dvol(j+jdi1) = 1./(term1+eps) 
>           dvol(j)      = dvol(j     )*dvol(j+jdi1) 
>           dvol(j+jdi2) = dvol(j+jdi2)*dvol(j+jdi1) 
>           dvol(j+jdi4) = 1./(term2+eps) 
>           dvol(j+jdi3) = dvol(j+jdi3)*dvol(j+jdi4) 
>           dvol(j+jdi5) = dvol(j+jdi5)*dvol(j+jdi4) 
> 276     continue  
>           
>        if(i2d.eq.0) then            
>           do 292 j = 1+jdmi1,jdmi2
>             dvol(j+jdi1) =-(xkm(j,1)*xkp(j,1)-xjp(j,1)*xip(j,1))*
>      .                                              dvol(j+jdi1)     
>             dvol(j+jdi4) =-(xkm(j,2)*xkp(j,2)-xjp(j,2)*xip(j,2))*
>      .                                              dvol(j+jdi4)     
>  292      continue  
>        else 
>          do 295 j = 1,jdm*idm
>            dvol(j+jdi1) = 0.
>            dvol(j+jdi4) = 0.
>  295      continue
>        end if 
> 
>        do 298 j = 1+jdmi1,jdmi2
>          dxj(j,1) = dxj(j,1) - dvol(j)
>          dyj(j,1) = dyj(j,1) - dvol(j+jdi1)
>          dzj(j,1) = dzj(j,1) - dvol(j+jdi2)
>          dxj(j,2) =-dxj(j,2) + dvol(j+jdi3)
>          dyj(j,2) =-dyj(j,2) + dvol(j+jdi4)
>          dzj(j,2) =-dzj(j,2) + dvol(j+jdi5)
> 298    continue 
> 
>        tol = .5e-9
>        zzero = 10.**(-iexp)
>        if (real(tol).lt.real(zzero)) then
>           tol = 10.**(-iexp+1)
>        end if
> 
>        ixflag = 0
>        iyflag = 0
>        izflag = 0
>        if(idm.gt.2) then 
>          ilow = 2
>          ihgh = idm - 1
>        else
>          ilow = 1
>          ihgh = 2 
>        end if  
>        jdid = jdm*idm  
> 
>        rkdok1= sqrt((x(1+jdid*(kdm-1))-x(1))
>      .            *(x(1+jdid*(kdm-1))-x(1))+
>      .             (y(1+jdid*(kdm-1))-y(1))
>      .            *(y(1+jdid*(kdm-1))-y(1))+
>      .             (z(1+jdid*(kdm-1))-z(1))
>      .            *(z(1+jdid*(kdm-1))-z(1)))
>        rkdok2 = rkdok1
> 
>        nnt = 1
>        kdmot = kdm/2 + 1
>        do 400 iter = 1,ismooth                   
>         xdel = 0.
>         ydel = 0.
>         zdel = 0.  
>         orjdm = 1./real(jdm-1) 
> 
> 
>         xk1mk = xk1m(2)*orjdm  
>         xk2mk = xk2m(2)*orjdm   
>         xk3mk = xk1p(kdm-1)*orjdm  
>         xk4mk = xk2p(kdm-1)*orjdm   
>         do 309 j = jdm*(ilow-1)+2,jdm*ihgh-1 
>            xkp(j,1) = (rj1jd(j)*xk1mk+
>      .          rj2jd(j)*xk2mk)       
>            xkp(j,2) = (rj1jd(j)*xk3mk+
>      .          rj2jd(j)*xk4mk)       
> 309     continue 
> 
>         rk11  = 0.
>         rk21  = 0.
> 
> 
> 
>         jdkdm3 = jdid*(kdm-1)
> c       do 445 k = 2,kdmot
>         do 445 k = 2,kdm-1
>            jdk1 = jdid*(k-1)  
>            jdk2 = jdid*(k-2)
>            jdk  = jdid*k  
>            jdkdm1 = jdid*(kdm-k)  
>            jdkdm2 = jdid*(kdm-k+1)
>            jdkdm  = jdid*(kdm-k-1)  
>            rkdm1= real(kdm-1) 
>            kdm1 = int(rkdm1)
>            rk11   = rk11 + seta(k)
>            rk21   = rk21 + seta(kdm-k+2)
>            rkdok  = (rkdok1-rk11)/rkdok1
>            rk1    = rk11/rkdok1 
>            if(real(rkdok).lt.0.) rkdok = 0. 
>            if(real(rk1).gt.1.) rk1 = 1. 
>            rkdok2 = (rkdok1-rk21)/rkdok1
>            rk2    = rk21/rkdok1 
>            if(real(rkdok2).lt.0.) rkdok2 = 0. 
>            if(real(rk2).gt.1.) rk2 = 1. 
>            xk1mk = xk1m(k)  
>            xk2mk = xk2m(k)  
>            xk1pk = xk1p(k)*orjdm  
>            xk2pk = xk2p(k)*orjdm  
>            xk3pk = xk1m(kdm-k+1)*orjdm  
>            xk4pk = xk2m(kdm-k+1)*orjdm  
>            do 310 j = jdm*(ilow-1)+2,jdm*ihgh-1 
>            xkm(j,1) = xkp(j,1) 
> 310        xkm(j,2) = xkp(j,2) 
>            do 311 j = jdm*(ilow-1)+2,jdm*ihgh-1 
>            xjm(j,1) =(rkdok*xj1m(j)*xjd(j,1)+rk1*xj2m(j)
>      .             *xjd(j,2))        
>            xjp(j,1) =(rkdok*xj1p(j)*xjd(j,1)+rk1*xj2p(j)          
>      .             *xjd(j,2))        
>            xkp(j,1) =(rj1jd(j)*xk1pk+rj2jd(j)
>      .              *xk2pk)      
>            xjm(j,2) =(rkdok2*xj2m(j)*xjd(j,2)+rk2*xj1m(j)
>      .             *xjd(j,1))        
>            xjp(j,2) =(rkdok2*xj2p(j)*xjd(j,2)+rk2*xj1p(j)          
>      .             *xjd(j,1))        
>            xkp(j,2) =(rj1jd(j)*xk3pk+rj2jd(j)
>      .              *xk4pk)      
> 311        continue 
>            if(idm.gt.2) then
>              do 322 j = jdm*(ilow-1)+2,jdm*ihgh-1 
>               xim(j,1)=(rkdok*xi1m(j)*xid(j,1)+rk1*xi2m(j)
>      .             *xid(j,2))
>               xip(j,1)=(rkdok*xi1p(j)*xid(j,1)+rk1*xi2p(j)
>      .             *xid(j,2))
>               xim(j,2)=(rkdok2*xi2m(j)*xid(j,2)+rk2*xi1m(j)
>      .             *xid(j,1))
>               xip(j,2)=(rkdok2*xi2p(j)*xid(j,2)+rk2*xi1p(j)
>      .             *xid(j,1))
> 322          continue  
>              jdm2 = jdm 
>              jdm3 =-jdm 
>            else
>              do 323 j = 1,jdm*idm
>                xim(j,1) = 0.0
>                xip(j,1) = 0.0  
>                xim(j,2) = 0.0
>                xip(j,2) = 0.0  
> 323          continue 
>              jdm2 = 0
>              jdm3 = 0 
>            end if 
>            eps1 = epsilon(k,1)  
>            eps2 = 1.-epsilon(k,1)
>            eps3 = epsilon(k,2)  
>            eps4 = 1.-epsilon(k,2)
>            seta1= seta(k)
>            seta2= seta(kdm-k+2)
>            do 324 j=jdm*(ilow-1)+2,jdm*ihgh-1      
>            dvol(j       )=eps2*(xjp(j,1)*dx(j+1+jdk1)+xjm(j,1)*  
>      .           dx(j-1+jdk1)+xkp(j,1)*dx(j+jdk)+xkm(j,1)*dx(j+jdk2)         
>      .           +xip(j,1)*dx(j+jdm2+jdk1)+xim(j,1)*dx(j+jdm3+jdk1))   
>      .          /(xjp(j,1)+xjm(j,1)+xkp(j,1)+xkm(j,1)+xip(j,1)+xim(j,1))           
>      .          + eps1*(dx(j+jdk2)+seta1*dxj(j,1)*
>      .           xj3p(j,1))    
>            dvol(j+jdkdm3)=eps4*(xjp(j,2)*dx(j+1+jdkdm1)+xjm(j,2)*  
>      .         dx(j-1+jdkdm1)+xkp(j,2)*dx(j+jdkdm)+xkm(j,2)*dx(j+jdkdm2)         
>      .           +xip(j,2)*dx(j+jdm2+jdkdm1)+xim(j,2)*dx(j+jdm3+jdkdm1))   
>      .          /(xjp(j,2)+xjm(j,2)+xkp(j,2)+xkm(j,2)+xip(j,2)+xim(j,2))           
>      .          + eps3*(dx(j+jdkdm2)+seta2*dxj(j,2)*
>      .           xj3p(j,2))    
> 324        continue 
>     
>            do 325 i=1,idm 
>              dvol(jdm*i       )       = dx(jdm*i+jdk1)  
>              dvol(1+jdm*(i-1)       ) = dx(1+jdm*(i-1)+jdk1)  
>              dvol(jdm*i+jdkdm3)       = dx(jdm*i+jdkdm1)  
>              dvol(1+jdm*(i-1)+jdkdm3) = dx(1+jdm*(i-1)+jdkdm1)  
> 325        continue  
>            if(idm.gt.2) then 
>              jdmi2 = jdm*(idm-1) 
>              do 326 j  = 1,jdm    
>                dvol(j       )      = dx(j+jdk1)
>                dvol(j+jdmi2       )= dx(j+jdmi2+jdk1)
>                dvol(j+jdkdm3)      = dx(j+jdkdm1)
>                dvol(j+jdmi2+jdkdm3)= dx(j+jdmi2+jdkdm1)
> 326          continue  
>            end if 
>         do j=1,jdm*idm        
>              xdel = xdel+(dvol(j     )-dx(j+jdk1))*
>      .                   (dvol(j     )-dx(j+jdk1))
>      .                  +(dvol(j+jdkdm3)-dx(j+jdkdm1))*
>      .                   (dvol(j+jdkdm3)-dx(j+jdkdm1))
>         end do
>         if(jdk1.ne.jdkdm1) then
>           do  j=1,jdm*idm                      
>              dx(j+jdk1  ) = dvol(j       )
>              dx(j+jdkdm1) = dvol(j+jdkdm3)
>           enddo
>         else
>           do  j=1,jdm*idm                      
>              dx(j+jdk1  ) = .5*(dvol(j       )+dvol(j+jdkdm3)) 
>           enddo
>         end if
>            do 339 j=jdm*(ilow-1)+2,jdm*ihgh-1 
>            dvol(j     )=eps2*(xjp(j,1)*dz(j+1+jdk1)+xjm(j,1)*  
>      .           dz(j-1+jdk1)+xkp(j,1)*dz(j+jdk)+xkm(j,1)*dz(j+jdk2)         
>      .           +xip(j,1)*dz(j+jdm2+jdk1)+xim(j,1)*dz(j+jdm3+jdk1))   
>      .          /(xjp(j,1)+xjm(j,1)+xkp(j,1)+xkm(j,1)+xip(j,1)+xim(j,1))           
>      .          + eps1*(dz(j+jdk2)+seta1*dzj(j,1)*
>      .           xj3p(j,1))    
>            dvol(j+jdkdm3)=eps4*(xjp(j,2)*dz(j+1+jdkdm1)+xjm(j,2)*  
>      .         dz(j-1+jdkdm1)+xkp(j,2)*dz(j+jdkdm)+xkm(j,2)*dz(j+jdkdm2)         
>      .           +xip(j,2)*dz(j+jdm2+jdkdm1)+xim(j,2)*dz(j+jdm3+jdkdm1))   
>      .          /(xjp(j,2)+xjm(j,2)+xkp(j,2)+xkm(j,2)+xip(j,2)+xim(j,2))           
>      .          + eps3*(dz(j+jdkdm2)+seta2*dzj(j,2)*
>      .           xj3p(j,2))    
> 339        continue  
> 
>            do 341 i=1,idm 
>              dvol(jdm*i       )       = dz(jdm*i+jdk1)  
>              dvol(1+jdm*(i-1)       ) = dz(1+jdm*(i-1)+jdk1)  
>              dvol(jdm*i+jdkdm3)       = dz(jdm*i+jdkdm1)  
>              dvol(1+jdm*(i-1)+jdkdm3) = dz(1+jdm*(i-1)+jdkdm1)  
> 341        continue  
>            if(idm.gt.2) then 
>              jdmi2 = jdm*(idm-1) 
>              do 343 j  = 1,jdm    
>                dvol(j       )      = dz(j+jdk1)
>                dvol(j+jdmi2       )= dz(j+jdmi2+jdk1)
>                dvol(j+jdkdm3)      = dz(j+jdkdm1)
>                dvol(j+jdmi2+jdkdm3)= dz(j+jdmi2+jdkdm1)
> 343          continue  
>            end if 
>                
>         do j=1,jdm*idm          
>              zdel = zdel+(dvol(j     )-dz(j+jdk1))*
>      .                   (dvol(j     )-dz(j+jdk1))
>      .                  +(dvol(j+jdkdm3)-dz(j+jdkdm1))*
>      .                   (dvol(j+jdkdm3)-dz(j+jdkdm1))
>         end do
>         if(jdk1.ne.jdkdm1) then
>           do  j=1,jdm*idm                      
>              dz(j+jdk1  ) = dvol(j       )
>              dz(j+jdkdm1) = dvol(j+jdkdm3)
>           enddo
>         else
>           do  j=1,jdm*idm                      
>              dz(j+jdk1  ) = .5*(dvol(j       )+dvol(j+jdkdm3)) 
>           enddo
>         end if
>         do 416 j=jdm*(ilow-1)+2,jdm*ihgh-1      
>          dvol(j     )=eps2*(xjp(j,1)*dy(j+1+jdk1)+xjm(j,1)*  
>      .           dy(j-1+jdk1)+xkp(j,1)*dy(j+jdk)+xkm(j,1)*dy(j+jdk2)         
>      .           +xip(j,1)*dy(j+jdm2+jdk1)+xim(j,1)*dy(j+jdm3+jdk1))   
>      .          /(xjp(j,1)+xjm(j,1)+xkp(j,1)+xkm(j,1)+xip(j,1)+xim(j,1))           
>      .          + eps1*(dy(j+jdk2)+seta1*dyj(j,1)*
>      .            xj3p(j,1))    
>          dvol(j+jdkdm3)=eps4*(xjp(j,2)*dy(j+1+jdkdm1)+xjm(j,2)*  
>      .           dy(j-1+jdkdm1)+xkp(j,2)*dy(j+jdk)+xkm(j,2)*dy(j+jdk2)         
>      .           +xip(j,2)*dy(j+jdm2+jdkdm1)+xim(j,2)*dy(j+jdm3+jdkdm1))   
>      .          /(xjp(j,2)+xjm(j,2)+xkp(j,2)+xkm(j,2)+xip(j,2)+xim(j,2))           
>      .          + eps3*(dy(j+jdk2)+seta2*dyj(j,2)*
>      .            xj3p(j,2))    
> 416     continue 
>         do 417 i=1,idm
>           dvol(jdm*i       )       = dy(jdm*i+jdk1)
>           dvol(1+jdm*(i-1)       ) = dy(1+jdm*(i-1)+jdk1)
>           dvol(jdm*i+jdkdm3)       = dy(jdm*i+jdkdm1)
>           dvol(1+jdm*(i-1)+jdkdm3) = dy(1+jdm*(i-1)+jdkdm1)
> 417     continue
>         if(idm.gt.2) then
>           jdmi2 = jdm*(idm-1)
>           do 423 j  = 1,jdm
>             dvol(j       )      = dy(j+jdk1)
>             dvol(j+jdmi2       )= dy(j+jdmi2+jdk1)
>             dvol(j+jdkdm3)      = dy(j+jdkdm1)
>             dvol(j+jdmi2+jdkdm3)= dy(j+jdmi2+jdkdm1)
> 423       continue
>         end if
>         do 427 j=1,jdm*idm
>           ydel = ydel+(dvol(j     )-dy(j+jdk1))*
>      .                   (dvol(j     )-dy(j+jdk1))
>      .                  +(dvol(j+jdkdm3)-dy(j+jdkdm1))*
>      .                   (dvol(j+jdkdm3)-dy(j+jdkdm1))
> 427     continue
>         if(jdk1.ne.jdkdm1) then
>           do  j=1,jdm*idm                      
>              dy(j+jdk1  ) = dvol(j       )
>              dy(j+jdkdm1) = dvol(j+jdkdm3)
>           enddo
>         else
>           do  j=1,jdm*idm                      
>              dy(j+jdk1  ) = .5*(dvol(j     )+dvol(j+jdkdm3)) 
>           enddo
>         end if
> 445    continue 
>        if(real(xdel/(real(jdm)*real(kdm)*real(idm))).lt.real(tol).and.
>      1    real(ydel/(real(jdm)*real(kdm)*real(idm))).lt.real(tol).and.
>      2    real(zdel/(real(jdm)*real(kdm)*real(idm))).lt.real(tol)) 
>      3      goto  401  
> 1220   format(e12.5,2i7,3(1x,e12.5))   
> 
> 400    continue
> c      write(43,1220) real(time),nbl,ismooth,real(xdel)/(real(jdm)*
> c    .            real(kdm)*real(idm)),
> c    .               real(ydel)/(real(jdm)*real(kdm)*real(idm)),
> c    .               real(zdel)/(real(jdm)*real(kdm)*real(idm))
>        goto 402
> 401    continue
> c      write(43,1220) real(time),nbl,iter,real(xdel)/(real(jdm)*
> c    .            real(kdm)*real(idm)),
> c    .               real(ydel)/(real(jdm)*real(kdm)*real(idm)),
> c    .               real(zdel)/(real(jdm)*real(kdm)*real(idm))
> 402    continue
>   
>        if(i2d.ne.0) then 
>         do 2000 k=1,kdm 
>         do 2000 j=1,jdm 
>           dx(j+jdm+jdm*idm*(k-1)) = dx(j+jdm*idm*(k-1))  
>  2000     dz(j+jdm+jdm*idm*(k-1)) = dz(j+jdm*idm*(k-1))  
>        end if 
> 
>       deallocate(xj1p)
>       deallocate(xj1m)
>       deallocate(xj2p)
>       deallocate(xj2m)
>       deallocate(xi1p)
>       deallocate(xi1m)
>       deallocate(xi2p)
>       deallocate(xi2m)
>       deallocate(xk1p)
>       deallocate(xk1m)
>       deallocate(xk2p)
>       deallocate(xk2m)
>       deallocate(xj3p)
>       deallocate(seta)
>       deallocate(ipid)
>       deallocate(imid)
>       deallocate(rj1jd)
>       deallocate(rj2jd)
>       deallocate(xip)
>       deallocate(xjp)
>       deallocate(xkp)
>       deallocate(xim)
>       deallocate(xjm)
>       deallocate(xkm)
>       deallocate(xid)
>       deallocate(xjd)
>       deallocate(dzj)
>       deallocate(dxj)
>       deallocate(dyj)
>       deallocate(epsilon)
> 
>       call unperm_ijkxyz(jdmt,idmt,kdmt,nbl,dx,dy,dz,dvol)
>       call unperm_ijkxyz(jdmt,idmt,kdmt,nbl,xnm1,ynm1,znm1,dvol)
>       call unperm_ijkxyz(jdmt,idmt,kdmt,nbl,x,y,z,dvol)
> 
>        return
>        end 
Index: source/cfl3d/libs/force.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/force.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
8c8
< c     $Id: force.F,v 1.4 2003/10/07 17:57:04 rumsey Exp $
---
> c     $Id: force.F,v 1.3 2003/05/09 19:48:00 rumsey Exp $
164,165c164
<      .    abs(kbcinfo(nbl,ns,1,kk)).eq.2014 .or.
<      .    abs(kbcinfo(nbl,ns,1,kk)).eq.2016)) then
---
>      .    abs(kbcinfo(nbl,ns,1,kk)).eq.2014)) then
293,294c292
<      .    abs(jbcinfo(nbl,ns,1,jj)).eq.2014 .or.
<      .    abs(jbcinfo(nbl,ns,1,jj)).eq.2016)) then
---
>      .    abs(jbcinfo(nbl,ns,1,jj)).eq.2014)) then
422,423c420
<      .    abs(ibcinfo(nbl,ns,1,ii)).eq.2014 .or.
<      .    abs(ibcinfo(nbl,ns,1,ii)).eq.2016)) then
---
>      .    abs(ibcinfo(nbl,ns,1,ii)).eq.2014)) then
Index: source/cfl3d/libs/getdhdr.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/getdhdr.F,v
retrieving revision 1.5
retrieving revision 1.4
diff -r1.5 -r1.4
3c3
< c     $Id: getdhdr.F,v 1.5 2003/10/07 17:57:04 rumsey Exp $
---
> c     $Id: getdhdr.F,v 1.4 2003/05/09 19:48:01 rumsey Exp $
103,112d102
<       if (abs(ibctyp).eq.2016) then
<          datahdr(1)  = '   tw/tinf'
<          datahdr(2)  = '        cq'
<          datahdr(3)  = '       cqu'
<          datahdr(4)  = '     sjetx'
<          datahdr(5)  = '     sjety'
<          datahdr(6)  = '     sjetz'
<          datahdr(7)  = '     rfreq'
<       end if
< c
Index: source/cfl3d/libs/global.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/global.F,v
retrieving revision 1.31
retrieving revision 1.14
diff -r1.31 -r1.14
29c29
< c     $Id: global.F,v 1.31 2005/10/07 01:49:53 rebart Exp $
---
> c     $Id: global.F,v 1.14 2003/09/11 20:28:43 biedron Exp $
114,117c114,115
<       dimension aesrfdat(5,maxaes),iskip(maxbl,500),jskip(maxbl,500),
<      .          kskip(maxbl,500)
<       dimension iskipt(maxbl,500),jskipt(maxbl,500),kskipt(maxbl,500)
<       dimension nskpi1(maxbl),nskpj1(maxbl),nskpk1(maxbl)
---
>       dimension aesrfdat(5,maxaes),iskip(maxbl),jskip(maxbl),
>      .          kskip(maxbl)
170,171c168
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
---
>       common /deformz/ beta1,ismooth,negvol
173,177c170
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
<       common /axisym/ iaxi2plane
<       common /fullns/ ifullns
<       common /curvat/ isarc2d,sarccr3,ieasmcc2d
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
355,358d347
<       if (real(dt) .lt. 0.0 .and. ides .eq. 1) then
<         write(iunit11,'('' WARNING: DES SHOULD be run time-'',
<      .   ''accurately (dt>0)'')')
<       end if
451d439
<    36 format(8i10)
462,470c450
< c   Check for SARC & EASMCC models
<       if ((isarc2d .eq. 1 .or. ieasmcc2d .eq. 1) .and. i2d .eq. 0) then
<         write(iunit11,'('' WARNING: SARC & EASMCC currently only'',
<      .  '' coded for 2-D curvature in x-z or x-y planes;'')')
<         write(iunit11,'(''          (i-index MUST be in spanwise'',
<      .  '' direction; i-index derivatives are not accounted for)...'')')
<         write(iunit11,'(''          usage in 3-D cases is'',
<      .  '' discouraged'')')
<       end if
---
>    36 format(8i10)
575d554
< c              =15  turbulent - k-enstrophy model
677c656
<       if (ivisc(1).gt.15.or. ivisc(2).gt.15.or. ivisc(3).gt.15) then
---
>       if (ivisc(1).gt.14.or. ivisc(2).gt.14.or. ivisc(3).gt.14) then
774,784d752
<       if (isarc2d .eq. 1 .and. ivmx .ne. 5) then
<         write(iunit11,'('' WARNING: isarc2d not active'',
<      .  '' unless SA model (ivisc=5) used'')')
<       end if
<       if (ieasmcc2d .eq. 1 .and. (ivmx.ne.8 .and. ivmx.ne.9 .and.
<      .  ivmx.ne.11 .and. ivmx.ne.12 .and. ivmx.ne.13 .and.
<      .  ivmx.ne.14)) then
<         write(iunit11,'('' WARNING: ieasmcc2d not active'',
<      .  '' unless EASM model (ivisc=8,9,11,12,13, or 14) used'')')
<       end if
< c
813,846d780
<       if (iaxi2plane.eq.1 .and. (i2d .ne. 0 .or. idim .ne. 2)) then
<         write(iunit11,'('' WARNING: iaxi2plane set back to 0'')')
<         write(iunit11,'(''    (i2d must=0 and idim must=2)'')')
<         iaxi2plane=0
<       end if
< c   check usage of full N-S
<       if (ifullns .ne. 0) then
<         if (i2d .eq. 0 .and. idim .gt. 2 .and. (ivisc(1).eq.0 .or. 
<      .      ivisc(2).eq.0 .or. ivisc(3).eq.0)) then
<           write(iunit11,'('' WARNING: When using full N-S in 3-D, '',
<      .      ''viscous terms (ivisc) usually '')')
<           write(iunit11,'(''must be ON in all 3 directions'')')
<         end if
<         if (i2d .eq. 0 .and. idim .eq. 2 .and. (ivisc(2).eq.0 .or. 
<      .    ivisc(3).eq.0)) then
<           write(iunit11,'('' ERROR: When using full N-S in 3-D, '',
<      .      ''with idim=2, viscous terms (ivisc) must be'')')
<           write(iunit11,'('' ON in both J and K directions'')')
<           call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<         end if
<         if (i2d .ne. 0 .and. (ivisc(2).eq.0 .or. ivisc(3).eq.0)) then
<           write(iunit11,'('' ERROR: When using full N-S in 2-D, '',
<      .      ''viscous terms (ivisc) must be'')')
<           write(iunit11,'('' ON in both J and K directions'')')
<           call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<         end if
<         if (idim .eq. 2 .and. ivisc(1).ne.0) then
<           write(iunit11,'('' ERROR: Having ifullns .ne. 0 with'',
<      .      '' idim=2 and ivisc(1) .ne. 0'')')
<           write(iunit11,'('' can cause major problems; recommend'',
<      .      '' setting ivisc(1)=0'')')
<           call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<         end if
<       end if
1129,1135d1062
<       if (iaxi2plane.eq.1 .and. (ifds(1).eq.1.or.ifds(2).eq.1.or.
<      .    ifds(3).eq.1)) then
<         write(iunit11,'('' WARNING: if problems occur when running'',
<      .    '' two-plane axisymmetric case with'')')
<         write(iunit11,'(''   singular or near-singular axis,'',
<      .    '' the use of IFDS=0 may help'')')
<       end if
1299,1302c1226,1229
<       if ((abs(ibctyp) .eq. 2004 .or. abs(ibctyp) .eq. 2014 .or.
<      .     abs(ibctyp) .eq. 2016) .and. iviscg(nbl,1) .eq. 0) then
<        write(iunit11,'('' stopping...must have ivisc(i) > 0 if'')')
<        write(iunit11,'(''   bc2004/14/16 is being used on an i-face'')')
---
>       if ((abs(ibctyp) .eq. 2004 .or. abs(ibctyp) .eq. 2014) .and.
>      .     iviscg(nbl,1) .eq. 0) then
>           write(iunit11,'('' stopping...must have ivisc(i) > 0 if'')')
>           write(iunit11,'(''   bc2004/14 is being used on an i-face'')')
1336,1337c1263
<      .   abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014 .or.
<      .   abs(ibctyp).eq.2016) mfoseg = 1
---
>      .   abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014) mfoseg = 1
1554,1557c1480,1483
<       if ((abs(ibctyp) .eq. 2004 .or. abs(ibctyp) .eq. 2014 .or.
<      .     abs(ibctyp) .eq. 2016) .and. iviscg(nbl,1) .eq. 0) then
<        write(iunit11,'('' stopping...must have ivisc(i) > 0 if'')')
<        write(iunit11,'(''   bc2004/14/16 is being used on an i-face'')')
---
>       if ((abs(ibctyp) .eq. 2004  .or. abs(ibctyp) .eq. 2014) .and. 
>      .     iviscg(nbl,1) .eq. 0) then
>           write(iunit11,'('' stopping...must have ivisc(i) > 0 if'')')
>           write(iunit11,'(''   bc2004/14 is being used on an i-face'')')
1589,1590c1515
<      .   abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014 .or.
<      .   abs(ibctyp).eq.2016) mfoseg = 1
---
>      .   abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014) mfoseg = 1
1795,1798c1720,1723
<       if ((abs(jbctyp) .eq. 2004 .or. abs(jbctyp) .eq. 2014 .or.
<      .     abs(jbctyp) .eq. 2016) .and. iviscg(nbl,2) .eq. 0) then
<        write(iunit11,'('' stopping...must have ivisc(j) > 0 if'')')
<        write(iunit11,'(''   bc2004/14/16 is being used on an j-face'')')
---
>       if ((abs(jbctyp) .eq. 2004  .or. abs(jbctyp) .eq. 2014) .and. 
>      .     iviscg(nbl,2) .eq. 0) then
>           write(iunit11,'('' stopping...must have ivisc(j) > 0 if'')')
>           write(iunit11,'(''   bc2004/14 is being used on a j-face'')')
1830,1831c1755
<      .   abs(jbctyp).eq.1006 .or. abs(jbctyp).eq.2014 .or.
<      .   abs(jbctyp).eq.2016) mfoseg = 1
---
>      .   abs(jbctyp).eq.1006 .or. abs(jbctyp).eq.2014) mfoseg = 1
2035,2038c1959,1962
<       if ((abs(jbctyp) .eq. 2004 .or. abs(jbctyp) .eq. 2014 .or.
<      .     abs(jbctyp) .eq. 2016) .and. iviscg(nbl,2) .eq. 0) then
<        write(iunit11,'('' stopping...must have ivisc(j) > 0 if'')')
<        write(iunit11,'(''   bc2004/14/16 is being used on an j-face'')')
---
>       if ((abs(jbctyp) .eq. 2004 .or. abs(jbctyp) .eq. 2014) .and. 
>      .     iviscg(nbl,2) .eq. 0) then
>           write(iunit11,'('' stopping...must have ivisc(j) > 0 if'')')
>           write(iunit11,'(''   bc2004/14 is being used on a j-face'')')
2070,2071c1994
<      .   abs(jbctyp).eq.1006 .or. abs(jbctyp).eq.2014 .or.
<      .   abs(jbctyp).eq.2016) mfoseg = 1
---
>      .   abs(jbctyp).eq.1006 .or. abs(jbctyp).eq.2014) mfoseg = 1
2274,2277c2197,2200
<       if ((abs(kbctyp) .eq. 2004 .or. abs(kbctyp) .eq. 2014 .or.
<      .     abs(kbctyp) .eq. 2016) .and. iviscg(nbl,3) .eq. 0) then
<        write(iunit11,'('' stopping...must have ivisc(k) > 0 if'')')
<        write(iunit11,'(''   bc2004/14/16 is being used on an k-face'')')
---
>       if ((abs(kbctyp) .eq. 2004 .or. abs(kbctyp) .eq. 2014) .and. 
>      .     iviscg(nbl,3) .eq. 0) then
>           write(iunit11,'('' stopping...must have ivisc(k) > 0 if'')')
>           write(iunit11,'(''   bc2004/14 is being used on a k-face'')')
2309,2310c2232
<      .   abs(kbctyp).eq.1006 .or. abs(kbctyp).eq.2014 .or.
<      .   abs(kbctyp).eq.2016) mfoseg = 1
---
>      .   abs(kbctyp).eq.1006 .or. abs(kbctyp).eq.2014) mfoseg = 1
2513,2516c2435,2438
<       if ((abs(kbctyp) .eq. 2004 .or. abs(kbctyp) .eq. 2014 .or.
<      .     abs(kbctyp) .eq. 2016) .and. iviscg(nbl,3) .eq. 0) then
<        write(iunit11,'('' stopping...must have ivisc(k) > 0 if'')')
<        write(iunit11,'(''   bc2004/14/16 is being used on an k-face'')')
---
>       if ((abs(kbctyp) .eq. 2004 .or. abs(kbctyp) .eq. 2014) .and. 
>      .     iviscg(nbl,3) .eq. 0) then
>           write(iunit11,'('' stopping...must have ivisc(k) > 0 if'')')
>           write(iunit11,'(''   bc2004/14 is being used on a k-face'')')
2548,2549c2470
<      .   abs(kbctyp).eq.1006 .or. abs(kbctyp).eq.2014 .or.
<      .   abs(kbctyp).eq.2016) mfoseg = 1
---
>      .   abs(kbctyp).eq.1006 .or. abs(kbctyp).eq.2014) mfoseg = 1
2728,2729c2649
<      .          abs(ibcinfo(nbl,nseg,1,1)).eq.2014 .or.
<      .          abs(ibcinfo(nbl,nseg,1,1)).eq.2016) then
---
>      .          abs(ibcinfo(nbl,nseg,1,1)).eq.2014) then
2749,2750c2669
<      .          abs(ibcinfo(nbl,nseg,1,2)).eq.2014 .or.
<      .          abs(ibcinfo(nbl,nseg,1,2)).eq.2016) then
---
>      .          abs(ibcinfo(nbl,nseg,1,2)).eq.2014) then
2770,2771c2689
<      .          abs(jbcinfo(nbl,nseg,1,1)).eq.2014 .or.
<      .          abs(jbcinfo(nbl,nseg,1,1)).eq.2016) then
---
>      .          abs(jbcinfo(nbl,nseg,1,1)).eq.2014) then
2791,2792c2709
<      .          abs(jbcinfo(nbl,nseg,1,2)).eq.2014 .or.
<      .          abs(jbcinfo(nbl,nseg,1,2)).eq.2016) then
---
>      .          abs(jbcinfo(nbl,nseg,1,2)).eq.2014) then
2812,2813c2729
<      .          abs(kbcinfo(nbl,nseg,1,1)).eq.2014 .or.
<      .          abs(kbcinfo(nbl,nseg,1,1)).eq.2016) then
---
>      .          abs(kbcinfo(nbl,nseg,1,1)).eq.2014) then
2833,2834c2749
<      .          abs(kbcinfo(nbl,nseg,1,2)).eq.2014 .or.
<      .          abs(kbcinfo(nbl,nseg,1,2)).eq.2016) then
---
>      .          abs(kbcinfo(nbl,nseg,1,2)).eq.2014) then
3976,3980d3890
< c NOTE: at the end (after both rigid and deforming/aeroelastic mesh data
< c       are set), if ialph = 1 we swap y and z grid motion parameters
< c       so that they remain consitant with the grid orientation as it
< c       also gets swapped around later in the code if ialph=1
< c
4378c4288
<       nsprgit  = 0
---
>       nmastr   = 1
4481,4487d4390
<          do nb = 1,maxbl
<            do ii = 1,500
<              iskip(nb,ii) = 0
<              jskip(nb,ii) = 0
<              kskip(nb,ii) = 0
<            enddo
<          enddo
4630,4632c4533,4535
<             iskip(nbl,1) = min(iskip_j,iskip_k)
<             jskip(nbl,1) = min(jskip_i,jskip_k)
<             kskip(nbl,1) = min(kskip_i,kskip_j)
---
>             iskip(nbl) = min(iskip_j,iskip_k)
>             jskip(nbl) = min(jskip_i,jskip_k)
>             kskip(nbl) = min(kskip_i,kskip_j)
4639,4640d4541
<            do it = 1,ngrid
<             nskpdif = 0
4646,4651c4547
<                iskipt(nbl1,1) = iskip(nbl1,1)
<                iskipt(nbl2,1) = iskip(nbl2,1)
<                jskipt(nbl1,1) = jskip(nbl1,1)
<                jskipt(nbl2,1) = jskip(nbl2,1)
<                kskipt(nbl1,1) = kskip(nbl1,1)
<                kskipt(nbl2,1) = kskip(nbl2,1)
---
> c
4654,4655c4550,4551
<                     call blocking_skip(iskip(nbl1,1) ,iskip(nbl2,1),
<      .                                 iskipt(nbl1,1),iskipt(nbl2,1))
---
>                      iskip(nbl1) = min(iskip(nbl1),iskip(nbl2))
>                      iskip(nbl2) = iskip(nbl1)
4657,4658c4553,4554
<                     call blocking_skip(iskip(nbl1,1) ,jskip(nbl2,1),
<      .                                 iskipt(nbl1,1),jskipt(nbl2,1))
---
>                      iskip(nbl1) = min(iskip(nbl1),jskip(nbl2))
>                      jskip(nbl2) = iskip(nbl1)
4660,4661c4556,4557
<                     call blocking_skip(iskip(nbl1,1) ,kskip(nbl2,1),
<      .                                 iskipt(nbl1,1),kskipt(nbl2,1))
---
>                      iskip(nbl1) = min(iskip(nbl1),kskip(nbl2))
>                      kskip(nbl2) = iskip(nbl1)
4665,4666c4561,4562
<                     call blocking_skip(jskip(nbl1,1) ,iskip(nbl2,1),
<      .                                 jskipt(nbl1,1),iskipt(nbl2,1))
---
>                      jskip(nbl1) = min(jskip(nbl1),iskip(nbl2))
>                      iskip(nbl2) = jskip(nbl1)
4668,4669c4564,4565
<                     call blocking_skip(jskip(nbl1,1) ,jskip(nbl2,1),
<      .                                 jskipt(nbl1,1),jskipt(nbl2,1))
---
>                      jskip(nbl1) = min(jskip(nbl1),jskip(nbl2))
>                      jskip(nbl2) = jskip(nbl1)
4671,4672c4567,4568
<                     call blocking_skip(jskip(nbl1,1) ,kskip(nbl2,1),
<      .                                 jskipt(nbl1,1),kskipt(nbl2,1))
---
>                      jskip(nbl1) = min(jskip(nbl1),kskip(nbl2))
>                      kskip(nbl2) = jskip(nbl1)
4676,4677c4572,4573
<                     call blocking_skip(kskip(nbl1,1) ,iskip(nbl2,1),
<      .                                 kskipt(nbl1,1),iskipt(nbl2,1))
---
>                      kskip(nbl1) = min(kskip(nbl1),iskip(nbl2))
>                      iskip(nbl2) = kskip(nbl1)
4679,4680c4575,4576
<                     call blocking_skip(kskip(nbl1,1) ,jskip(nbl2,1),
<      .                                 kskipt(nbl1,1),jskipt(nbl2,1))
---
>                      kskip(nbl1) = min(kskip(nbl1),jskip(nbl2))
>                      jskip(nbl2) = kskip(nbl1)
4682,4683c4578,4579
<                     call blocking_skip(kskip(nbl1,1) ,kskip(nbl2,1),
<      .                                 kskipt(nbl1,1),kskipt(nbl2,1))
---
>                      kskip(nbl1) = min(kskip(nbl1),kskip(nbl2))
>                      kskip(nbl2) = kskip(nbl1)
4689,4690c4585,4586
<                     call blocking_skip(iskip(nbl1,1) ,iskip(nbl2,1),
<      .                                 iskipt(nbl1,1),iskipt(nbl2,1))
---
>                      iskip(nbl1) = min(iskip(nbl1),iskip(nbl2))
>                      iskip(nbl2) = iskip(nbl1)
4692,4693c4588,4589
<                     call blocking_skip(iskip(nbl1,1) ,jskip(nbl2,1),
<      .                                 iskipt(nbl1,1),jskipt(nbl2,1))
---
>                      iskip(nbl1) = min(iskip(nbl1),jskip(nbl2))
>                      jskip(nbl2) = iskip(nbl1)
4695,4696c4591,4592
<                     call blocking_skip(iskip(nbl1,1) ,kskip(nbl2,1),
<      .                                 iskipt(nbl1,1),kskipt(nbl2,1))
---
>                      iskip(nbl1) = min(iskip(nbl1),kskip(nbl2))
>                      kskip(nbl2) = iskip(nbl1)
4700,4701c4596,4597
<                     call blocking_skip(jskip(nbl1,1) ,iskip(nbl2,1),
<      .                                 jskipt(nbl1,1),iskipt(nbl2,1))
---
>                      jskip(nbl1) = min(jskip(nbl1),iskip(nbl2))
>                      iskip(nbl2) = jskip(nbl1)
4703,4704c4599,4600
<                     call blocking_skip(jskip(nbl1,1) ,jskip(nbl2,1),
<      .                                 jskipt(nbl1,1),jskipt(nbl2,1))
---
>                      jskip(nbl1) = min(jskip(nbl1),jskip(nbl2))
>                      jskip(nbl2) = jskip(nbl1)
4706,4707c4602,4603
<                     call blocking_skip(jskip(nbl1,1) ,kskip(nbl2,1),
<      .                                 jskipt(nbl1,1),kskipt(nbl2,1))
---
>                      jskip(nbl1) = min(jskip(nbl1),kskip(nbl2))
>                      kskip(nbl2) = jskip(nbl1)
4711,4712c4607,4608
<                     call blocking_skip(kskip(nbl1,1) ,iskip(nbl2,1),
<      .                                 kskipt(nbl1,1),iskipt(nbl2,1))
---
>                      kskip(nbl1) = min(kskip(nbl1),iskip(nbl2))
>                      iskip(nbl2) = kskip(nbl1)
4714,4715c4610,4611
<                     call blocking_skip(kskip(nbl1,1) ,jskip(nbl2,1),
<      .                                 kskipt(nbl1,1),jskipt(nbl2,1))
---
>                      kskip(nbl1) = min(kskip(nbl1),jskip(nbl2))
>                      jskip(nbl2) = kskip(nbl1)
4717,4718c4613,4614
<                     call blocking_skip(kskip(nbl1,1) ,kskip(nbl2,1),
<      .                                 kskipt(nbl1,1),kskipt(nbl2,1))
---
>                      kskip(nbl1) = min(kskip(nbl1),kskip(nbl2))
>                      kskip(nbl2) = kskip(nbl1)
4721,4735c4617,4618
<                nskpdif = nskpdif + abs(iskip(nbl1,1) - iskipt(nbl1,1))
<                nskpdif = nskpdif + abs(iskip(nbl2,1) - iskipt(nbl2,1))
<                nskpdif = nskpdif + abs(jskip(nbl1,1) - jskipt(nbl1,1))
<                nskpdif = nskpdif + abs(jskip(nbl2,1) - jskipt(nbl2,1))
<                nskpdif = nskpdif + abs(kskip(nbl1,1) - kskipt(nbl1,1))
<                nskpdif = nskpdif + abs(kskip(nbl2,1) - kskipt(nbl2,1))
<                iskip(nbl1,1) = iskipt(nbl1,1)
<                iskip(nbl2,1) = iskipt(nbl2,1)
<                jskip(nbl1,1) = jskipt(nbl1,1)
<                jskip(nbl2,1) = jskipt(nbl2,1)
<                kskip(nbl1,1) = kskipt(nbl1,1)
<                kskip(nbl2,1) = kskipt(nbl2,1)
<             end do
<             if(nskpdif.eq.0) goto 850
<            end do
---
> c
>             end do 
4737d4619
< 850      continue
5188,5200d5069
< c        Set default skip type so that standard skip values are read:
< c
<          isktyp = 1
< c
< c        Set counter for number of control point updates to ensure
< c        1-1 blocking interface continuity:
< c
<          itcpadd = 0
< c
< c        If isktyp = 2 then an array of points in the i,j,k directions
< c        are read in.  These points are the control points rather than
< c        those computed using standard skip values
< c
5203,5204c5072
<          read(iunit5,*) nskip,isktyp,realval(1),realval(2),
<      .                  realval(3),realval(4),nsprgit 
---
>          read(iunit5,*) nskip,realval(1),nmastr,ismooth
5206,5208d5073
<          alpha1= realval(2)
<          beta2 = realval(3)
<          alpha2= realval(4)
5211,5224c5076,5080
<          write(iunit11,
<      .     '(''   nskip   isktyp    beta1   alpha1    beta2   alpha2'',
<      .                   '' nsprngit'')')
<          if(abs(isktyp).lt.1.or.abs(isktyp).gt.2) then
<            write(iunit11,'(i8,i9,4f9.6,i9)') nskip,isktyp,beta1,alpha1,
<      .          beta2,alpha2,nsprgit
<            write(iunit11,'('' input error: Invalid isktyp value'')')
<            call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<          end if
<          if(abs(isktyp).eq.1) then
<            if (nskip.gt.0) then
<               if (nskip.gt.ngrid) then
<                write(iunit11,'(i8,i9,4f9.6,i9)') nskip,isktyp,beta1,
<      .              alpha1,beta2,alpha2,nsprgit
---
>          write(iunit11,'(''   nskip    beta1  nmaster  ismooth'')')
>          if (nskip.gt.0) then
>             if (nskip.gt.ngrid) then
>                write(iunit11,'(i8,f9.6,2i9)') nskip,beta1,nmastr,
>      .              ismooth
5227,5338d5082
<               end if
<               write(iunit11,'(i8,i9,4f9.6,i9)') nskip,isktyp,
<      .             real(beta1),real(alpha1),real(beta2),real(alpha2),
<      .             nsprgit
<               if (real(beta1).lt.0.2) then
<                  write(iunit11,'(/,'' WARNING: beta this small may '',
<      .        ''severely compromise fidelity of surface geometry'',/)')
<               end if
<  
<               read(iunit5,*)
<               do ng = 1,nskip
<                  read(iunit5,*) igr,iskp,jskp,kskp
<                  nbl = nblg(igr)
<                  ncg = ncgg(igr)
< c                zero is shortcut for max skip value
<                  if (iskp.eq.0) then
<                     iskp = idimg(nbl)-1
<                  end if
<                  if (jskp.eq.0) then
<                     jskp = jdimg(nbl)-1
<                  end if
<                  if (kskp.eq.0) then
<                     kskp = kdimg(nbl)-1
<                  end if
<                  if (i2d.ne.0)  iskp = idimg(nbl)-1
< c                skip value must divide evenly into dim-1 value
<                  istop = 0
<                  if ((idimg(nbl)-1)/iskp*iskp.ne.(idimg(nbl)-1)) then
<                     istop = 1
<                     write(iunit11,'('' stopping...iskip must divide'',
<      .                  '' evenly into idim-1 for grid'',i4)') igr
<                  end if
<                  if ((jdimg(nbl)-1)/jskp*jskp.ne.(jdimg(nbl)-1)) then
<                     istop = 1
<                     write(iunit11,'('' stopping...jskip must divide'',
<      .                    '' evenly into jdim-1 for grid'',i4)') igr
<                  end if
<                  if ((kdimg(nbl)-1)/kskp*kskp.ne.(kdimg(nbl)-1)) then
<                     istop = 1
<                     write(iunit11,'('' stopping...kskip must divide'',
<      .                  '' evenly into kdim-1 for grid'',i4)') igr
<                  end if
<                  if (istop .eq. 1) then
<                     call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<                  end if
<                  iskip(nbl,1) = iskp
<                  jskip(nbl,1) = jskp
<                  kskip(nbl,1) = kskp
<               end do
<            else if (nskip.lt.0) then
<                write(iunit11,'(i8,i9,4f9.6,i9)') ngrid,isktyp,
<      .              real(beta1),real(alpha1),real(beta2),real(alpha2),
<      .              nsprgit
<               if (real(beta1).lt.0.2) then
<                  write(iunit11,'(/,'' WARNING: beta this small may '',
<      .        ''severely compromise fidelity of surface geometry'',/)')
<               end if
<               read(iunit5,*)
<               do ng = 1,abs(nskip)
<                  read(iunit5,*) igr,iskp0,jskp0,kskp0
<               end do
<               do igr=1,ngrid
<                  nbl = nblg(igr)
<                  ncg = ncgg(igr)
<                  iskp = iskp0
<                  jskp = jskp0
<                  kskp = kskp0
< c                zero is shortcut for max skip value
<                  if (iskp0.eq.0) iskp = idimg(nbl)-1
<                  if (jskp0.eq.0) jskp = jdimg(nbl)-1
<                  if (kskp0.eq.0) kskp = kdimg(nbl)-1
< c                skip value must divide evenly into dim-1 value
<                  istop = 0
<                  if ((idimg(nbl)-1)/iskp*iskp.ne.(idimg(nbl)-1)) then
<                     istop = 1
<                     write(iunit11,'('' stopping...iskip must divide'',
<      .                    '' evenly into idim-1 for grid'',i4)') igr
<                  end if
<                  if ((jdimg(nbl)-1)/jskp*jskp.ne.(jdimg(nbl)-1)) then
<                     istop = 1
<                     write(iunit11,'('' stopping...jskip must divide'',
<      .                    '' evenly into jdim-1 for grid'',i4)') igr
<                  end if
<                  if ((kdimg(nbl)-1)/kskp*kskp.ne.(kdimg(nbl)-1)) then
<                     istop = 1
<                     write(iunit11,'('' stopping...kskip must divide'',
<      .                    '' evenly into kdim-1 for grid'',i4)') igr
<                  end if
<                  if (istop .eq. 1) then
<                     call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<                  end if
<                  iskip(nbl,1) = iskp
<                  jskip(nbl,1) = jskp
<                  kskip(nbl,1) = kskp
<               end do
<            else
<                write(iunit11,'(i8,i9,4f9.6,i9)') ngrid,isktyp,
<      .              real(beta1),real(alpha1),real(beta2),real(alpha2),
<      .              nsprgit
<               if (real(beta1).lt.0.2) then
<                  write(iunit11,'(/,'' WARNING: beta this small may '',
<      .        ''severely compromise fidelity of surface geometry'',/)')
<               end if
<               read(iunit5,*)
<            end if
<          else
<             if (nskip.ne.ngrid.and.nskip.ne.0) then
<              write(iunit11,'(i8,i9,4f9.6,i9)') nskip,isktyp,beta1,
<      .              alpha1,beta2,alpha2,nsprgit
<              write(iunit11,'('' input error: nskip .ne. ngrid.'',
<      .        '' May mean improper isktyp value.'',/)')
<              call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
5340,5345c5084,5088
<             write(iunit11,'(i8,i9,4f9.6,i9)') ngrid,isktyp,
<      .              real(beta1),real(alpha1),real(beta2),real(alpha2),
<      .              nsprgit
<             if (real(beta1).lt.0.2) then
<                write(iunit11,'(/,'' WARNING: beta this small may '',
<      .      ''severely compromise fidelity of surface geometry'',/)')
---
>             write(iunit11,'(i8,f9.6,2i9)') ngrid,real(beta1),nmastr,
>      .            ismooth
>             if (real(beta1).lt.0.) then
>                write(iunit11,'(/,'' WARNING: beta<0 may severely '',
>      .         ''compromise fidelity of surface geometry'',/)')
5346a5090
> 
5348,5361c5092,5106
<             if(nskip.eq.ngrid) then
<              do ng = 1,nskip
<                read(iunit5,*)
<                read(iunit5,*) igr,nskpi1(ng),nskpj1(ng),nskpk1(ng)
<                if (igr.ne.ng) then
<                   write(iunit11,'(/,'' ERROR: control point input '',
<      .            ''must include all blocks, and be entered in '',/,
<      .            ''ascending block order'',/)')
<                   call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<                end if
<                if (nskpi1(ng).gt.500) then
<                   write(iunit11,'(/,'' ERROR: control point input '',
<      .            ''number of control points must be <= 500'',/)')
<                   call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
---
>             do ng = 1,nskip
>                read(iunit5,*) igr,iskp,jskp,kskp
>                nbl = nblg(igr)
>                ncg = ncgg(igr)
> c              zero is shortcut for max skip value 
>                if (iskp.eq.0) iskp = idimg(nbl)-1
>                if (jskp.eq.0) jskp = jdimg(nbl)-1
>                if (kskp.eq.0) kskp = kdimg(nbl)-1
>                if (i2d.ne.0)  iskp = idimg(nbl)-1
> c              skip value must divide evenly into dim-1 value
>                istop = 0
>                if ((idimg(nbl)-1)/iskp*iskp.ne.(idimg(nbl)-1)) then
>                   istop = 1
>                   write(iunit11,'('' stopping...iskip must divide'',
>      .                  '' evenly into idim-1 for grid'',i4)') igr
5363,5366c5108,5116
<                if (nskpj1(ng).gt.500) then
<                   write(iunit11,'(/,'' ERROR: control point input '',
<      .            ''number of control points must be <= 500'',/)')
<                   call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
---
>                if ((jdimg(nbl)-1)/jskp*jskp.ne.(jdimg(nbl)-1)) then
>                   istop = 1
>                   write(iunit11,'('' stopping...jskip must divide'',
>      .                  '' evenly into jdim-1 for grid'',i4)') igr
>                end if
>                if ((kdimg(nbl)-1)/kskp*kskp.ne.(kdimg(nbl)-1)) then
>                   istop = 1
>                   write(iunit11,'('' stopping...kskip must divide'',
>      .                  '' evenly into kdim-1 for grid'',i4)') igr
5368,5370c5118
<                if (nskpk1(ng).gt.500) then
<                   write(iunit11,'(/,'' ERROR: control point input '',
<      .            ''number of control points must be <= 500'',/)')
---
>                if (istop .eq. 1) then
5372a5121,5136
>                iskip(nbl) = iskp
>                jskip(nbl) = jskp
>                kskip(nbl) = kskp
>             end do
>          else if (nskip.lt.0) then
>             write(iunit11,'(i8,f9.6,2i9)') ngrid,real(beta1),nmastr,
>      .            ismooth
>             if (real(beta1).lt.0.) then
>                write(iunit11,'(/,'' WARNING: beta<0 may result in a '',
>      .         ''potentially significant loss of surface fidelity'',/)')
>             end if
>             read(iunit5,*)
>             do ng = 1,abs(nskip)
>                read(iunit5,*) igr,iskp0,jskp0,kskp0
>             end do
>             do igr=1,ngrid
5375,5421c5139,5151
<                read(iunit5,*)
<                iis = -9
<                iie =  0
<                do jj = 1,50
<                  iis = iis + 10
<                  iie = iie + 10
<                  if(iie.gt.nskpi1(ng)) iie = nskpi1(ng)
<                  read(iunit5,*) (iskip(nbl,ii),ii=iis,iie)
<                  if(iie.eq.nskpi1(ng)) goto 325
<                enddo
< 325            continue
<                read(iunit5,*)
<                iis = -9
<                iie =  0
<                do jj = 1,50
<                  iis = iis + 10
<                  iie = iie + 10
<                  if(iie.gt.nskpj1(ng)) iie = nskpj1(ng)
<                  read(iunit5,*) (jskip(nbl,ii),ii=iis,iie)
<                  if(iie.eq.nskpj1(ng)) goto 350
<                enddo
< 350            continue
<                read(iunit5,*)
<                iis = -9
<                iie =  0
<                do jj = 1,50
<                  iis = iis + 10
<                  iie = iie + 10
<                  if(iie.gt.nskpk1(ng)) iie = nskpk1(ng)
<                  read(iunit5,*) (kskip(nbl,ii),ii=iis,iie)
<                  if(iie.eq.nskpk1(ng)) goto 375
<                enddo
< 375            continue
<                jdim   = jdimg(nbl)
<                kdim   = kdimg(nbl)
<                idim   = idimg(nbl)
<                if(iskip(nbl,nskpi1(ng)).ne.idim) then
<                write(iunit11,'(/,'' STOPPING: ic(iskip) ne idim'',/)')
<                   stop
<                end if
<                if(jskip(nbl,nskpj1(ng)).ne.jdim) then
<                write(iunit11,'(/,'' STOPPING: ic(jskip) ne jdim'',/)')
<                   stop
<                end if
<                if(kskip(nbl,nskpk1(ng)).ne.kdim) then
<                write(iunit11,'(/,'' STOPPING: ic(kskip) ne kdim'',/)')
<                   stop
---
>                iskp = iskp0
>                jskp = jskp0
>                kskp = kskp0
> c              zero is shortcut for max skip value
>                if (iskp0.eq.0) iskp = idimg(nbl)-1
>                if (jskp0.eq.0) jskp = jdimg(nbl)-1
>                if (kskp0.eq.0) kskp = kdimg(nbl)-1
> c              skip value must divide evenly into dim-1 value
>                istop = 0
>                if ((idimg(nbl)-1)/iskp*iskp.ne.(idimg(nbl)-1)) then
>                   istop = 1
>                   write(iunit11,'('' stopping...iskip must divide'',
>      .                  '' evenly into idim-1 for grid'',i4)') igr
5423,5845c5153,5175
<                do jj = 1,nskpi1(ng)
<                  iskipt(nbl,jj) = iskip(nbl,jj)
<                enddo
<                do jj = 1,nskpj1(ng)
<                  jskipt(nbl,jj) = jskip(nbl,jj)
<                enddo
<                do jj = 1,nskpk1(ng)
<                  kskipt(nbl,jj) = kskip(nbl,jj)
<                enddo
<              enddo
<             end if
<             if(nskip.eq.0) then 
<              do ng = 1,ngrid    
<                nbl          = nblg(ng)
<                ncg          = ncgg(ng)
<                jdim   = jdimg(nbl)
<                kdim   = kdimg(nbl)
<                idim   = idimg(nbl)
<                nskpi1(ng)   = 2
<                nskpj1(ng)   = 2
<                nskpk1(ng)   = 2
<                iskip(nbl,1) = 1
<                iskip(nbl,2) = idim 
<                jskip(nbl,1) = 1
<                jskip(nbl,2) = jdim 
<                kskip(nbl,1) = 1
<                kskip(nbl,2) = kdim 
<              enddo  
<              do n = 1,abs(nbli)
<                do ii = 1,2
<                 nbl    = nblg(nblk(ii,n))
<                 jdim   = jdimg(nbl)
<                 kdim   = kdimg(nbl)
<                 idim   = idimg(nbl)
<                 do jj = 1,2
<                  if(isva(ii,jj,n).eq.1) then
<                    if(limblk(ii,1,n).gt.1.and.limblk(ii,1,n).lt.idim)
<      .                call skordr(nbl,nskpi1(nblk(ii,n)),
<      .                            limblk(ii,1,n),iskip,maxbl) 
<                    if(limblk(ii,4,n).gt.1.and.limblk(ii,4,n).lt.idim)
<      .                call skordr(nbl,nskpi1(nblk(ii,n)),
<      .                            limblk(ii,4,n),iskip,maxbl) 
<                  else if(isva(ii,jj,n).eq.2) then
<                    if(limblk(ii,2,n).gt.1.and.limblk(ii,2,n).lt.jdim)
<      .                call skordr(nbl,nskpj1(nblk(ii,n)),
<      .                            limblk(ii,2,n),jskip,maxbl) 
<                    if(limblk(ii,5,n).gt.1.and.limblk(ii,5,n).lt.jdim)
<      .                call skordr(nbl,nskpj1(nblk(ii,n)),
<      .                              limblk(ii,5,n),jskip,maxbl) 
<                  else if(isva(ii,jj,n).eq.3) then
<                    if(limblk(ii,3,n).gt.1.and.limblk(ii,3,n).lt.kdim)
<      .                call skordr(nbl,nskpk1(nblk(ii,n)),
<      .                            limblk(ii,3,n),kskip,maxbl) 
<                    if(limblk(ii,6,n).gt.1.and.limblk(ii,6,n).lt.kdim)
<      .                call skordr(nbl,nskpk1(nblk(ii,n)),
<      .                            limblk(ii,6,n),kskip,maxbl) 
<                  end if
<                 enddo
<                enddo
<              enddo
<              do n=1,ngrid
<                nbl = nblg(n)
<                jdim   = jdimg(nbl)
<                kdim   = kdimg(nbl)
<                idim   = idimg(nbl)
< c
<                do iseg = 1,nsegdfrm(nbl)
< c
< c icsi surface boundary
< c
<                  if(icsi(nbl,iseg).gt.1.and.icsi(nbl,iseg).lt.idim) 
<      .              then 
<                   call skordr(nbl,nskpi1(n),icsi(nbl,iseg)
<      .                        ,iskip,maxbl) 
< c
< c          Check J0 boundary
< c
<                   if(jcsi(nbl,iseg).eq.jcsf(nbl,iseg).and.
<      .               jcsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,2,3,1,maxbl,maxsegdg,maxseg,
<      .                          iskip,nskpi1,jbcinfo,nbcj0,icsi) 
<                   end if
< c
< c          Check JDIM boundary
< c
<                   if(jcsi(nbl,iseg).eq.jcsf(nbl,iseg).and.
<      .               jcsi(nbl,iseg).eq.jdim) then
<                     call bndchk(n,nbl,iseg,2,3,2,maxbl,maxsegdg,maxseg,
<      .                          iskip,nskpi1,jbcinfo,nbcjdim,icsi) 
<                   end if
< c
< c          Check K0 boundary
< c
<                   if(kcsi(nbl,iseg).eq.kcsf(nbl,iseg).and.
<      .               kcsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,2,3,1,maxbl,maxsegdg,maxseg,
<      .                          iskip,nskpi1,kbcinfo,nbck0,icsi) 
<                   end if
< c
< c          Check KDIM boundary
< c
<                   if(kcsi(nbl,iseg).eq.kcsf(nbl,iseg).and.
<      .               kcsi(nbl,iseg).eq.kdim) then
<                     call bndchk(n,nbl,iseg,2,3,2,maxbl,maxsegdg,maxseg,
<      .                          iskip,nskpi1,kbcinfo,nbckdim,icsi) 
<                   end if
<                  end if
< c
< c icsf surface boundary
< c
<                  if(icsf(nbl,iseg).gt.1.and.icsf(nbl,iseg).lt.idim)
<      .              then 
<                   call skordr(nbl,nskpi1(n),icsf(nbl,iseg)
<      .                        ,iskip,maxbl) 
< c
< c          Check J0 boundary
< c
<                   if(jcsi(nbl,iseg).eq.jcsf(nbl,iseg).and.
<      .               jcsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,2,3,1,maxbl,maxsegdg,maxseg,
<      .                          iskip,nskpi1,jbcinfo,nbcj0,icsf) 
<                   end if
< c
< c          Check JDIM boundary
< c
<                   if(jcsi(nbl,iseg).eq.jcsf(nbl,iseg).and.
<      .               jcsi(nbl,iseg).eq.jdim) then
<                     call bndchk(n,nbl,iseg,2,3,2,maxbl,maxsegdg,maxseg,
<      .                          iskip,nskpi1,jbcinfo,nbcjdim,icsf) 
<                   end if
< c
< c          Check K0 boundary
< c
<                   if(kcsi(nbl,iseg).eq.kcsf(nbl,iseg).and.
<      .               kcsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,2,3,1,maxbl,maxsegdg,maxseg,
<      .                          iskip,nskpi1,kbcinfo,nbck0,icsf) 
<                   end if
< c
< c          Check KDIM boundary
< c
<                   if(kcsi(nbl,iseg).eq.kcsf(nbl,iseg).and.
<      .               kcsi(nbl,iseg).eq.kdim) then
<                     call bndchk(n,nbl,iseg,2,3,2,maxbl,maxsegdg,maxseg,
<      .                          iskip,nskpi1,kbcinfo,nbckdim,icsf) 
<                   end if
<                  end if
< c
< c jcsi surface boundary
< c
<                  if(jcsi(nbl,iseg).gt.1.and.jcsi(nbl,iseg).lt.jdim)
<      .              then 
<                   call skordr(nbl,nskpj1(n),jcsi(nbl,iseg)
<      .                        ,jskip,maxbl) 
< c
< c          Check K0 boundary
< c
<                   if(kcsi(nbl,iseg).eq.kcsf(nbl,iseg).and.
<      .               kcsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,4,5,1,maxbl,maxsegdg,maxseg,
<      .                          jskip,nskpj1,kbcinfo,nbck0,jcsi) 
<                   end if
< c
< c          Check KDIM boundary
< c
<                   if(kcsi(nbl,iseg).eq.kcsf(nbl,iseg).and.
<      .               kcsi(nbl,iseg).eq.kdim) then
<                     call bndchk(n,nbl,iseg,4,5,2,maxbl,maxsegdg,maxseg,
<      .                          jskip,nskpj1,kbcinfo,nbckdim,jcsi) 
<                   end if
< c
< c          Check I0 boundary
< c
<                   if(icsi(nbl,iseg).eq.icsf(nbl,iseg).and.
<      .               icsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,2,3,1,maxbl,maxsegdg,maxseg,
<      .                          jskip,nskpj1,ibcinfo,nbci0,jcsi) 
<                   end if
< c
< c          Check IDIM boundary
< c
<                   if(icsi(nbl,iseg).eq.icsf(nbl,iseg).and.
<      .               icsi(nbl,iseg).eq.idim) then
<                     call bndchk(n,nbl,iseg,2,3,2,maxbl,maxsegdg,maxseg,
<      .                          jskip,nskpj1,ibcinfo,nbcidim,jcsi) 
<                   end if
<                  end if
< c
< c jcsf surface boundary
< c
<                  if(jcsf(nbl,iseg).gt.1.and.jcsf(nbl,iseg).lt.jdim)
<      .              then 
<                   call skordr(nbl,nskpj1(n),jcsf(nbl,iseg)
<      .                        ,jskip,maxbl) 
< c
< c          Check K0 boundary
< c
<                   if(kcsi(nbl,iseg).eq.kcsf(nbl,iseg).and.
<      .               kcsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,4,5,1,maxbl,maxsegdg,maxseg,
<      .                          jskip,nskpj1,kbcinfo,nbck0,jcsf) 
<                   end if
< c
< c          Check KDIM boundary
< c
<                   if(kcsi(nbl,iseg).eq.kcsf(nbl,iseg).and.
<      .               kcsi(nbl,iseg).eq.kdim) then
<                     call bndchk(n,nbl,iseg,4,5,2,maxbl,maxsegdg,maxseg,
<      .                          jskip,nskpj1,kbcinfo,nbckdim,jcsf) 
<                   end if
< c
< c          Check I0 boundary
< c
<                   if(icsi(nbl,iseg).eq.icsf(nbl,iseg).and.
<      .               icsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,2,3,1,maxbl,maxsegdg,maxseg,
<      .                          jskip,nskpj1,ibcinfo,nbci0,jcsf) 
<                   end if
< c
< c          Check IDIM boundary
< c
<                   if(icsi(nbl,iseg).eq.icsf(nbl,iseg).and.
<      .               icsi(nbl,iseg).eq.idim) then
<                     call bndchk(n,nbl,iseg,2,3,2,maxbl,maxsegdg,maxseg,
<      .                          jskip,nskpj1,ibcinfo,nbcidim,jcsf) 
<                   end if
<                  end if
< c
< c kcsi surface boundary
< c
<                  if(kcsi(nbl,iseg).gt.1.and.kcsi(nbl,iseg).lt.kdim)
<      .              then 
<                   call skordr(nbl,nskpk1(n),kcsi(nbl,iseg)
<      .                        ,kskip,maxbl) 
< c
< c          Check I0 boundary
< c
<                   if(icsi(nbl,iseg).eq.icsf(nbl,iseg).and.
<      .               icsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,4,5,1,maxbl,maxsegdg,maxseg,
<      .                          kskip,nskpk1,ibcinfo,nbci0,kcsi) 
<                   end if
< c
< c          Check IDIM boundary
< c
<                   if(icsi(nbl,iseg).eq.icsf(nbl,iseg).and.
<      .               icsi(nbl,iseg).eq.idim) then
<                     call bndchk(n,nbl,iseg,4,5,2,maxbl,maxsegdg,maxseg,
<      .                          kskip,nskpk1,ibcinfo,nbcidim,kcsi) 
<                   end if
< c
< c          Check J0 boundary
< c
<                   if(jcsi(nbl,iseg).eq.jcsf(nbl,iseg).and.
<      .               jcsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,4,5,1,maxbl,maxsegdg,maxseg,
<      .                          kskip,nskpk1,jbcinfo,nbcj0,kcsi) 
<                   end if
< c
< c          Check JDIM boundary
< c
<                   if(jcsi(nbl,iseg).eq.jcsf(nbl,iseg).and.
<      .               jcsi(nbl,iseg).eq.jdim) then
<                     call bndchk(n,nbl,iseg,4,5,2,maxbl,maxsegdg,maxseg,
<      .                          kskip,nskpk1,jbcinfo,nbcjdim,kcsi) 
<                   end if
<                  end if
< c
< c kcsf surface boundary
< c
<                  if(kcsf(nbl,iseg).gt.1.and.kcsf(nbl,iseg).lt.kdim)
<      .              then 
<                   call skordr(nbl,nskpk1(n),kcsf(nbl,iseg)
<      .                        ,kskip,maxbl) 
< c
< c          Check I0 boundary
< c
<                   if(icsi(nbl,iseg).eq.icsf(nbl,iseg).and.
<      .               icsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,4,5,1,maxbl,maxsegdg,maxseg,
<      .                          kskip,nskpk1,ibcinfo,nbci0,kcsf) 
<                   end if
< c
< c          Check IDIM boundary
< c
<                   if(icsi(nbl,iseg).eq.icsf(nbl,iseg).and.
<      .               icsi(nbl,iseg).eq.idim) then
<                     call bndchk(n,nbl,iseg,4,5,2,maxbl,maxsegdg,maxseg,
<      .                          kskip,nskpk1,ibcinfo,nbcidim,kcsf) 
<                   end if
< c
< c          Check J0 boundary
< c
<                   if(jcsi(nbl,iseg).eq.jcsf(nbl,iseg).and.
<      .               jcsi(nbl,iseg).eq.1) then
<                     call bndchk(n,nbl,iseg,4,5,1,maxbl,maxsegdg,maxseg,
<      .                          kskip,nskpk1,jbcinfo,nbcj0,kcsf) 
<                   end if
< c
< c          Check JDIM boundary
< c
<                   if(jcsi(nbl,iseg).eq.jcsf(nbl,iseg).and.
<      .               jcsi(nbl,iseg).eq.jdim) then
<                     call bndchk(n,nbl,iseg,4,5,2,maxbl,maxsegdg,maxseg,
<      .                          kskip,nskpk1,jbcinfo,nbcjdim,kcsf) 
<                   end if
<                  end if
<                enddo
<              enddo
<              do n = 1,ngrid
<                nbl = nblg(n)
<                jdim   = jdimg(nbl)
<                kdim   = kdimg(nbl)
<                idim   = idimg(nbl)
<                do iseg=1,nbci0(nbl)
<                  if   (ibcinfo(nbl,iseg,2,1).gt.1.
<      .             and.ibcinfo(nbl,iseg,2,1).lt.jdim) 
<      .             call skordr(nbl,nskpj1(n),ibcinfo(nbl,iseg,2,1)
<      .                        ,jskip,maxbl) 
<                  if   (ibcinfo(nbl,iseg,3,1).gt.1.
<      .             and.ibcinfo(nbl,iseg,3,1).lt.jdim) 
<      .             call skordr(nbl,nskpj1(n),ibcinfo(nbl,iseg,3,1)
<      .                        ,jskip,maxbl) 
<                  if   (ibcinfo(nbl,iseg,4,1).gt.1.
<      .             and.ibcinfo(nbl,iseg,4,1).lt.kdim) 
<      .             call skordr(nbl,nskpk1(n),ibcinfo(nbl,iseg,4,1)
<      .                        ,kskip,maxbl) 
<                  if   (ibcinfo(nbl,iseg,5,1).gt.1.
<      .             and.ibcinfo(nbl,iseg,5,1).lt.kdim) 
<      .             call skordr(nbl,nskpk1(n),ibcinfo(nbl,iseg,5,1)
<      .                        ,kskip,maxbl) 
<                enddo
<                do iseg=1,nbcidim(nbl)
<                  if   (ibcinfo(nbl,iseg,2,2).gt.1.
<      .             and.ibcinfo(nbl,iseg,2,2).lt.jdim) 
<      .             call skordr(nbl,nskpj1(n),ibcinfo(nbl,iseg,2,2)
<      .                        ,jskip,maxbl) 
<                  if   (ibcinfo(nbl,iseg,3,2).gt.1.
<      .             and.ibcinfo(nbl,iseg,3,2).lt.jdim) 
<      .             call skordr(nbl,nskpj1(n),ibcinfo(nbl,iseg,3,2)
<      .                        ,jskip,maxbl) 
<                  if   (ibcinfo(nbl,iseg,4,2).gt.1.
<      .             and.ibcinfo(nbl,iseg,4,2).lt.kdim) 
<      .             call skordr(nbl,nskpk1(n),ibcinfo(nbl,iseg,4,2)
<      .                        ,kskip,maxbl) 
<                  if   (ibcinfo(nbl,iseg,5,2).gt.1.
<      .             and.ibcinfo(nbl,iseg,5,2).lt.kdim) 
<      .             call skordr(nbl,nskpk1(n),ibcinfo(nbl,iseg,5,2)
<      .                        ,kskip,maxbl) 
<                enddo
<                do iseg=1,nbcj0(nbl)
<                  if   (jbcinfo(nbl,iseg,2,1).gt.1.
<      .             and.jbcinfo(nbl,iseg,2,1).lt.idim) 
<      .             call skordr(nbl,nskpi1(n),jbcinfo(nbl,iseg,2,1)
<      .                        ,iskip,maxbl) 
<                  if   (jbcinfo(nbl,iseg,3,1).gt.1.
<      .             and.jbcinfo(nbl,iseg,3,1).lt.idim) 
<      .             call skordr(nbl,nskpi1(n),jbcinfo(nbl,iseg,3,1)
<      .                        ,iskip,maxbl) 
<                  if   (jbcinfo(nbl,iseg,4,1).gt.1.
<      .             and.jbcinfo(nbl,iseg,4,1).lt.kdim) 
<      .             call skordr(nbl,nskpk1(n),jbcinfo(nbl,iseg,4,1)
<      .                        ,kskip,maxbl) 
<                  if   (jbcinfo(nbl,iseg,5,1).gt.1.
<      .             and.jbcinfo(nbl,iseg,5,1).lt.kdim) 
<      .             call skordr(nbl,nskpk1(n),jbcinfo(nbl,iseg,5,1)
<      .                        ,kskip,maxbl) 
<                enddo
<                do iseg=1,nbcjdim(nbl)
<                  if   (jbcinfo(nbl,iseg,2,2).gt.1.
<      .             and.jbcinfo(nbl,iseg,2,2).lt.idim) 
<      .             call skordr(nbl,nskpi1(n),jbcinfo(nbl,iseg,2,2)
<      .                        ,iskip,maxbl) 
<                  if   (jbcinfo(nbl,iseg,3,2).gt.1.
<      .             and.jbcinfo(nbl,iseg,3,2).lt.idim) 
<      .             call skordr(nbl,nskpi1(n),jbcinfo(nbl,iseg,3,2)
<      .                        ,iskip,maxbl) 
<                  if   (jbcinfo(nbl,iseg,4,2).gt.1.
<      .             and.jbcinfo(nbl,iseg,4,2).lt.kdim) 
<      .             call skordr(nbl,nskpk1(n),jbcinfo(nbl,iseg,4,2)
<      .                        ,kskip,maxbl) 
<                  if   (jbcinfo(nbl,iseg,5,2).gt.1.
<      .             and.jbcinfo(nbl,iseg,5,2).lt.kdim) 
<      .             call skordr(nbl,nskpk1(n),jbcinfo(nbl,iseg,5,2)
<      .                        ,kskip,maxbl) 
<                enddo
<                do iseg=1,nbck0(nbl)
<                  if   (kbcinfo(nbl,iseg,2,1).gt.1.
<      .             and.kbcinfo(nbl,iseg,2,1).lt.idim) 
<      .             call skordr(nbl,nskpi1(n),kbcinfo(nbl,iseg,2,1)
<      .                        ,iskip,maxbl) 
<                  if   (kbcinfo(nbl,iseg,3,1).gt.1.
<      .             and.kbcinfo(nbl,iseg,3,1).lt.idim) 
<      .             call skordr(nbl,nskpi1(n),kbcinfo(nbl,iseg,3,1)
<      .                        ,iskip,maxbl) 
<                  if   (kbcinfo(nbl,iseg,4,1).gt.1.
<      .             and.kbcinfo(nbl,iseg,4,1).lt.jdim) 
<      .             call skordr(nbl,nskpj1(n),kbcinfo(nbl,iseg,4,1)
<      .                        ,jskip,maxbl) 
<                  if   (kbcinfo(nbl,iseg,5,1).gt.1.
<      .             and.kbcinfo(nbl,iseg,5,1).lt.jdim) 
<      .             call skordr(nbl,nskpj1(n),kbcinfo(nbl,iseg,5,1)
<      .                        ,jskip,maxbl) 
<                enddo
<                do iseg=1,nbckdim(nbl)
<                  if   (kbcinfo(nbl,iseg,2,2).gt.1.
<      .             and.kbcinfo(nbl,iseg,2,2).lt.idim) 
<      .             call skordr(nbl,nskpi1(n),kbcinfo(nbl,iseg,2,2)
<      .                        ,iskip,maxbl) 
<                  if   (kbcinfo(nbl,iseg,3,2).gt.1.
<      .             and.kbcinfo(nbl,iseg,3,2).lt.idim) 
<      .             call skordr(nbl,nskpi1(n),kbcinfo(nbl,iseg,3,2)
<      .                        ,iskip,maxbl) 
<                  if   (kbcinfo(nbl,iseg,4,2).gt.1.
<      .             and.kbcinfo(nbl,iseg,4,2).lt.jdim) 
<      .             call skordr(nbl,nskpj1(n),kbcinfo(nbl,iseg,4,2)
<      .                        ,jskip,maxbl) 
<                  if   (kbcinfo(nbl,iseg,5,2).gt.1.
<      .             and.kbcinfo(nbl,iseg,5,2).lt.jdim) 
<      .             call skordr(nbl,nskpj1(n),kbcinfo(nbl,iseg,5,2)
<      .                        ,jskip,maxbl) 
<                enddo
<              enddo
---
>                if ((jdimg(nbl)-1)/jskp*jskp.ne.(jdimg(nbl)-1)) then
>                   istop = 1
>                   write(iunit11,'('' stopping...jskip must divide'',
>      .                  '' evenly into jdim-1 for grid'',i4)') igr
>                end if
>                if ((kdimg(nbl)-1)/kskp*kskp.ne.(kdimg(nbl)-1)) then
>                   istop = 1
>                   write(iunit11,'('' stopping...kskip must divide'',
>      .                  '' evenly into kdim-1 for grid'',i4)') igr
>                end if
>                if (istop .eq. 1) then
>                   call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
>                end if
>                iskip(nbl) = iskp
>                jskip(nbl) = jskp
>                kskip(nbl) = kskp
>             end do
>          else
>             write(iunit11,'(i8,f9.6,2i9)') ngrid,real(beta1),nmastr,
>      .                                     ismooth
>             if (real(beta1).lt.0.) then
>                write(iunit11,'(/,'' WARNING: beta<0 may result in a '',
>      .         ''potentially significant loss of surface fidelity'',/)')
5847,5946c5177
<             do iter = 1,ngrid
<               nskpsmo = 0
<               nskpsmn = 0
<               itcpadd = itcpadd + 1
<               do n = 1,ngrid
<                 nskpsmo = nskpsmo+nskpi1(n)+nskpj1(n)+nskpk1(n) 
<               enddo
<               do n = 1,abs(nbli)
<                nbl1   = nblg(nblk(1,n))
<                jdim1  = jdimg(nbl1)
<                kdim1  = kdimg(nbl1)
<                idim1  = idimg(nbl1)
<                nbl2   = nblg(nblk(2,n))
<                jdim2  = jdimg(nbl2)
<                kdim2  = kdimg(nbl2)
<                idim2  = idimg(nbl2) 
<                do jj = 1,2    
<                 if(isva(1,jj,n).eq.1.and.isva(2,jj,n).eq.1) then 
<                   call cpadd(nbl1,nbl2,nblk(1,n),nblk(2,n),
<      .                       limblk(1,1,n),limblk(1,4,n),limblk(2,1,n),
<      .                       limblk(2,4,n),nskpi1(nblk(1,n)),
<      .                       iskip(nbl1,1:500),nskpi1(nblk(2,n)), 
<      .                       iskip(nbl2,1:500),maxbl,idim1,idim2,1,1)
<                 else          
<      .          if(isva(1,jj,n).eq.1.and.isva(2,jj,n).eq.2) then 
<                   call cpadd(nbl1,nbl2,nblk(1,n),nblk(2,n),
<      .                       limblk(1,1,n),limblk(1,4,n),limblk(2,2,n),
<      .                       limblk(2,5,n),nskpi1(nblk(1,n)),
<      .                       iskip(nbl1,1:500),nskpj1(nblk(2,n)), 
<      .                       jskip(nbl2,1:500),maxbl,idim1,jdim2,1,2)
<                 else          
<      .          if(isva(1,jj,n).eq.2.and.isva(2,jj,n).eq.1) then 
<                   call cpadd(nbl1,nbl2,nblk(1,n),nblk(2,n),
<      .                       limblk(1,2,n),limblk(1,5,n),limblk(2,1,n),
<      .                       limblk(2,4,n),nskpj1(nblk(1,n)),
<      .                       jskip(nbl1,1:500),nskpi1(nblk(2,n)),
<      .                       iskip(nbl2,1:500),maxbl,jdim1,idim2,2,1)
<                 else
<      .          if(isva(1,jj,n).eq.2.and.isva(2,jj,n).eq.2) then
<                   call cpadd(nbl1,nbl2,nblk(1,n),nblk(2,n),
<      .                       limblk(1,2,n),limblk(1,5,n),limblk(2,2,n),
<      .                       limblk(2,5,n),nskpj1(nblk(1,n)),
<      .                       jskip(nbl1,1:500),nskpj1(nblk(2,n)),
<      .                       jskip(nbl2,1:500),maxbl,jdim1,jdim2,2,2)
<                 else
<      .          if(isva(1,jj,n).eq.3.and.isva(2,jj,n).eq.2) then
<                   call cpadd(nbl1,nbl2,nblk(1,n),nblk(2,n),
<      .                       limblk(1,3,n),limblk(1,6,n),limblk(2,2,n),
<      .                       limblk(2,5,n),nskpk1(nblk(1,n)),
<      .                       kskip(nbl1,1:500),nskpj1(nblk(2,n)),
<      .                       jskip(nbl2,1:500),maxbl,kdim1,jdim2,3,2)
<                 else
<      .          if(isva(1,jj,n).eq.2.and.isva(2,jj,n).eq.3) then
<                   call cpadd(nbl1,nbl2,nblk(1,n),nblk(2,n),
<      .                       limblk(1,2,n),limblk(1,5,n),limblk(2,3,n),
<      .                       limblk(2,6,n),nskpj1(nblk(1,n)),
<      .                       jskip(nbl1,1:500),nskpk1(nblk(2,n)),
<      .                       kskip(nbl2,1:500),maxbl,jdim1,kdim2,2,3)
<                 else
<      .          if(isva(1,jj,n).eq.3.and.isva(2,jj,n).eq.3) then
<                   call cpadd(nbl1,nbl2,nblk(1,n),nblk(2,n),
<      .                       limblk(1,3,n),limblk(1,6,n),limblk(2,3,n),
<      .                       limblk(2,6,n),nskpk1(nblk(1,n)),
<      .                       kskip(nbl1,1:500),nskpk1(nblk(2,n)),
<      .                       kskip(nbl2,1:500),maxbl,kdim1,kdim2,3,3)
<                 else
<      .          if(isva(1,jj,n).eq.3.and.isva(2,jj,n).eq.1) then
<                   call cpadd(nbl1,nbl2,nblk(1,n),nblk(2,n),
<      .                       limblk(1,3,n),limblk(1,6,n),limblk(2,1,n),
<      .                       limblk(2,4,n),nskpk1(nblk(1,n)),
<      .                       kskip(nbl1,1:500),nskpi1(nblk(2,n)),
<      .                       iskip(nbl2,1:500),maxbl,kdim1,idim2,3,1)
<                 else
<      .          if(isva(1,jj,n).eq.1.and.isva(2,jj,n).eq.3) then
<                   call cpadd(nbl1,nbl2,nblk(1,n),nblk(2,n),
<      .                       limblk(1,1,n),limblk(1,4,n),limblk(2,3,n),
<      .                       limblk(2,6,n),nskpi1(nblk(1,n)),
<      .                       iskip(nbl1,1:500),nskpk1(nblk(2,n)),
<      .                       kskip(nbl2,1:500),maxbl,idim1,kdim2,1,3)
<                 end if
<                enddo
<               enddo
<               do n = 1,ngrid
<                 nskpsmn = nskpsmn+nskpi1(n)+nskpj1(n)+nskpk1(n) 
<               enddo
<               if(nskpsmn.eq.nskpsmo) goto 378
<             enddo
< 378         continue 
<             do n = 1,ngrid    
<               nbl   = nblg(n)
<               do jj = 1,nskpi1(n)
<                 iskipt(nbl,jj) = iskip(nbl,jj)
<               enddo
<               do jj = 1,nskpj1(n)
<                 jskipt(nbl,jj) = jskip(nbl,jj)
<               enddo
<               do jj = 1,nskpk1(n)
<                 kskipt(nbl,jj) = kskip(nbl,jj)
<               enddo
<             enddo
---
>             read(iunit5,*)
5949,6087c5180
<          if(abs(isktyp).eq.1) then
<            write(iunit11,'(''    grid    iskip    jskip    kskip'')')
<            do ng=1,ngrid
<              nbl = nblg(ng)
<              ncg = ncgg(ng)
<              write(iunit11,'(i8,6i9)') ng,iskip(nbl,1),jskip(nbl,1),
<      .                                  kskip(nbl,1)
<              if (ncg.gt.0) then
<                 do n=1,ncg
<                    nbl = nbl + 1
<                    iskip(nbl,1) = (iskip(nbl-1,1)-1)/2 + 1
<                    jskip(nbl,1) = (jskip(nbl-1,1)-1)/2 + 1
<                    kskip(nbl,1) = (kskip(nbl-1,1)-1)/2 + 1
<                 end do
<                 nbl = nblg(ng)
<              end if
<              ncgt = ncg
<              if(i2d.ne.0) then
<                nskpi1(ng) = 2
<              else
<                nskpi1(ng) = (idimg(nbl)-1)/iskip(nbl,1) + 1
<              end if
<              nskpj1(ng) = (jdimg(nbl)-1)/jskip(nbl,1) + 1
<              nskpk1(ng) = (kdimg(nbl)-1)/kskip(nbl,1) + 1
<              iskipt(nbl,1) = 1
<              jskipt(nbl,1) = 1
<              kskipt(nbl,1) = 1
<              if (nskpi1(ng).gt.500) then
<                 write(iunit11,'(/,'' ERROR: nskpi1 > 500 '',
<      .          '' Too many i-control points (iskip too small)'',/)')
<                 call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<              end if
<              if (nskpj1(ng).gt.500) then
<                 write(iunit11,'(/,'' ERROR: nskpj1 > 500 '',
<      .          '' Too many j-control points (jskip too small)'',/)')
<                 call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<              end if
<              if (nskpk1(ng).gt.500) then
<                 write(iunit11,'(/,'' ERROR: nskpk1 > 500 '',
<      .          '' Too many k-control points (kskip too small)'',/)')
<                 call termn8(myid,ierrflg,ibufdim,nbuf,bou,nou)
<              end if
<              do jj = 2,nskpi1(ng)
<                iskipt(nbl,jj) = iskipt(nbl,jj-1)+iskip(nbl,1)
<              enddo
<              do jj = 2,nskpj1(ng)
<                jskipt(nbl,jj) = jskipt(nbl,jj-1)+jskip(nbl,1)
<              enddo
<              do jj = 2,nskpk1(ng)
<                kskipt(nbl,jj) = kskipt(nbl,jj-1)+kskip(nbl,1)
<              enddo
<            enddo
<          else
<            do ng=1,nskip
<               nbl = nblg(ng)
<               ncg = ncgg(ng)
<               if (ncg.gt.0) then
<                 do ii = 1,nskpi1(ng)
<                  nbl = nblg(ng)
<                  iskipt(nbl,ii)= iskip(nbl,ii)
<                  do n=1,ncg
<                     nbl = nbl + 1
<                     iskip(nbl,ii) = (iskip(nbl-1,ii)-1)/2 + 1
<                  end do
<                 enddo
<                 do ii = 1,nskpj1(ng)
<                  nbl = nblg(ng)
<                  jskipt(nbl,ii)= jskip(nbl,ii)
<                  do n=1,ncg
<                     nbl = nbl + 1
<                     jskip(nbl,ii) = (jskip(nbl-1,ii)-1)/2 + 1
<                  end do
<                 enddo
<                 do ii = 1,nskpk1(ng)
<                  nbl = nblg(ng)
<                  jskipt(nbl,ii)= jskip(nbl,ii)
<                  do n=1,ncg
<                     nbl = nbl + 1
<                     kskip(nbl,ii) = (kskip(nbl-1,ii)-1)/2 + 1
<                  end do
<                 enddo
<               end if
<            enddo
<          end if
<          if(abs(isktyp).eq.1.or.(abs(isktyp).eq.2.and.nskip.eq.0)
<      .     .or.(itcpadd.gt.1)) then
<           if(meshdef.eq.1.and.myid.eq.myhost) then
<            open(196,file='meshdef.inp',status='unknown',form=
<      .             'formatted')
<            do ng=1,ngrid
<              nbl = nblg(ng)
<              ncg = ncgg(ng)
<              write(196,19019)
< 19019        format('   GRID   NIND   NJND   NKND ')
<              write(196,19020) ng,nskpi1(ng),nskpj1(ng),nskpk1(ng)
< 19020        format(10i7)
<              write(196,19018)
< 19018        format('************************** I NODE INDICES ******'
<      .             ,'**********************')
<              iis = -9
<              iie =  0
<              do jj = 1,50
<                iis = iis + 10
<                iie = iie + 10
<                if(iie.gt.nskpi1(ng)) iie = nskpi1(ng)
<                write(196,19020) (iskipt(nbl,ii),ii=iis,iie)
<                if(iie.eq.nskpi1(ng)) goto 525
<              enddo
< 525          continue
<              write(196,19017)
< 19017        format('************************** J NODE INDICES ******'
<      .             ,'**********************')
<              iis = -9
<              iie =  0
<              do jj = 1,50
<                iis = iis + 10
<                iie = iie + 10
<                if(iie.gt.nskpj1(ng)) iie = nskpj1(ng)
<                write(196,19020) (jskipt(nbl,ii),ii=iis,iie)
<                if(iie.eq.nskpj1(ng)) goto 550
<              enddo
< 550          continue
<              write(196,19016)
< 19016        format('************************** K NODE INDICES ******'
<      .             ,'**********************')
<              iis = -9
<              iie =  0
<              do jj = 1,50
<                iis = iis + 10
<                iie = iie + 10
<                if(iie.gt.nskpk1(ng)) iie = nskpk1(ng)
<                write(196,19020) (kskipt(nbl,ii),ii=iis,iie)
<                if(iie.eq.nskpk1(ng)) goto 575
<              enddo
< 575          continue
<            enddo
<            close(196)
<           end if
<          end if
---
>          write(iunit11,'(''    grid    iskip    jskip    kskip'')')
6091c5184,5185
<             ncgt = ncg
---
>             write(iunit11,'(i8,6i9)') ng,iskip(nbl),jskip(nbl),
>      .                                kskip(nbl)
6093,6108d5186
<               do ii = 1,nskpi1(ng)
<                nbl = nblg(ng)
<                do n=1,ncg
<                   nbl = nbl + 1
<                   iskipt(nbl,ii)= (iskipt(nbl-1,ii)-1)/2 + 1
<                end do
<               enddo
<               do ii = 1,nskpj1(ng)
<                nbl = nblg(ng)
<                do n=1,ncg
<                   nbl = nbl + 1
<                   jskipt(nbl,ii)= (jskipt(nbl-1,ii)-1)/2 + 1
<                end do
<               enddo
<               do ii = 1,nskpk1(ng)
<                nbl = nblg(ng)
6111c5189,5191
<                   kskipt(nbl,ii)= (kskipt(nbl-1,ii)-1)/2 + 1
---
>                   iskip(nbl) = (iskip(nbl-1)-1)/2 + 1
>                   jskip(nbl) = (jskip(nbl-1)-1)/2 + 1
>                   kskip(nbl) = (kskip(nbl-1)-1)/2 + 1
6113d5192
<               enddo
6115,6140c5194
<             write(iunit11,
<      .      '(''      ng     nipt     njpt     nkpt  '')')
<             write(iunit11,'(i8,4i9)') ng,nskpi1(ng),nskpj1(ng)
<      .                          ,nskpk1(ng)
<             nbl = nblg(ng)
<             write(iunit11,
<      .    '(''    control point i-indices for grid levels  '',5i4)')
<      .            (nbl+i-1,i=1,ncgt+1)
<             do i = 1,nskpi1(ng)
<               write(iunit11,'(i8,5i9)') (iskipt(nbl+ii-1,i),ii=1,ncgt+1)
<             enddo
<             nbl = nblg(ng)
<             write(iunit11,
<      .    '(''    control point j-indices for grid levels  '',5i4)')
<      .            (nbl+i-1,i=1,ncgt+1)
<             do i = 1,nskpj1(ng)
<               write(iunit11,'(i8,5i9)') (jskipt(nbl+ii-1,i),ii=1,ncgt+1)
<             enddo
<             nbl = nblg(ng)
<             write(iunit11,
<      .    '(''    control point k-indices for grid levels  '',5i4)')
<      .            (nbl+i-1,i=1,ncgt+1)
<             do i = 1,nskpk1(ng)
<               write(iunit11,'(i8,5i9)') (kskipt(nbl+ii-1,i),ii=1,ncgt+1)
<             enddo
<          enddo
---
>          end do
6340,6445d5393
< c     Now swap y and z grid motion parameters as needed for ialph > 0
< c
<       if (ialph > 0) then
< c
< c       rigid mesh movement data
< c
<         temp     = vtransmc
<         vtransmc = -wtransmc
<         wtransmc = temp
< c
<         temp     = omegaymc
<         omegaymc = -omegazmc
<         omegazmc = temp
< c
<         temp     = thetaymc
<         thetaymc = -thetazmc
<         thetazmc = temp
< c
<         temp     = yorigmc
<         yorigmc  = -zorigmc
<         zorigmc  = temp
< c
<         temp     = yorig0mc
<         yorig0mc = -zorig0mc
<         zorig0mc = temp
< c
<         temp     = dymxmc
<         dymxmc   = -dzmxmc
<         dzmxmc   = temp
< c
<         temp     = dthymxmc
<         dthymxmc = -dthzmxmc
<         dthzmxmc = temp
< c
<         temp     = ymc0
<         ymc0     = -zmc0
<         zmc0     = temp
< c
<         do nbl=1,nblock
< c
<           temp         = vtrans(nbl)
<           vtrans(nbl)  = -wtrans(nbl)
<           wtrans(nbl)  = temp
< c
<           temp         = dymx(nbl)
<           dymx(nbl)    = -dzmx(nbl)
<           dzmx(nbl)    = temp
< c
<           temp         = omegay(nbl)
<           omegay(nbl)  = -omegaz(nbl)
<           omegaz(nbl)  = temp
< c
<           temp         = yorig(nbl)
<           yorig(nbl)   = -zorig(nbl)
<           zorig(nbl)   = temp
< c
<           temp         = yorig0(nbl)
<           yorig0(nbl)  = -zorig0(nbl)
<           zorig0(nbl)  = temp
< c
<           temp         = thetay(nbl)
<           thetay(nbl)  = -thetaz(nbl)
<           thetaz(nbl)  = temp
< c
<           temp         = dthymx(nbl)
<           dthymx(nbl)  = -dthzmx(nbl)
<           dthzmx(nbl)  = temp
< c
<           temp         = thetayl(nbl)
<           thetayl(nbl) = -thetazl(nbl)
<           thetazl(nbl) = temp
< c
<         end do
< c
< c       deforming mesh movement data
< c
<         do nbl=1,nblock
< c
<           do iseg=1,maxsegdg
< c
<             temp               = vtrnsae(nbl,iseg)
<             vtrnsae(nbl,iseg)  = -wtrnsae(nbl,iseg)
<             wtrnsae(nbl,iseg)  = temp
< c
<             temp               = omgyae(nbl,iseg)
<             omgyae(nbl,iseg)   = -omgzae(nbl,iseg)
<             omgzae(nbl,iseg)   = temp
< c
<             temp               = yorgae(nbl,iseg)
<             yorgae(nbl,iseg)   = zorgae(nbl,iseg)
<             zorgae(nbl,iseg)   = temp
< c
<             temp               = yorgae0(nbl,iseg)
<             yorgae0(nbl,iseg)  = -zorgae0(nbl,iseg)
<             zorgae0(nbl,iseg)  = temp
< c
<             temp               = thtyae(nbl,iseg)
<             thtyae(nbl,iseg)   = -thtyae(nbl,iseg)
<             thtzae(nbl,iseg)   = temp
< c
<           end do
< c
<         end do
< c
<       end if
< c
6753c5701
<          lnmaster = 21
---
>          lnmaster = max(nmastr,1)
6758,7022d5705
<  
<        subroutine blocking_skip(nskip1,nskip2,nskipt1,nskipt2)
< c
< c      This subroutine checks if the iskip,jskip,kskip
< c      values across 1-1 block interfaces is the same.
< c      If not, the skip values are set at a common divisor
< c      of the two values.
< c
<        if(nskip1.gt.nskip2) then
<         if(real(nskip1)/real(nskip2).eq.real(nskip1/nskip2)) then
<          nskipt1 = nskip2
<          nskipt2 = nskip2
<         else
<          do i = 1,8
<            nskip2 = nskip2/2
<            if(real(nskip1)/real(nskip2).eq.real(nskip1/nskip2)) then
<             nskipt1 = nskip2
<             nskipt2 = nskip2
<             return
<            end if
<          enddo
<         end if
<        else
<         if(real(nskip2)/real(nskip1).eq.real(nskip2/nskip1)) then
<          nskipt1 = nskip1
<          nskipt2 = nskip1
<         else
<          do i = 1,8
<            nskip1 = nskip1/2
<            if(real(nskip2)/real(nskip1).eq.real(nskip2/nskip1)) then
<             nskipt1 = nskip1
<             nskipt2 = nskip1
<             return
<            end if
<          enddo
<         end if
<        end if
<  
<        return
<        end
<        subroutine skordr(nbl,nskp,i1,ijkskip,maxbl)
<        dimension ijkskip(maxbl,500)
<        do ii1 = nskp,1,-1
<          if(ijkskip(nbl,ii1).eq.i1) return
<        enddo
<        nskp = nskp + 1 
<        ijkskip(nbl,nskp) = ijkskip(nbl,nskp-1) 
<        do ii1 = nskp-1,2,-1
<          if(ijkskip(nbl,ii1-1).lt.i1) then
<            ijkskip(nbl,ii1) = i1
<            return 
<          else
<            ijkskip(nbl,ii1) = ijkskip(nbl,ii1-1) 
<          end if
<        enddo
<        return
<        end
<        subroutine bndchk(n,nbl,iseg,n1,n2,n3,maxbl,maxsegdg,maxseg,
<      .                   ijkskip,nskpijk1,nbcinfo,nbc,ncs) 
<        dimension nbcinfo(maxbl,maxseg,7,2),ijkskip(maxbl,500)
<        dimension nskpijk1(maxbl),nbc(maxbl)
<        dimension ncs(maxbl,maxsegdg)
< c
<        do nseg=1,nbc(nbl)
<         if(nbcinfo(nbl,nseg,1,n3).eq.2004.or. 
<      .     nbcinfo(nbl,nseg,1,n3).eq.1005.or. 
<      .     nbcinfo(nbl,nseg,1,n3).eq.1006) then
<            if(nbcinfo(nbl,nseg,n1,n3).lt.ncs(nbl,iseg).and.      
<      .        nbcinfo(nbl,nseg,n2,n3).ge.ncs(nbl,iseg)) 
<      .        call skordr(nbl,nskpijk1(n),ncs(nbl,iseg)-1
<      .                    ,ijkskip,maxbl) 
<            if(nbcinfo(nbl,nseg,n1,n3).le.ncs(nbl,iseg).and.      
<      .        nbcinfo(nbl,nseg,n2,n3).gt.ncs(nbl,iseg)) 
<      .        call skordr(nbl,nskpijk1(n),ncs(nbl,iseg)+1
<      .                    ,ijkskip,maxbl) 
<         end if  
<        enddo
<        return
<        end
<        subroutine cpadd(nbl1,nbl2,nblk1,nblk2,lmblk11,lmblk12,
<      .                  lmblk21,lmblk22,nskp1,ijkskip1,nskp2,
<      .                  ijkskip2,maxbl,ijkdim1,ijkdim2,icrd1,icrd2) 
<        dimension ijkskip1(500),ijkskip2(500)
<        dimension ijkskpt1(maxbl,500),ijkskpt2(maxbl,500)
< c
<        lmskp11 = 0
<        lmskp12 = 0
<        lmskp21 = 0
<        lmskp22 = 0
<        ijkskpt1= 0
<        ijkskpt2= 0
<        do n = 1,nskp1
<          ijkskpt1(nbl1,n) = ijkskip1(n)
<          if(ijkskpt1(nbl1,n).eq.lmblk11) lmskp11 = n
<          if(ijkskpt1(nbl1,n).eq.lmblk12) lmskp12 = n
<        end do
<        do n = 1,nskp2
<          ijkskpt2(nbl2,n) = ijkskip2(n)
<          if(ijkskpt2(nbl2,n).eq.lmblk21) lmskp21 = n
<          if(ijkskpt2(nbl2,n).eq.lmblk22) lmskp22 = n
<        end do
<        if((nblk1.eq.nblk2).and.(icrd1.eq.icrd2)) then
<          if(lmblk11.lt.lmblk12) then
<            if(lmblk21.lt.lmblk22) then
<              do n1 = lmskp11,lmskp12   
<                itst1 = ijkskip1(n1) - lmblk11 + lmblk21
<                do n2 = lmskp21,lmskp22   
<                  if(ijkskip2(n2).eq.itst1) goto 100
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 100            continue
<              enddo
<              do n2 = lmskp21,lmskp22   
<                itst1 = ijkskip2(n2) - lmblk21 + lmblk11
<                do n1 = lmskp11,lmskp12   
<                  if(itst1.eq.ijkskip1(n1)) goto 200
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 200            continue
<              enddo
<            else
<              do n1 = lmskp11,lmskp12   
<                itst1 = lmblk12 - ijkskip1(n1) + lmblk22
<                do n2 = lmskp22,lmskp21   
<                  if(ijkskip2(n2).eq.itst1) goto 300
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 300            continue
<              enddo
<              do n2 = lmskp22,lmskp21   
<                itst1 = lmblk21 - ijkskip2(n2) + lmblk11  
<                do n1 = lmskp11,lmskp12   
<                  if(itst1.eq.ijkskip1(n1)) goto 400
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 400            continue
<              enddo
<            end if 
<          else
<            if(lmblk21.lt.lmblk22) then
<              do n1 = lmskp12,lmskp11   
<                itst1 = lmblk11 - ijkskip1(n1) + lmblk21
<                do n2 = lmskp21,lmskp22   
<                  if(ijkskip2(n2).eq.itst1) goto 500
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 500            continue
<              enddo
<              do n2 = lmskp21,lmskp22   
<                itst1 = lmblk22 - ijkskip2(n2) + lmblk12
<                do n1 = lmskp12,lmskp11   
<                  if(itst1.eq.ijkskip1(n1)) goto 600
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 600            continue
<              enddo 
<            else
<              do n1 = lmskp12,lmskp11   
<                itst1 = ijkskip1(n1) - lmblk12 + lmblk22
<                do n2 = lmskp22,lmskp21   
<                  if(ijkskip2(n2).eq.itst1) goto 700
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 700            continue
<              enddo
<              do n2 = lmskp22,lmskp21   
<                itst1 = ijkskip2(n2) - lmblk22 + lmblk12
<                do n1 = lmskp12,lmskp11   
<                  if(itst1.eq.ijkskip1(n1)) goto 800
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 800            continue
<              enddo
<            end if 
<          end if
<          nskp1 = nskp2
<          do n = 1,nskp1
<            ijkskip1(n) = ijkskpt2(nbl2,n)
<          enddo 
<          do n = 1,nskp2
<            ijkskip2(n) = ijkskpt2(nbl2,n)
<          enddo 
<        else 
<          if(lmblk11.lt.lmblk12) then
<            if(lmblk21.lt.lmblk22) then
<              do n1 = lmskp11,lmskp12   
<                itst1 = ijkskip1(n1) - lmblk11 + lmblk21
<                do n2 = lmskp21,lmskp22   
<                  if(ijkskip2(n2).eq.itst1) goto 1100
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 1100           continue
<              enddo
<              do n2 = lmskp21,lmskp22   
<                itst1 = ijkskip2(n2) - lmblk21 + lmblk11
<                do n1 = lmskp11,lmskp12   
<                  if(itst1.eq.ijkskip1(n1)) goto 1200
<                enddo
<                call skordr(nbl1,nskp1,itst1,ijkskpt1,maxbl)
< 1200           continue
<              enddo
<            else
<              do n1 = lmskp11,lmskp12   
<                itst1 = lmblk12 - ijkskip1(n1) + lmblk22
<                do n2 = lmskp22,lmskp21   
<                  if(ijkskip2(n2).eq.itst1) goto 1300
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 1300           continue
<              enddo
<              do n2 = lmskp22,lmskp21   
<                itst1 = lmblk21 - ijkskip2(n2) + lmblk11  
<                do n1 = lmskp11,lmskp12   
<                  if(itst1.eq.ijkskip1(n1)) goto 1400
<                enddo
<                call skordr(nbl1,nskp1,itst1,ijkskpt1,maxbl)
< 1400           continue
<              enddo
<            end if 
<          else
<            if(lmblk21.lt.lmblk22) then
<              do n1 = lmskp12,lmskp11   
<                itst1 = lmblk11 - ijkskip1(n1) + lmblk21
<                do n2 = lmskp21,lmskp22   
<                  if(ijkskip2(n2).eq.itst1) goto 1500
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 1500           continue
<              enddo
<              do n2 = lmskp21,lmskp22   
<                itst1 = lmblk22 - ijkskip2(n2) + lmblk12
<                do n1 = lmskp12,lmskp11   
<                  if(itst1.eq.ijkskip1(n1)) goto 1600
<                enddo
<                call skordr(nbl1,nskp1,itst1,ijkskpt1,maxbl)
< 1600           continue
<              enddo 
<            else
<              do n1 = lmskp12,lmskp11   
<                itst1 = ijkskip1(n1) - lmblk12 + lmblk22
<                do n2 = lmskp22,lmskp21   
<                  if(ijkskip2(n2).eq.itst1) goto 1700
<                enddo
<                call skordr(nbl2,nskp2,itst1,ijkskpt2,maxbl)
< 1700           continue
<              enddo
<              do n2 = lmskp22,lmskp21   
<                itst1 = ijkskip2(n2) - lmblk22 + lmblk12
<                do n1 = lmskp12,lmskp11   
<                  if(itst1.eq.ijkskip1(n1)) goto 1800
<                enddo
<                call skordr(nbl1,nskp1,itst1,ijkskpt1,maxbl)
< 1800           continue
<              enddo
<            end if 
<          end if
<          do n = 1,nskp1
<            ijkskip1(n) = ijkskpt1(nbl1,n)
<          enddo 
<          do n = 1,nskp2
<            ijkskip2(n) = ijkskpt2(nbl2,n)
<          enddo 
<        end if
<        return
<        end
Index: source/cfl3d/libs/global0.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/global0.F,v
retrieving revision 1.10
retrieving revision 1.6
diff -r1.10 -r1.6
8c8
< c     $Id: global0.F,v 1.10 2005/10/05 21:01:47 rebart Exp $
---
> c     $Id: global0.F,v 1.6 2003/07/07 14:15:03 biedron Exp $
182,183c182
<      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014 .or.
<      .       abs(ibctyp).eq.2016) then
---
>      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014) then
203,204c202
<      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014 .or.
<      .       abs(ibctyp).eq.2016) then
---
>      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014) then
224,225c222
<      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014 .or.
<      .       abs(ibctyp).eq.2016) then
---
>      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014) then
245,246c242
<      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014 .or.
<      .       abs(ibctyp).eq.2016) then
---
>      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014) then
266,267c262
<      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014 .or.
<      .       abs(ibctyp).eq.2016) then
---
>      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014) then
287,288c282
<      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014 .or.
<      .       abs(ibctyp).eq.2016) then
---
>      .       abs(ibctyp).eq.1006 .or. abs(ibctyp).eq.2014) then
529,567c523,527
<          read(iunit5,*) nskip,idum1,realval(1),realval(2),realval(3)
<      .                  ,realval(4),idum2
<          write(iunit11,'(2i8,4f9.6,i9)') nskip,idum1,realval(1),
<      .                  realval(2),realval(3),realval(4),idum2
<          if(abs(idum1).eq.1) then
<            call echoinp(iunit5,iunit11,1)
<            if (abs(nskip).gt.0) then
<               do ng = 1,abs(nskip)
<                  call echoinp(iunit5,iunit11,1)
<               end do
<            end if
<          else
<            call echoinp(iunit5,iunit11,1)
<            if(abs(nskip).gt.0) then
<              do ng = 1,abs(nskip)
<                call echoinp(iunit5,iunit11,1)
<                read(iunit5,*) igr,nskpi,nskpj,nskpk
<                call echoinp(iunit5,iunit11,1)
<                iis = -9
<                iie =  0
<                do jj = 1,50
<                  iis = iis + 10
<                  iie = iie + 10
<                  if(iie.gt.nskpi) iie = nskpi
<                  call echoinp(iunit5,iunit11,1)
<                  if(iie.eq.nskpi) goto 325
<                enddo
< 325            continue
<                call echoinp(iunit5,iunit11,1)
<                iis = -9
<                iie =  0
<                do jj = 1,50
<                  iis = iis + 10
<                  iie = iie + 10
<                  if(iie.gt.nskpj) iie = nskpj
<                  call echoinp(iunit5,iunit11,1)
<                  if(iie.eq.nskpj) goto 350
<                enddo
< 350            continue
---
>          read(iunit5,*) nskip,realval(1),idum1,idum2
>          write(iunit11,'(i8,f9.6,2i9)') nskip,realval(1),idum1,idum2
>          call echoinp(iunit5,iunit11,1)
>          if (abs(nskip).gt.0) then
>             do ng = 1,abs(nskip)
569,580c529
<                iis = -9
<                iie =  0
<                do jj = 1,50
<                  iis = iis + 10
<                  iie = iie + 10
<                  if(iie.gt.nskpk) iie = nskpk
<                  call echoinp(iunit5,iunit11,1)
<                  if(iie.eq.nskpk) goto 375
<                enddo
< 375            continue
<              enddo
<            end if
---
>             end do
Index: source/cfl3d/libs/global2.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/global2.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
9c9
< c     $Id: global2.F,v 1.4 2005/09/02 18:49:58 rumsey Exp $
---
> c     $Id: global2.F,v 1.3 2002/05/10 13:53:11 rumsey Exp $
78d77
<       common /igrdtyp/ ip3dgrd,ialph
308a308,309
>             dy(int,l)     = realval(2)
>             dz(int,l)     = realval(3)
310,320c311,312
<             if(ialph > 0) then
<               dy(int,l)     = -realval(3)
<               dthety(int,l) = -realval(6)
<               dz(int,l)     = realval(2)
<               dthetz(int,l) = realval(5)
<             else
<               dy(int,l)     = realval(2)
<               dthety(int,l) = realval(5)
<               dz(int,l)     = realval(3)
<               dthetz(int,l) = realval(6)
<             end if
---
>             dthety(int,l) = realval(5)
>             dthetz(int,l) = realval(6)
Index: source/cfl3d/libs/histout.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/histout.F,v
retrieving revision 1.6
retrieving revision 1.5
diff -r1.6 -r1.5
6c6
< c     $Id: histout.F,v 1.6 2005/10/05 19:41:02 rumsey Exp $
---
> c     $Id: histout.F,v 1.5 2002/02/22 18:49:58 rumsey Exp $
44c44
<     2 format(2h# ,20a4)
---
>     2 format(20a4)
46c46
<       write(12,'(''# Mach='',e12.4,'', alpha='',e12.4,
---
>       write(12,'('' Mach='',e12.4,'', alpha='',e12.4,
49c49
<         write(12,'(''# Final res='',e12.4,
---
>         write(12,'('' Final res='',e12.4,
53c53
<         write(12,'(''# Final res='',e12.4)') real(rms(ntt))
---
>         write(12,'('' Final res='',e12.4)') real(rms(ntt))
68c68
<             write(12,'(''# Final cl,cd,cy,cmy='',4e12.4)')
---
>             write(12,'('' Final cl,cd,cy,cmy='',4e12.4)')
71c71
<             write(12,'(''#'',i5,'' it    log(res)        cl'',
---
>             write(12,'(i6,'' it    log(res)        cl'',
80c80
<             write(12,'(''# Final cl,cd,cz,cmz='',4e12.4)')
---
>             write(12,'('' Final cl,cd,cz,cmz='',4e12.4)')
83c83
<             write(12,'(''#'',i5,'' it    log(res)        cl'',
---
>             write(12,'(i6,'' it    log(res)        cl'',
93c93
<          write(12,'(''# Final mass_flow,cftp,cftv,cftmom='',4e12.4)')
---
>          write(12,'('' Final mass_flow,cftp,cftv,cftmom='',4e12.4)')
96c96
<          write(12,'(''#'',i5,'' it    log(res)      mass_flow'',
---
>          write(12,'(i6,'' it    log(res)      mass_flow'',
105c105
<          write(12,'(''# Final cl,cd       ='',2e13.5)')
---
>          write(12,'('' Final cl,cd       ='',2e13.5)')
107c107
<          write(12,'(''# Final cx,cy,cz    ='',3e13.5)')
---
>          write(12,'('' Final cx,cy,cz    ='',3e13.5)')
109c109
<          write(12,'(''# Final cmx,cmy,cmz ='',3e13.5)')
---
>          write(12,'('' Final cmx,cmy,cmz ='',3e13.5)')
112c112
<          write(12,'(''#   it     log(res)           cl'',
---
>          write(12,'(''    it     log(res)           cl'',
Index: source/cfl3d/libs/init.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/init.F,v
retrieving revision 1.5
retrieving revision 1.4
diff -r1.5 -r1.4
4c4
< c     $Id: init.F,v 1.5 2005/09/16 12:53:32 rumsey Exp $
---
> c     $Id: init.F,v 1.4 2002/07/30 18:23:24 rumsey Exp $
137,139c137
<      .           ivisc(2).eq.13 .or. ivisc(3).eq.13 .or.
<      .           ivisc(1).eq.15 .or. ivisc(2).eq.15 .or.
<      .           ivisc(3).eq.15) then
---
>      .           ivisc(2).eq.13 .or. ivisc(3).eq.13) then
Index: source/cfl3d/libs/initvist.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/initvist.F,v
retrieving revision 1.7
retrieving revision 1.6
diff -r1.7 -r1.6
3c3
< c     $Id: initvist.F,v 1.7 2005/09/16 12:53:32 rumsey Exp $
---
> c     $Id: initvist.F,v 1.6 2003/05/09 19:48:02 rumsey Exp $
59,61c59
<      .           ivisc(2).eq.13 .or. ivisc(3).eq.13 .or.
<      .           ivisc(1).eq.15 .or. ivisc(2).eq.15 .or.
<      .           ivisc(3).eq.15) then
---
>      .           ivisc(2).eq.13 .or. ivisc(3).eq.13) then
Index: source/cfl3d/libs/metric.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/metric.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
6c6
< c     $Id: metric.F,v 1.4 2005/03/04 12:23:40 rumsey Exp $
---
> c     $Id: metric.F,v 1.3 2002/04/19 15:00:35 rumsey Exp $
286,288d285
<           nou(1) = min(nou(1)+1,ibufdim)
<           write(bou(nou(1),1),'(''   ... or else the problem may'',
<      .     '' be crossing lines (negative volumes) in the grid'')')
Index: source/cfl3d/libs/moddefl.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/moddefl.F,v
retrieving revision 1.4
retrieving revision 1.2
diff -r1.4 -r1.2
4c4
< c     $Id: moddefl.F,v 1.4 2005/09/16 19:42:24 rebart Exp $
---
> c     $Id: moddefl.F,v 1.2 2001/05/25 20:00:07 biedron Exp $
46,48d45
<          ainf   = uinf/xmach
<          times  = time*grefl/ainf
<          dts    = dt*grefl/ainf
66,68c63,64
<                t0              = perturb(nm,iaes,4)
<                xs(2*nm-1,iaes) = amp*sin(freqp*(times-t0))
<                xs(2*nm,iaes)   = amp*freqp*cos(freqp*(times-t0))
---
>                xs(2*nm-1,iaes) = amp*sin(freqp*time)
>                xs(2*nm,iaes)   = amp*freqp*cos(freqp*time)
78c74
<                dtime           = const*(times-t0)**2
---
>                dtime           = const*(time-t0)**2
82,83c78
<                xs(2*nm,iaes)   = -2.*const*(times-t0)*
<      .                            xs(2*nm-1,iaes)
---
>                xs(2*nm,iaes)   = -2.*const*(time-t0)*xs(2*nm-1,iaes)
91,92c86
<                if (real(times).lt.real(t0-dts/2.))
<      .             then
---
>                if (real(time).lt.real(t0-dt/2.)) then
95,96c89,90
<                else if (real(times).gt.real(t0-dts/2.) .and. 
<      .                  real(times).lt.real(t0+dts/2.)) then 
---
>                else if (real(time).gt.real(t0-dt/2.) .and. 
>      .                  real(time).lt.real(t0+dt/2.)) then 
98c92
<                   xs(2*nm,iaes)   = amp/dts 
---
>                   xs(2*nm,iaes)   = amp/dt
Index: source/cfl3d/libs/modread.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/modread.F,v
retrieving revision 1.8
retrieving revision 1.4
diff -r1.8 -r1.4
6c6
< c     $Id: modread.F,v 1.8 2004/05/21 18:39:35 biedron Exp $
---
> c     $Id: modread.F,v 1.4 2003/05/09 19:48:02 rumsey Exp $
21,27d20
< #else
< c
<       integer stats
< c
<       real, dimension(:,:,:), allocatable :: xmdir1 
<       real, dimension(:,:,:), allocatable :: xmdjr1 
<       real, dimension(:,:,:), allocatable :: xmdkr1 
37,38d29
<       common /igrdtyp/ ip3dgrd,ialph
< 
51,60d41
< #else
< c     allocate real arrays in which to read modal data
< c
<       memuse = 0
<       allocate( xmdir1(jdim,kdim,6), stat=stats )
<       call umalloc(jdim*kdim*6,0,'xmdir1',memuse,stats)
<       allocate( xmdjr1(kdim,idim,6), stat=stats )
<       call umalloc(kdim*idim*6,0,'xmdjr1',memuse,stats)
<       allocate( xmdkr1(jdim,idim,6), stat=stats )
<       call umalloc(jdim*idim*6,0,'xmdkr1',memuse,stats)
65c46
<       do 110 m = 1,2
---
>       do 100 m = 1,2
79c60,63
<       lbc = abs(jbcinfo(nbl,ns,1,m))
---
>       lbc = iabs(jbcinfo(nbl,ns,1,m))
>       if (naesrf.gt.0) then
>          lbc = abs(jbcinfo(nbl,ns,1,m))*jbcinfo(nbl,ns,6,m)
>       end if
81,82c65
<       iflag = (lbc-1006)*(lbc-1005)*(lbc-2004)*(lbc-2014)*
<      .        (lbc-2016)
---
>       iflag = (lbc-1006)*(lbc-1005)*(lbc-2004)*(lbc-2014)
91,106d73
<       if(ialph.eq.0) then
< #ifdef CMPLX
<         read(iunit,*)((xmdjr(k,i,l+1),xmdjr(k,i,l+2),
<      .                 xmdjr(k,i,l+3),k=kst,kfn),i=ist,ifn)
<         do i=ist,ifn
<            do k=kst,kfn
<               xmdj(k,i,l+1,n,iaes) = xmdjr(k,i,l+1)
<               xmdj(k,i,l+2,n,iaes) = xmdjr(k,i,l+2)
<               xmdj(k,i,l+3,n,iaes) = xmdjr(k,i,l+3)
<            end do
<         end do
< #else
<         read(iunit,*)((xmdj(k,i,l+1,n,iaes),xmdj(k,i,l+2,n,iaes),
<      .                 xmdj(k,i,l+3,n,iaes),k=kst,kfn),i=ist,ifn)
< #endif
<       else
108,116c75,83
<         read(iunit,*)((xmdjr(k,i,l+1),xmdjr(k,i,l+3),
<      .                 xmdjr(k,i,l+2),k=kst,kfn),i=ist,ifn)
<         do i=ist,ifn
<            do k=kst,kfn
<               xmdj(k,i,l+1,n,iaes) = xmdjr(k,i,l+1)
<               xmdj(k,i,l+2,n,iaes) =-xmdjr(k,i,l+2)
<               xmdj(k,i,l+3,n,iaes) = xmdjr(k,i,l+3)
<            end do
<         end do
---
>       read(iunit,*)((xmdjr(k,i,l+1),xmdjr(k,i,l+2),
>      .               xmdjr(k,i,l+3),k=kst,kfn),i=ist,ifn)
>       do i=ist,ifn
>          do k=kst,kfn
>             xmdj(k,i,l+1,n,iaes) = xmdjr(k,i,l+1)
>             xmdj(k,i,l+2,n,iaes) = xmdjr(k,i,l+2)
>             xmdj(k,i,l+3,n,iaes) = xmdjr(k,i,l+3)
>          end do
>       end do
118,126c85,86
<         read(iunit,*)((xmdjr1(k,i,l+1),xmdjr1(k,i,l+3),
<      .                 xmdjr1(k,i,l+2),k=kst,kfn),i=ist,ifn)
<         do i=ist,ifn
<            do k=kst,kfn
<               xmdj(k,i,l+1,n,iaes) = xmdjr1(k,i,l+1)
<               xmdj(k,i,l+2,n,iaes) =-xmdjr1(k,i,l+2)
<               xmdj(k,i,l+3,n,iaes) = xmdjr1(k,i,l+3)
<            end do
<         end do
---
>       read(iunit,*)((xmdj(k,i,l+1,n,iaes),xmdj(k,i,l+2,n,iaes),
>      .               xmdj(k,i,l+3,n,iaes),k=kst,kfn),i=ist,ifn)
128d87
<       end if
130d88
< 110   continue
134c92
<       do 210 m = 1,2
---
>       do 200 m = 1,2
148a107,109
>       if (naesrf.gt.0) then
>          lbc = abs(kbcinfo(nbl,ns,1,m))*kbcinfo(nbl,ns,6,m)
>       end if
150,151c111
<       iflag = (lbc-1006)*(lbc-1005)*(lbc-2004)*(lbc-2014)*
<      .        (lbc-2016)
---
>       iflag = (lbc-1006)*(lbc-1005)*(lbc-2004)*(lbc-2014)
160d119
<       if(ialph.eq.0) then
162,170c121,129
<         read(iunit,*)((xmdkr(j,i,l+1),xmdkr(j,i,l+2),
<      .                 xmdkr(j,i,l+3),j=jst,jfn),i=ist,ifn)
<         do i=ist,ifn
<            do j=jst,jfn
<               xmdk(j,i,l+1,n,iaes) = xmdkr(j,i,l+1)
<               xmdk(j,i,l+2,n,iaes) = xmdkr(j,i,l+2)
<               xmdk(j,i,l+3,n,iaes) = xmdkr(j,i,l+3)
<            end do
<         end do
---
>       read(iunit,*)((xmdkr(j,i,l+1),xmdkr(j,i,l+2),
>      .               xmdkr(j,i,l+3),j=jst,jfn),i=ist,ifn)
>       do i=ist,ifn
>          do j=jst,jfn
>             xmdk(j,i,l+1,n,iaes) = xmdkr(j,i,l+1)
>             xmdk(j,i,l+2,n,iaes) = xmdkr(j,i,l+2)
>             xmdk(j,i,l+3,n,iaes) = xmdkr(j,i,l+3)
>          end do
>       end do
172,173c131,132
<         read(iunit,*)((xmdk(j,i,l+1,n,iaes),xmdk(j,i,l+2,n,iaes),
<      .                 xmdk(j,i,l+3,n,iaes),j=jst,jfn),i=ist,ifn)
---
>       read(iunit,*)((xmdk(j,i,l+1,n,iaes),xmdk(j,i,l+2,n,iaes),
>      .               xmdk(j,i,l+3,n,iaes),j=jst,jfn),i=ist,ifn)
175,197d133
<       else
< #ifdef CMPLX
<         read(iunit,*)((xmdkr(j,i,l+1),xmdkr(j,i,l+3),
<      .                 xmdkr(j,i,l+2),j=jst,jfn),i=ist,ifn)
<         do i=ist,ifn
<            do j=jst,jfn
<               xmdk(j,i,l+1,n,iaes) = xmdkr(j,i,l+1)
<               xmdk(j,i,l+2,n,iaes) =-xmdkr(j,i,l+2)
<               xmdk(j,i,l+3,n,iaes) = xmdkr(j,i,l+3)
<            end do
<         end do
< #else
<         read(iunit,*)((xmdkr1(j,i,l+1),xmdkr1(j,i,l+3),
<      .                 xmdkr1(j,i,l+2),j=jst,jfn),i=ist,ifn)
<         do i=ist,ifn
<            do j=jst,jfn
<               xmdk(j,i,l+1,n,iaes) = xmdkr1(j,i,l+1)
<               xmdk(j,i,l+2,n,iaes) =-xmdkr1(j,i,l+2)
<               xmdk(j,i,l+3,n,iaes) = xmdkr1(j,i,l+3)
<            end do
<         end do
< #endif
<       end if
199d134
< 210   continue
203c138
<       do 310 m = 1,2
---
>       do 300 m = 1,2
217a153,155
>       if (naesrf.gt.0) then
>          lbc = abs(ibcinfo(nbl,ns,1,m))*ibcinfo(nbl,ns,6,m)
>       end if
219,220c157
<       iflag = (lbc-1006)*(lbc-1005)*(lbc-2004)*(lbc-2014)*
<      .        (lbc-2016)
---
>       iflag = (lbc-1006)*(lbc-1005)*(lbc-2004)*(lbc-2014)
229d165
<       if(ialph.eq.0) then
231,239c167,175
<         read(iunit,*)((xmdir(j,k,l+1),xmdir(j,k,l+2),
<      .                 xmdir(j,k,l+3),j=jst,jfn),k=kst,kfn)
<         do k=kst,kfn
<            do j=jst,jfn
<               xmdi(j,k,l+1,n,iaes) = xmdir(j,k,l+1)
<               xmdi(j,k,l+2,n,iaes) = xmdir(j,k,l+2)
<               xmdi(j,k,l+3,n,iaes) = xmdir(j,k,l+3)
<            end do
<         end do
---
>       read(iunit,*)((xmdir(j,k,l+1),xmdir(j,k,l+2),
>      .               xmdir(j,k,l+3),j=jst,jfn),k=kst,kfn)
>       do k=kst,kfn
>          do j=jst,jfn
>             xmdi(j,k,l+1,n,iaes) = xmdir(j,k,l+1)
>             xmdi(j,k,l+2,n,iaes) = xmdir(j,k,l+2)
>             xmdi(j,k,l+3,n,iaes) = xmdir(j,k,l+3)
>          end do
>       end do
241,242c177,178
<         read(iunit,*)((xmdi(j,k,l+1,n,iaes),xmdi(j,k,l+2,n,iaes),
<      .                 xmdi(j,k,l+3,n,iaes),j=jst,jfn),k=kst,kfn)
---
>       read(iunit,*)((xmdi(j,k,l+1,n,iaes),xmdi(j,k,l+2,n,iaes),
>      .               xmdi(j,k,l+3,n,iaes),j=jst,jfn),k=kst,kfn)
244,266d179
<       else
< #ifdef CMPLX
<         read(iunit,*)((xmdir(j,k,l+1),xmdir(j,k,l+3),
<      .                 xmdir(j,k,l+2),j=jst,jfn),k=kst,kfn)
<         do k=kst,kfn
<            do j=jst,jfn
<               xmdi(j,k,l+1,n,iaes) = xmdir(j,k,l+1)
<               xmdi(j,k,l+2,n,iaes) =-xmdir(j,k,l+2)
<               xmdi(j,k,l+3,n,iaes) = xmdir(j,k,l+3)
<            end do
<         end do
< #else
<         read(iunit,*)((xmdir1(j,k,l+1),xmdir1(j,k,l+3),
<      .                 xmdir1(j,k,l+2),j=jst,jfn),k=kst,kfn)
<         do k=kst,kfn
<            do j=jst,jfn
<               xmdi(j,k,l+1,n,iaes) = xmdir1(j,k,l+1)
<               xmdi(j,k,l+2,n,iaes) =-xmdir1(j,k,l+2)
<               xmdi(j,k,l+3,n,iaes) = xmdir1(j,k,l+3)
<            end do
<         end do
< #endif
<       end if
268d180
< 310   continue
276,282d187
< #else
< c
< c     deallocate real arrays in which modal data was read
< c
<       deallocate(xmdjr1)
<       deallocate(xmdkr1)
<       deallocate(xmdir1)
Index: source/cfl3d/libs/pltmode.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/pltmode.F,v
retrieving revision 1.11
retrieving revision 1.6
diff -r1.11 -r1.6
8c8
< c     $Id: pltmode.F,v 1.11 2004/05/21 18:38:12 biedron Exp $
---
> c     $Id: pltmode.F,v 1.6 2003/05/15 20:25:13 rumsey Exp $
37d36
<       common /igrdtyp/ ip3dgrd,ialph
93c92,94
<                      lbc = abs(jbcinfo(nbl,ns,1,m))
---
>                      lbc = iabs(jbcinfo(nbl,ns,1,m))
>                      if (naesrf.gt.0) lbc =
>      .                  abs(jbcinfo(nbl,ns,1,m))*jbcinfo(nbl,ns,6,m)
95d95
<      .                                *(lbc-2016)
119c119,121
<                     lbc = abs(kbcinfo(nbl,ns,1,m))
---
>                      lbc = abs(kbcinfo(nbl,ns,1,m))
>                      if (naesrf.gt.0) lbc =
>      .                  abs(kbcinfo(nbl,ns,1,m))*kbcinfo(nbl,ns,6,m)
121d122
<      .                               *(lbc-2016)
145a147,148
>                      if (naesrf.gt.0) lbc =
>      .                  abs(ibcinfo(nbl,ns,1,m))*ibcinfo(nbl,ns,6,m)
147d149
<      .                                *(lbc-2016)
182c184,186
<                lbc = abs(jbcinfo(nbl1,ns,1,m))
---
>                lbc = iabs(jbcinfo(nbl1,ns,1,m))
>                if (naesrf.gt.0) lbc =
>      .            abs(jbcinfo(nbl1,ns,1,m))*jbcinfo(nbl1,ns,6,m)
184d187
<      .                          *(lbc-2016)
191,201c194,198
<                   if(ialph.eq.0) then
<                     write(iunitw,*)
<      .    ((x(j,k,i)+real(xmdj(k,i,l+1,nm,iaes)),i=ist,ifn),k=kst,kfn),
<      .    ((y(j,k,i)+real(xmdj(k,i,l+2,nm,iaes)),i=ist,ifn),k=kst,kfn),
<      .    ((z(j,k,i)+real(xmdj(k,i,l+3,nm,iaes)),i=ist,ifn),k=kst,kfn)
<                   else
<                     write(iunitw,*)
<      .    ((x(j,k,i)+real(xmdj(k,i,l+1,nm,iaes)),i=ist,ifn),k=kst,kfn),
<      .    ((z(j,k,i)+real(xmdj(k,i,l+3,nm,iaes)),i=ist,ifn),k=kst,kfn),
<      .    ((-y(j,k,i)-real(xmdj(k,i,l+2,nm,iaes)),i=ist,ifn),k=kst,kfn)
<                   end if
---
>                   write(iunitw,*)
>      .                 ((x(j,k,i),i=ist,ifn),k=kst,kfn),
>      .                 ((y(j,k,i),i=ist,ifn),k=kst,kfn),
>      .                 ((real(xmdj(k,i,l+3,nm,iaes)),i=ist,ifn),
>      .                                               k=kst,kfn)
216a214,215
>                if (naesrf.gt.0) lbc =
>      .            abs(kbcinfo(nbl1,ns,1,m))*kbcinfo(nbl1,ns,6,m)
218d216
<      .                          *(lbc-2016)
225,235c223,227
<                   if(ialph.eq.0) then
<                     write(iunitw,*)
<      .    ((x(j,k,i)+real(xmdk(j,i,l+1,nm,iaes)),i=ist,ifn),j=jst,jfn),
<      .    ((y(j,k,i)+real(xmdk(j,i,l+2,nm,iaes)),i=ist,ifn),j=jst,jfn),
<      .    ((z(j,k,i)+real(xmdk(j,i,l+3,nm,iaes)),i=ist,ifn),j=jst,jfn)
<                   else
<                     write(iunitw,*)
<      .    ((x(j,k,i)+real(xmdk(j,i,l+1,nm,iaes)),i=ist,ifn),j=jst,jfn),
<      .    ((z(j,k,i)+real(xmdk(j,i,l+3,nm,iaes)),i=ist,ifn),j=jst,jfn),
<      .    ((-y(j,k,i)-real(xmdk(j,i,l+2,nm,iaes)),i=ist,ifn),j=jst,jfn)
<                   end if
---
>                   write(iunitw,*)
>      .            ((x(j,k,i),i=ist,ifn),j=jst,jfn),
>      .            ((y(j,k,i),i=ist,ifn),j=jst,jfn),
>      .            ((real(xmdk(j,i,l+3,nm,iaes)),i=ist,ifn),
>      .                                          j=jst,jfn)
250a243,244
>                if (naesrf.gt.0) lbc =
>      .            abs(ibcinfo(nbl1,ns,1,m))*ibcinfo(nbl1,ns,6,m)
252d245
<      .                          *(lbc-2016)
259,269c252,256
<                   if(ialph.eq.0) then
<                     write(iunitw,*)
<      .    ((x(j,k,i)+real(xmdi(j,k,l+1,nm,iaes)),j=jst,jfn),k=kst,kfn),
<      .    ((y(j,k,i)+real(xmdi(j,k,l+2,nm,iaes)),j=jst,jfn),k=kst,kfn),
<      .    ((z(j,k,i)+real(xmdi(j,k,l+3,nm,iaes)),j=jst,jfn),k=kst,kfn)
<                   else
<                     write(iunitw,*)
<      .    ((x(j,k,i)+real(xmdi(j,k,l+1,nm,iaes)),j=jst,jfn),k=kst,kfn),
<      .    ((z(j,k,i)+real(xmdi(j,k,l+3,nm,iaes)),j=jst,jfn),k=kst,kfn),
<      .    ((-y(j,k,i)-real(xmdi(j,k,l+2,nm,iaes)),j=jst,jfn),k=kst,kfn)
<                   end if
---
>                   write(iunitw,*)
>      .                 ((x(j,k,i),j=jst,jfn),k=kst,kfn),
>      .                 ((y(j,k,i),j=jst,jfn),k=kst,kfn),
>      .                 ((real(xmdi(j,k,l+3,nm,iaes)),j=jst,jfn),
>      .                                               k=kst,kfn)
Index: source/cfl3d/libs/readkey.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/readkey.F,v
retrieving revision 1.24
retrieving revision 1.15
diff -r1.24 -r1.15
4c4
< c     $Id: readkey.F,v 1.24 2005/09/19 14:52:02 rumsey Exp $
---
> c     $Id: readkey.F,v 1.15 2003/05/09 20:48:01 biedron Exp $
42,43c42
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
50,51c49
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
---
>       common /deformz/ beta1,ismooth,negvol
58,62d55
<       common /konew/ ikoprod,isstdenom,pklimterm,ibeta8kzeta
<       common /axisym/ iaxi2plane
<       common /fullns/ ifullns
<       common /maxiv/ ivmx
<       common /curvat/ isarc2d,sarccr3,ieasmcc2d
243,249d235
< c     flag to turn on/off time marching flow solver.  When 0 the
< c     flow solver is turned on.  When 1, only the mesh deformation
< c     and grid metric subroutines are turned on.
< c
<       meshdef   = 0
<       nkey      = nkey + 1
< c
380,386c366,368
< c     value that epsilon or omega is set to for 2-eqn models if 
< c     it goes below tur1cutlev
<       if (ivmx .eq. 15) then
<         tur1cut = -1.
<       else
<         tur1cut = 1.e-20
<       end if
---
> c     lower limit on epsilon or omega for 2-eqn models,
> c     applied only if it goes negative
>       tur1cut = 1.e-20
392,449d373
< c     k-omega/sst/k-epsilon parameter controlling production term
<       ikoprod = 0
<       nkey       = nkey + 1
< c
< c     sst parameter controlling denominator of mut term
<       isstdenom = 0
<       nkey       = nkey + 1
< c
< c     limiter term on Pk in the two-eqn models
<       pklimterm = 20.
<       nkey       = nkey + 1
< c
< c     parameter for use with particular axi cases (for which
< c     i2d=0 & idim=2); modifies time step based on CFL number
< c     so it does not depend on the i-direction metrics
<       iaxi2plane = 0
<       nkey       = nkey + 1
< c
< c     parameter controls whether turbulence model advection terms
< c     are 1st or 2nd order upwind on RHS (1=1st, 2=2nd)
< c     (note: LHS uses 1st order in both cases)
<       iturbord = 1
<       nkey       = nkey + 1
< c
< c     value that k is set to for 2-eqn models if 
< c     it goes below tur2cutlev
<       tur2cut = 1.e-20
<       nkey     = nkey + 1
< c
< c     lower limit on epsilon or omega for 2-eqn models that,
< c     when reached, causes it to be reset to tur1cut
<       tur1cutlev = 0.
<       nkey     = nkey + 1
< c
< c     lower limit on k for 2-eqn models that,
< c     when reached, causes it to be reset to tur2cut
<       tur2cutlev = 0.
<       nkey     = nkey + 1
< c
< c     full Navier-Stokes
<       ifullns = 0
<       nkey     = nkey + 1
< c
< c     beta8 parameter in k-enstrophy model
<       ibeta8kzeta = 0
<       nkey     = nkey + 1
< c
< c     SARC - Spalart-Allmaras curvature correction in 2D sense only
<       isarc2d = 0
<       nkey     = nkey + 1
< c
< c     parameter cr3 in SARC model
<       sarccr3 = 0.6
<       nkey     = nkey + 1
< c
< c     EASMCC - EASM curvature correction in 2D sense only
<       ieasmcc2d = 0
<       nkey     = nkey + 1
689,692d612
<       else if (inpstr(lc1:lc2).eq.'meshdef') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) meshdef
< c
809,865d728
<       else if (inpstr(lc1:lc2).eq.'ikoprod') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) ikoprod
< c
<       else if (inpstr(lc1:lc2).eq.'isstdenom') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) isstdenom
< c
<       else if (inpstr(lc1:lc2).eq.'pklimterm') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) realval(1)
<          pklimterm = realval(1)
< c
<       else if (inpstr(lc1:lc2).eq.'iaxi2plane') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) iaxi2plane
< c
<       else if (inpstr(lc1:lc2).eq.'iturbord') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) iturbord
< c
<       else if (inpstr(lc1:lc2).eq.'tur2cut') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) realval(1)
<          tur2cut = realval(1)
< c
<       else if (inpstr(lc1:lc2).eq.'tur1cutlev') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) realval(1)
<          tur1cutlev = realval(1)
< c
<       else if (inpstr(lc1:lc2).eq.'tur2cutlev') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) realval(1)
<          tur2cutlev = realval(1)
< c
<       else if (inpstr(lc1:lc2).eq.'ifullns') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) ifullns
< c
<       else if (inpstr(lc1:lc2).eq.'ibeta8kzeta') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) ibeta8kzeta
< c
<       else if (inpstr(lc1:lc2).eq.'isarc2d') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) isarc2d
< c
<       else if (inpstr(lc1:lc2).eq.'sarccr3') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) realval(1)
<          sarccr3 = realval(1)
< c
<       else if (inpstr(lc1:lc2).eq.'ieasmcc2d') then
<          lc2 = lc2 +1
<          read(inpstr(lc2:lcl),*) ieasmcc2d
< c
Index: source/cfl3d/libs/resid.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/resid.F,v
retrieving revision 1.15
retrieving revision 1.7
diff -r1.15 -r1.7
12c12
< c     $Id: resid.F,v 1.15 2005/09/19 14:52:02 rumsey Exp $
---
> c     $Id: resid.F,v 1.7 2002/08/12 17:47:24 biedron Exp $
79,85d78
<       common /konew/ ikoprod,isstdenom,pklimterm,ibeta8kzeta
<       common /maxiv/ ivmx
<       common /turbconv/ cflturb,edvislim,iturbprod,nsubturb,nfreeze,
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
<       common /fullns/ ifullns
<       common /curvat/ isarc2d,sarccr3,ieasmcc2d
244,248c237
<      .    ivisc(3).ge.11.or. ivisc(2).ge.11.or. ivisc(1).ge.11 .or.
<      .    ((ivmx.eq.6 .or. ivmx.eq.7 .or. ivmx.eq.10) .and. 
<      .    ikoprod.eq.1) .or. (ivmx.eq.7 .and. isstdenom.eq.1) .or.
<      .    ((ivisc(3).eq.5 .or. ivisc(2).eq.5 .or. ivisc(1).eq.5) .and.
<      .    isarc2d.eq.1)) then
---
>      .    ivisc(3).ge.11.or. ivisc(2).ge.11.or. ivisc(1).ge.11) then
335,343c324
<       if (iturbord .eq. 1) then
<         iwk5=iwk1+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
<         iex=0
<         iex2=-i2d
<       else
<         iwk5=iwk1+(jdim+3)*(kdim+3)*(idim+3-(4*i2d))
<         iex=1
<         iex2=1-(2*i2d)
<       end if
---
>       iwk5=iwk1+(jdim+1)*(kdim+1)*(idim+1)
377c358
<      + ibufdim,iex,iex2)
---
>      + ibufdim)
382,392c363,364
<       if (iturbord .eq. 1) then
<         iwk3=iwk1+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
<         iex=0
<         iex2=-i2d
<       else
<         iwk3=iwk1+(jdim+3)*(kdim+3)*(idim+3-(4*i2d))
<         iex=1
<         iex2=1-(2*i2d)
<       end if
<       iwk4=iwk3+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
<       iex3=-i2d
---
>       iwk3=iwk1+(jdim+1)*(kdim+1)*(idim+1)
>       iwk4=iwk3+(jdim+1)*(kdim+1)*(idim+1)
410,416c382
<       iwk19=iwk18+inmx
<       if (isarc2d .eq. 1) then
<         inmx=(jdim+1)*(kdim+1)*(idim-1)*4
<       else
<         inmx=0
<       end if
<       nroom=nwork-(iwk19+inmx)
---
>       nroom=nwork-(iwk18+inmx)
432c398
<      + ibufdim,iex,iex2,iex3,bcj,bck,bci,ux,wk(iwk19))
---
>      + ibufdim)
437,447c403,404
<       if (iturbord .eq. 1) then
<         iwk4=iwk1+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))*2
<         iex=0
<         iex2=-i2d
<       else
<         iwk4=iwk1+(jdim+3)*(kdim+3)*(idim+3-(4*i2d))*2
<         iex=1
<         iex2=1-(2*i2d)
<       end if
<       iwk5=iwk4+(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
<       iex3=-i2d
---
>       iwk4=iwk1+(jdim+1)*(kdim+1)*(idim+1)*2
>       iwk5=iwk4+(jdim+1)*(kdim+1)*(idim+1)
480,532d436
<       inmx=(jdim+1)*(kdim+1)*(idim+1-(2*i2d))
< c allocate for gradients of vorticity and turbulence - k-zeta only
<       iwk34=iwk33+inmx
<       if (ivisc(1).eq.15 .or. ivisc(2).eq.15 .or. 
<      .    ivisc(3).eq.15) then
<       inmx=jdim
<       else
<       inmx=0
<       end if
<       iwk35=iwk34+inmx
<       iwk36=iwk35+inmx
<       iwk37=iwk36+inmx
<       iwk38=iwk37+inmx
<       iwk39=iwk38+inmx
<       iwk40=iwk39+inmx
<       iwk41=iwk40+inmx
<       iwk42=iwk41+inmx
<       iwk43=iwk42+inmx
<       iwk44=iwk43+inmx
<       iwk45=iwk44+inmx
<       iwk46=iwk45+inmx
<       iwk47=iwk46+inmx
<       iwk48=iwk47+inmx
<       iwk49=iwk48+inmx
<       iwk50=iwk49+inmx
<       iwk51=iwk50+inmx
<       iwk52=iwk51+inmx
<       iwk53=iwk52+inmx
<       iwk54=iwk53+inmx
<       iwk55=iwk54+inmx
<       iwk56=iwk55+inmx
<       iwk57=iwk56+inmx
<       iwk58=iwk57+inmx
<       iwk59=iwk58+inmx
<       iwk60=iwk59+inmx
<       iwk61=iwk60+inmx
<       iwk62=iwk61+inmx
<       iwk63=iwk62+inmx
<       iwk64=iwk63+inmx
<       iwk65=iwk64+inmx
<       iwk66=iwk65+inmx
<       iwk67=iwk66+inmx
<       iwk68=iwk67+inmx
<       iwk69=iwk68+inmx
<       iwk70=iwk69+inmx
<       iwk71=iwk70+inmx
<       iwk72=iwk71+inmx
<       iwk73=iwk72+inmx
<       iwk74=iwk73+inmx
<       iwk75=iwk74+inmx
<       iwk76=iwk75+inmx
<       if (ivisc(1).eq.15 .or. ivisc(2).eq.15 .or. 
<      .    ivisc(3).eq.15) then
534,553c438
<       else
<       inmx=0
<       end if
<       iwk77=iwk76+inmx
<       iwk78=iwk77+inmx
<       iwk79=iwk78+inmx
<       if (ivisc(1).eq.15 .or. ivisc(2).eq.15 .or. 
<      .    ivisc(3).eq.15) then
<       inmx=(jdim+1)*(kdim+1)*(idim+1)*2
<       else
<       inmx=0
<       end if
<       iwk80=iwk79+inmx
< c allocate for easmcc2d 
<       if (ieasmcc2d .eq. 1) then
<         inmx=(jdim+1)*(kdim+1)*(idim-1)*4
<       else
<         inmx=0
<       end if
<       nroom=nwork-(iwk80+inmx)
---
>       nroom=nwork-(iwk33+inmx)
573,583c458
<      + maxbl,maxseg,volj0,volk0,voli0,nou,bou,nbuf,ibufdim,iex,iex2,
<      + iex3,
<      + wk(iwk34),wk(iwk35),wk(iwk36),wk(iwk37),wk(iwk38),wk(iwk39),
<      + wk(iwk40),wk(iwk41),wk(iwk42),wk(iwk43),wk(iwk44),wk(iwk45),
<      + wk(iwk46),wk(iwk47),wk(iwk48),wk(iwk49),wk(iwk50),wk(iwk51),
<      + wk(iwk52),wk(iwk53),wk(iwk54),
<      + wk(iwk55),wk(iwk56),wk(iwk57),wk(iwk58),wk(iwk59),wk(iwk60),
<      + wk(iwk61),wk(iwk62),wk(iwk63),wk(iwk64),wk(iwk65),wk(iwk66),
<      + wk(iwk67),wk(iwk68),wk(iwk69),wk(iwk70),wk(iwk71),wk(iwk72),
<      + wk(iwk73),wk(iwk74),wk(iwk75),
<      + wk(iwk76),wk(iwk77),wk(iwk78),wk(iwk79),wk(iwk80))
---
>      + maxbl,maxseg,volj0,volk0,voli0,nou,bou,nbuf,ibufdim)
596,599d470
<          if (ifullns .ne. 0) then
<            nou(1) = min(nou(1)+1,ibufdim)
<            write(bou(nou(1),1),777)
<          end if
602d472
<   777 format(1x,21hFull N-S terms are ON)
667,675d536
< c
< c-- full viscous terms
< c
<          if (ifullns .ne. 0) then
<          call gfluxv1(i,npl,jdim,kdim,idim,res,q,qj0,qk0,qi0,
<      .                sj,sk,si,vol,wk,nvtq,wj0,vist3d,vj0,
<      .                bcj,bck,bci,volj0,
<      .                nou,bou,nbuf,ibufdim,iadvance(nbl))
<          end if
721,729d581
< c
< c-- full viscous terms
< c
<          if (ifullns .ne. 0) then
<          call hfluxv1(i,npl,jdim,kdim,idim,res,q,qj0,qk0,qi0,
<      .                sj,sk,si,vol,wk,nvtq,wk0,vist3d,vk0,
<      .                bcj,bck,bci,volk0,
<      .                nou,bou,nbuf,ibufdim,iadvance(nbl))
<          end if
778,786d629
< c
< c-- full viscous terms
< c
<             if (ifullns .ne. 0) then
<             call ffluxv1(k,npl,jdim,kdim,idim,res,q,qj0,qk0,qi0,
<      .                   sj,sk,si,vol,wk,nvtq,wi0,vist3d,vi0,
<      .                   bcj,bck,bci,voli0,
<      .                   nou,bou,nbuf,ibufdim,iadvance(nbl))
<             end if
Index: source/cfl3d/libs/resnonin.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/resnonin.F,v
retrieving revision 1.5
retrieving revision 1.3
diff -r1.5 -r1.3
4c4
< c     $Id: resnonin.F,v 1.5 2005/04/28 18:56:53 biedron Exp $
---
> c     $Id: resnonin.F,v 1.3 2003/09/05 13:19:53 biedron Exp $
Index: source/cfl3d/libs/rotsurf.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/rotsurf.F,v
retrieving revision 1.5
retrieving revision 1.2
diff -r1.5 -r1.2
6c6
< c     $Id: rotsurf.F,v 1.5 2004/05/21 19:34:18 biedron Exp $
---
> c     $Id: rotsurf.F,v 1.2 2001/05/25 20:00:08 biedron Exp $
Index: source/cfl3d/libs/setcorner.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/setcorner.F,v
retrieving revision 1.4
retrieving revision 1.2
diff -r1.4 -r1.2
2c2
<      .                     idim,wk,nsurf,iflag,ivert,islavept,nslave,
---
>      .                     idim,wk,nsurf,iflag,ivert,slavept,nslave,
5c5
< c     $Id: setcorner.F,v 1.4 2005/08/17 14:10:05 rebart Exp $
---
> c     $Id: setcorner.F,v 1.2 2001/05/25 20:00:08 biedron Exp $
30c30
<       dimension wk(9*nsurf),islavept(nslave,nmaster,5),ibl(nsurf)
---
>       dimension wk(9*nsurf),slavept(nslave,3,nmaster,5),ibl(nsurf)
33,34c33
<       common /deformz/ beta1,beta2,alpha1,alpha2,isktyp,negvol,meshdef,
<      .                 nsprgit
---
>       common /deformz/ beta1,ismooth,negvol
36a36,114
>       ivert = ivert + 1
> c
> c     first time through, determine closest surface point to the subface
> c     corner point j,k,i and store for subsequent use
> c
>       if (iflag.eq.1) then
>          if (ivert.gt.nslave) then
>             nou(1) = min(nou(1)+1,ibufdim)
>             write(bou(nou(1),1),'(''stopping...parameter nslave '',
>      .                            ''too small'')')
>             call termn8(myid,-1,ibufdim,nbuf,bou,nou)
>          end if
>          do n=1,nsurf
>             ibl(n) = 1
>          end do
>          do nm=1,nmaster
>             dsmin = 1.e20
>             lsmin = 0
>             ll    = 0
>             do n=1,nsurf
>                if (ibl(n) .eq. 1) then
>                   dssq = (xnm1(j,k,i)-wk(ll+7))**2 
>      .                 + (ynm1(j,k,i)-wk(ll+8))**2
>      .                 + (znm1(j,k,i)-wk(ll+9))**2
>                   if (real(dssq) .lt. real(dsmin)) then
>                      dsmin = dssq
>                      lsmin = ll
>                      nsmin = n
>                   end if
>                   if (real(dssq) .eq. real(dsmin)) ibl(n) = 0
>                end if
>                ll = ll + 9
>             end do
>             slavept(ivert,1,nm,iseq) = float(lsmin)
>             slavept(ivert,2,nm,iseq) = dsmin
>             if (nm .eq. 1) then
>                slavept(ivert,3,nm,iseq) = 1.
>             else
>                slavept(ivert,3,nm,iseq) = 
>      .         slavept(ivert,2,1,iseq)/slavept(ivert,2,nm,iseq)
>             end if
>          end do
>          wttot = 0.
>          do nm=1,nmaster
>             wttot = wttot + slavept(ivert,3,nm,iseq)
>          end do
>          do nm=1,nmaster
>             slavept(ivert,3,nm,iseq) = slavept(ivert,3,nm,iseq)/wttot
>          end do
>          return
>       end if
> c
> c     Hartwich damping function, modified to allow distance-weighted 
> c     average of nmaster master points for each slave point
> c
>       eps     = 10.**(-iexp+1)
>       dampmax = -log(10.**(-iexp))
>       termx   = 0.
>       termy   = 0.
>       termz   = 0.
> c
>       do nm=1,nmaster
>          lsmin  = int(slavept(ivert,1,nm,iseq))
>          dsmin  = slavept(ivert,2,nm,iseq)
>          wt     = slavept(ivert,3,nm,iseq)
>          dv     = dsmin
> c        dm     = wk(lsmin+4)**2 + wk(lsmin+5)**2 + wk(lsmin+6)**2
>          dm     = sref
>          damp1  = ccabs(beta1)*dv/(eps+dm)
>          damp1  = ccmin(dampmax,damp1)
>          factor = exp(-damp1)
>          termx  = termx + wt*factor*wk(lsmin+4)
>          termy  = termy + wt*factor*wk(lsmin+5)
>          termz  = termz + wt*factor*wk(lsmin+6)
>       end do
> c
>       dx(j,k,i) = termx
>       dy(j,k,i) = termy
>       dz(j,k,i) = termz
Index: source/cfl3d/libs/setseg.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/setseg.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
7c7
< c     $Id: setseg.F,v 1.4 2003/10/07 17:58:27 rumsey Exp $
---
> c     $Id: setseg.F,v 1.3 2003/05/09 19:48:04 rumsey Exp $
38d37
<      .          abs(ibcinfo(nbl,nseg,1,1)).eq.2016 .or.
56d54
<      .          abs(ibcinfo(nbl,nseg,1,2)).eq.2016 .or.
74d71
<      .          abs(jbcinfo(nbl,nseg,1,1)).eq.2016 .or.
92d88
<      .          abs(jbcinfo(nbl,nseg,1,2)).eq.2016 .or.
110d105
<      .          abs(kbcinfo(nbl,nseg,1,1)).eq.2016 .or.
128d122
<      .          abs(kbcinfo(nbl,nseg,1,2)).eq.2016 .or.
Index: source/cfl3d/libs/spalart.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/spalart.F,v
retrieving revision 1.14
retrieving revision 1.9
diff -r1.14 -r1.9
5,6c5
<      + tursav2,volj0,volk0,voli0,nou,bou,nbuf,ibufdim,iex,iex2,iex3,
<      + bcj,bck,bci,ux,vx)
---
>      + tursav2,volj0,volk0,voli0,nou,bou,nbuf,ibufdim)
8c7
< c     $Id: spalart.F,v 1.14 2005/09/19 14:52:02 rumsey Exp $
---
> c     $Id: spalart.F,v 1.9 2003/09/11 20:28:43 biedron Exp $
37,38c36
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
40d37
<       common /curvat/ isarc2d,sarccr3,ieasmcc2d
47,48c44
<       dimension damp1(jdim-1,kdim-1,idim-1),
<      + fnu(0:jdim,0:kdim,0-iex3:idim+iex3)
---
>       dimension damp1(jdim-1,kdim-1,idim-1),fnu(0:jdim,0:kdim,0:idim)
56c52
<       dimension turre(0-iex:jdim+iex,0-iex:kdim+iex,0-iex2:idim+iex2),
---
>       dimension turre(0:jdim,0:kdim,0:idim),
64,65d59
<       dimension bcj(kdim,idim-1,2),bck(jdim,idim-1,2),bci(jdim,kdim,2),
<      + ux(jdim-1,kdim-1,idim-1,9),vx(0:jdim,0:kdim,idim-1,4)
73,79d66
<          else if (isarc2d .eq. 1) then
<          nou(1) = min(nou(1)+1,ibufdim)
<          write(bou(nou(1),1),'(''   computing turbulent'',
<      +'' viscosity using Spalart SARC, block ='',i4)') nbl
<          nou(1) = min(nou(1)+1,ibufdim)
<          write(bou(nou(1),1),'(''      WARNING: curv terms are'',
<      +'' active in 2-D sense only!!!'')')
85,91d71
<         if(iturbord .eq. 1) then
<            nou(1) = min(nou(1)+1,ibufdim)
<            write(bou(nou(1),1),'(''     1st order advection on RHS'')')
<         else
<            nou(1) = min(nou(1)+1,ibufdim)
<            write(bou(nou(1),1),'(''     2nd order advection on RHS'')')
<         end if
228d207
<       if (i2d .ne. 1) then
237d215
<       end if
310d287
<         if (i2d .ne. 1) then
323,363d299
<         end if
<         if (iturbord .ne. 1) then
< c      (1) k=0 boundary:
<         do i=1,idim-1
<           do j=1,jdim-1
<             turre(j,-1,i)=tk0(j,i,1,2)
<           enddo
<         enddo
< c      (2) k=kdim boundary:
<         do i=1,idim-1
<           do j=1,jdim-1
<             turre(j,kdim+1,i)=tk0(j,i,1,4)
<           enddo
<         enddo
< c      (3) j=0 boundary:
<         do i=1,idim-1
<           do k=1,kdim-1
<             turre(-1,k,i)=tj0(k,i,1,2)
<           enddo
<         enddo
< c      (4) j=jdim boundary:
<         do i=1,idim-1
<           do k=1,kdim-1
<             turre(jdim+1,k,i)=tj0(k,i,1,4)
<           enddo
<         enddo
<         if (i2d .ne. 1) then
< c      (5) i=0 boundary:
<         do k=1,kdim-1
<           do j=1,jdim-1
<             turre(j,k,-1)=ti0(j,k,1,2)
<           enddo
<         enddo
< c      (6) i=idim boundary:
<         do k=1,kdim-1
<           do j=1,jdim-1
<             turre(j,k,idim+1)=ti0(j,k,1,4)
<           enddo
<         enddo
<         end if
<         end if
503d438
<         if (iturbord .eq. 1) then
524,550d458
<         else
< c       2nd order upwind; LHS remains 1st order everywhere
<         do k=1,kdim-1
<           do i=1,idim-1
<             do j=1,jdim-1
<               xc=0.5*(sk(j,k+1,i,1)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,1)*sk(j,k,i  ,4))/vol(j,k,i)
<               yc=0.5*(sk(j,k+1,i,2)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,2)*sk(j,k,i  ,4))/vol(j,k,i)
<               zc=0.5*(sk(j,k+1,i,3)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,3)*sk(j,k,i  ,4))/vol(j,k,i)
<               tc=0.5*(sk(j,k+1,i,5)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,5)*sk(j,k,i  ,4))/vol(j,k,i)
<               uu=xc*q(j,k,i,2)+yc*q(j,k,i,3)+zc*q(j,k,i,4)+tc
<               sgnu=ccsignrc(1.,uu)
<               app=0.5*(1.+sgnu)
<               apm=0.5*(1.-sgnu)
<               vist3d(j,k,i)=vist3d(j,k,i)-0.5*uu*app*turre(j,k-2,i)
<      +                                    +2.*uu*app*turre(j,k-1,i)
<      +                                   -1.5*uu*app*turre(j,k,i)
<      +                                   +1.5*uu*apm*turre(j,k,i)
<      +                                    -2.*uu*apm*turre(j,k+1,i)
<      +                                   +0.5*uu*apm*turre(j,k+2,i)
<             enddo
<           enddo
<         enddo
<         end if
687d594
<         if (iturbord .eq. 1) then
708,734d614
<         else
< c       2nd order upwind; LHS remains 1st order everywhere
<         do i=1,idim-1
<           do k=1,kdim-1
<             do j=1,jdim-1
<               xc=0.5*(sj(j+1,k,i,1)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,1)*sj(j,k,i  ,4))/vol(j,k,i)
<               yc=0.5*(sj(j+1,k,i,2)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,2)*sj(j,k,i  ,4))/vol(j,k,i)
<               zc=0.5*(sj(j+1,k,i,3)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,3)*sj(j,k,i  ,4))/vol(j,k,i)
<               tc=0.5*(sj(j+1,k,i,5)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,5)*sj(j,k,i  ,4))/vol(j,k,i)
<               uu=xc*q(j,k,i,2)+yc*q(j,k,i,3)+zc*q(j,k,i,4)+tc
<               sgnu=ccsignrc(1.,uu)
<               app=0.5*(1.+sgnu)
<               apm=0.5*(1.-sgnu)
<               vist3d(j,k,i)=vist3d(j,k,i)-0.5*uu*app*turre(j-2,k,i)
<      +                                    +2.*uu*app*turre(j-1,k,i)
<      +                                   -1.5*uu*app*turre(j,k,i)
<      +                                   +1.5*uu*apm*turre(j,k,i)
<      +                                    -2.*uu*apm*turre(j+1,k,i)
<      +                                   +0.5*uu*apm*turre(j+2,k,i)
<             enddo
<           enddo
<         enddo
<         end if
874d753
<         if (iturbord .eq. 1) then
896,922d774
<           else
< c       2nd order upwind; LHS remains 1st order everywhere
<           do i=1,idim-1
<             do k=1,kdim-1
<               do j=1,jdim-1
<                 xc=0.5*(si(j,k,i+1,1)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,1)*si(j,k,i  ,4))/vol(j,k,i)
<                 yc=0.5*(si(j,k,i+1,2)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,2)*si(j,k,i  ,4))/vol(j,k,i)
<                 zc=0.5*(si(j,k,i+1,3)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,3)*si(j,k,i  ,4))/vol(j,k,i)
<                 tc=0.5*(si(j,k,i+1,5)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,5)*si(j,k,i  ,4))/vol(j,k,i)
<                 uu=xc*q(j,k,i,2)+yc*q(j,k,i,3)+zc*q(j,k,i,4)+tc
<               sgnu=ccsignrc(1.,uu)
<               app=0.5*(1.+sgnu)
<               apm=0.5*(1.-sgnu)
<               vist3d(j,k,i)=vist3d(j,k,i)-0.5*uu*app*turre(j,k,i-2)
<      +                                    +2.*uu*app*turre(j,k,i-1)
<      +                                   -1.5*uu*app*turre(j,k,i)
<      +                                   +1.5*uu*apm*turre(j,k,i)
<      +                                    -2.*uu*apm*turre(j,k,i+1)
<      +                                   +0.5*uu*apm*turre(j,k,i+2)
<               enddo
<             enddo
<           enddo
<           end if
977,996d828
<       if (isarc2d .eq. 1) then
< c For SARC model, eventually need to compute rtilde as fn of Dalpha/Dt
< c   Note SARC currently only set up for curvature in x-z plane, with
< c   y direction (necessarily) in the i-direction
< c   Get vx(3)=DS11/Dt and vx(4)=DS13/Dt:
<         call sijrate2d(idim,jdim,kdim,q,qj0,qk0,
<      .  bcj,bck,vol,sj,sk,vx)
< c   compute curvature term, part of Dalpha/Dt: store in vx(1)
< c   modify Sij such that its diagonal terms are traceless in the 2D sense
<         do i=1,idim-1
<           do j=1,jdim-1
<             do k=1,kdim-1
<               s11 = ux(j,k,i,1)
<      +           -(ux(j,k,i,1)+ux(j,k,i,9))/2.
<               s13 = 0.5*(ux(j,k,i,3) + ux(j,k,i,7))
<               vx(j,k,i,1)=s11*vx(j,k,i,4)-s13*vx(j,k,i,3)
<             enddo
<           enddo
<         enddo
<       end if
1024,1046d855
<               if (isarc2d .eq. 1) then
< c               Determine Sij and Wij values:
<                 s11 = ux(j,k,i,1)
<                 s22 = ux(j,k,i,5)
<                 s33 = ux(j,k,i,9)
<                 s12 = 0.5*(ux(j,k,i,2) + ux(j,k,i,4))
<                 s13 = 0.5*(ux(j,k,i,3) + ux(j,k,i,7))
<                 s23 = 0.5*(ux(j,k,i,6) + ux(j,k,i,8))
<                 w12 = 0.5*(ux(j,k,i,2) - ux(j,k,i,4))
<                 w13 = 0.5*(ux(j,k,i,3) - ux(j,k,i,7))
<                 w23 = 0.5*(ux(j,k,i,6) - ux(j,k,i,8))
<                 xis = s11*s11 + s22*s22 + s33*s33 +
<      +              2.*s12*s12 + 2.*s13*s13 + 2.*s23*s23
<                 ss=ccmax(ss,xminn)
<                 xisabs=sqrt(2.*xis)
<                 rstar=xisabs/ss
<                 xisabs=ccmax(xisabs,xminn)
<                 rtilde=-4.*vx(j,k,i,1)*w13/
<      +             (0.5*(ss**2+xisabs**2))**2
<                 fr1=4.*rstar/(1.+rstar)*(1.-sarccr3*
<      +             ccatan(12.*rtilde))-1.
<                 term1=cb1*(fr1-ft2)*ss
<               end if
Index: source/cfl3d/libs/tfiedge.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/tfiedge.F,v
retrieving revision 1.5
retrieving revision 1.4
diff -r1.5 -r1.4
2c2
<      .                   arci,arcj,arck,nou,bou,nbuf,ibufdim,myid,nbl)
---
>      .                   arci,arcj,arck,nou,bou,nbuf,ibufdim,myid)
4c4
< c     $Id: tfiedge.F,v 1.5 2005/08/17 14:10:07 rebart Exp $
---
> c     $Id: tfiedge.F,v 1.4 2003/07/22 19:52:23 biedron Exp $
Index: source/cfl3d/libs/tfivol.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/tfivol.F,v
retrieving revision 1.4
retrieving revision 1.2
diff -r1.4 -r1.2
1,5c1,2
<       subroutine tfivol(idim,jdim,kdim,iskp,jskp,kskp,iskmax,jskmax,
<      .                  kskmax,iskip,jskip,kskip,isktyp,x,y,z,
<      .                  x1,y1,z1,x2,y2,z2,x3,y3,z3,x4,y4,z4,x5,y5,
<      .                  z5,x6,y6,z6,x7,y7,z7,arci,arcj,arck,nou,bou,
<      .                  nbuf,ibufdim,myid,maxbl,nbl)
---
>       subroutine tfivol(idim,jdim,kdim,x,y,z,x1,y1,z1,x2,y2,z2,x3,y3,z3,
>      .                  arci,arcj,arck,nou,bou,nbuf,ibufdim,myid)
7c4
< c     $Id: tfivol.F,v 1.4 2005/08/17 14:10:08 rebart Exp $
---
> c     $Id: tfivol.F,v 1.2 2001/05/25 20:00:09 biedron Exp $
25,28d21
<       dimension x4(jdim,kdim,idim),y4(jdim,kdim,idim),z4(jdim,kdim,idim)
<       dimension x5(jdim,kdim,idim),y5(jdim,kdim,idim),z5(jdim,kdim,idim)
<       dimension x6(jdim,kdim,idim),y6(jdim,kdim,idim),z6(jdim,kdim,idim)
<       dimension x7(jdim,kdim,idim),y7(jdim,kdim,idim),z7(jdim,kdim,idim)
31,34c24
<       dimension iskip(maxbl,500)
<       dimension jskip(maxbl,500)
<       dimension kskip(maxbl,500)
<       dimension iskmax(maxbl),jskmax(maxbl),kskmax(maxbl)
---
> c 
37c27
<       common /zero/ iexp
---
> c     eta projector  -  1st step 
39,63c29,32
< c     tolerance for switch to linear blending function
< c     (10.**(-iexp) is machine zero)
< c
<       tol = max(1.e-07,10.**(-iexp+1))
< c
<       if(abs(isktyp).eq.1) then
<        do i1= 1,idim-iskp,iskp
<         is = i1
<         ie = i1+iskp
<         do j1= 1,jdim-jskp,jskp
<          js = j1
<          je = j1+jskp
<          do k1= 1,kdim-kskp,kskp
<           ks = k1
<           ke = k1+kskp
<           do j=js,je
<            do k=ks,ke
<             do i=is,ie
<                denomj= (arcj(je,k,i)- arcj(js,k,i))
<                if(real(denomj).lt.real(tol)) then
<                  eta = 0.
<                else
<                  eta = (arcj(j,k,i) - arcj(js,k,i))
<      .                  / denomj
<                end if
---
>       do j=1,jdim
>          do k=1,kdim
>             do i=1,idim
>                eta = arcj(j,k,i)
66,152c35,40
<                denomk= (arck(j,ke,i)- arck(j,ks,i))
<                if(real(denomk).lt.real(tol)) then
<                  zeta = 0.
<                else
<                  zeta = (arck(j,k,i) - arck(j,ks,i))
<      .                  / denomk
<                end if
<                omg(1) = zeta
<                omg(2) = 1.-zeta
<                denomi = (arci(j,k,ie)- arci(j,k,is))
<                if(real(denomi).lt.real(tol)) then
<                  xi = 0.
<                else
<                  xi = (arci(j,k,i) - arci(j,k,is))
<      .                  / denomi
<                end if
<                phi(1) = xi
<                phi(2) = 1.-xi
<                x1(j,k,i) = psi(2)*x(js,k,i) + psi(1)*x(je,k,i)
<                y1(j,k,i) = psi(2)*y(js,k,i) + psi(1)*y(je,k,i)
<                z1(j,k,i) = psi(2)*z(js,k,i) + psi(1)*z(je,k,i)
<                x2(j,k,i) = omg(2)*x(j,ks,i) + omg(1)*x(j,ke,i)
<                y2(j,k,i) = omg(2)*y(j,ks,i) + omg(1)*y(j,ke,i)
<                z2(j,k,i) = omg(2)*z(j,ks,i) + omg(1)*z(j,ke,i)
<                x3(j,k,i) = phi(2)*x(j,k,is) + phi(1)*x(j,k,ie)
<                y3(j,k,i) = phi(2)*y(j,k,is) + phi(1)*y(j,k,ie)
<                z3(j,k,i) = phi(2)*z(j,k,is) + phi(1)*z(j,k,ie)
<                x4(j,k,i) = psi(2)*omg(2)     *x(js,ks,i)
<      .                    +psi(2)*omg(1)     *x(js,ke,i)
<      .                    +psi(1)*omg(2)     *x(je,ks,i)
<      .                    +psi(1)*omg(1)     *x(je,ke,i)
<                y4(j,k,i) = psi(2)*omg(2)     *y(js,ks,i)
<      .                    +psi(2)*omg(1)     *y(js,ke,i)
<      .                    +psi(1)*omg(2)     *y(je,ks,i)
<      .                    +psi(1)*omg(1)     *y(je,ke,i)
<                z4(j,k,i) = psi(2)*omg(2)     *z(js,ks,i)
<      .                    +psi(2)*omg(1)     *z(js,ke,i)
<      .                    +psi(1)*omg(2)     *z(je,ks,i)
<      .                    +psi(1)*omg(1)     *z(je,ke,i)
<                x5(j,k,i) = psi(2)*phi(2)     *x(js,k,is)
<      .                    +psi(2)*phi(1)     *x(js,k,ie)
<      .                    +psi(1)*phi(2)     *x(je,k,is)
<      .                    +psi(1)*phi(1)     *x(je,k,ie)
<                y5(j,k,i) = psi(2)*phi(2)     *y(js,k,is)
<      .                    +psi(2)*phi(1)     *y(js,k,ie)
<      .                    +psi(1)*phi(2)     *y(je,k,is)
<      .                    +psi(1)*phi(1)     *y(je,k,ie)
<                z5(j,k,i) = psi(2)*phi(2)     *z(js,k,is)
<      .                    +psi(2)*phi(1)     *z(js,k,ie)
<      .                    +psi(1)*phi(2)     *z(je,k,is)
<      .                    +psi(1)*phi(1)     *z(je,k,ie)
<                x6(j,k,i) = omg(2)*phi(2)     *x(j,ks,is)
<      .                    +omg(2)*phi(1)     *x(j,ks,ie)
<      .                    +omg(1)*phi(2)     *x(j,ke,is)
<      .                    +omg(1)*phi(1)     *x(j,ke,ie)
<                y6(j,k,i) = omg(2)*phi(2)     *y(j,ks,is)
<      .                    +omg(2)*phi(1)     *y(j,ks,ie)
<      .                    +omg(1)*phi(2)     *y(j,ke,is)
<      .                    +omg(1)*phi(1)     *y(j,ke,ie)
<                z6(j,k,i) = omg(2)*phi(2)     *z(j,ks,is)
<      .                    +omg(2)*phi(1)     *z(j,ks,ie)
<      .                    +omg(1)*phi(2)     *z(j,ke,is)
<      .                    +omg(1)*phi(1)     *z(j,ke,ie)
<                x7(j,k,i) = psi(2)*omg(2)*phi(2)*x(js,ks,is)
<      .                    +psi(2)*omg(2)*phi(1)*x(js,ks,ie)
<      .                    +psi(2)*omg(1)*phi(2)*x(js,ke,is)
<      .                    +psi(2)*omg(1)*phi(1)*x(js,ke,ie)
<      .                    +psi(1)*omg(2)*phi(2)*x(je,ks,is)
<      .                    +psi(1)*omg(2)*phi(1)*x(je,ks,ie)
<      .                    +psi(1)*omg(1)*phi(2)*x(je,ke,is)
<      .                    +psi(1)*omg(1)*phi(1)*x(je,ke,ie)
<                y7(j,k,i) = psi(2)*omg(2)*phi(2)*y(js,ks,is)
<      .                    +psi(2)*omg(2)*phi(1)*y(js,ks,ie)
<      .                    +psi(2)*omg(1)*phi(2)*y(js,ke,is)
<      .                    +psi(2)*omg(1)*phi(1)*y(js,ke,ie)
<      .                    +psi(1)*omg(2)*phi(2)*y(je,ks,is)
<      .                    +psi(1)*omg(2)*phi(1)*y(je,ks,ie)
<      .                    +psi(1)*omg(1)*phi(2)*y(je,ke,is)
<      .                    +psi(1)*omg(1)*phi(1)*y(je,ke,ie)
<                z7(j,k,i) = psi(2)*omg(2)*phi(2)*z(js,ks,is)
<      .                    +psi(2)*omg(2)*phi(1)*z(js,ks,ie)
<      .                    +psi(2)*omg(1)*phi(2)*z(js,ke,is)
<      .                    +psi(2)*omg(1)*phi(1)*z(js,ke,ie)
<      .                    +psi(1)*omg(2)*phi(2)*z(je,ks,is)
<      .                    +psi(1)*omg(2)*phi(1)*z(je,ks,ie)
<      .                    +psi(1)*omg(1)*phi(2)*z(je,ke,is)
<      .                    +psi(1)*omg(1)*phi(1)*z(je,ke,ie)
---
>                x1(j,k,i) = psi(2)*x(1,k,i) 
>      .                   + psi(1)*x(jdim,k,i)
>                y1(j,k,i) = psi(2)*y(1,k,i) 
>      .                   + psi(1)*y(jdim,k,i)
>                z1(j,k,i) = psi(2)*z(1,k,i) 
>      .                   + psi(1)*z(jdim,k,i)
154,203c42,50
<            end do
<           end do
<           do i=is+1,ie-1
<            do j=js+1,je-1
<             do k=ks+1,ke-1
<                x(j,k,i)  = x1(j,k,i) + x2(j,k,i) + x3(j,k,i)
<      .                   - x4(j,k,i) - x5(j,k,i) - x6(j,k,i)
<      .                   + x7(j,k,i)
<                y(j,k,i)  = y1(j,k,i) + y2(j,k,i) + y3(j,k,i)
<      .                   - y4(j,k,i) - y5(j,k,i) - y6(j,k,i)
<      .                   + y7(j,k,i)
<                z(j,k,i)  = z1(j,k,i) + z2(j,k,i) + z3(j,k,i)
<      .                   - z4(j,k,i) - z5(j,k,i) - z6(j,k,i)
<      .                   + z7(j,k,i)
<             end do
<            end do
<           end do
<          enddo
<         enddo
<        enddo
<       else
<        do i1=1,iskmax(nbl)-1
<         is= iskip(nbl,i1)
<         ie= iskip(nbl,i1+1)
<         do j1=1,jskmax(nbl)-1
<          js= jskip(nbl,j1)
<          je= jskip(nbl,j1+1)
<          do k1=1,kskmax(nbl)-1
<           ks= kskip(nbl,k1)
<           ke= kskip(nbl,k1+1)
< c
<           do j=js,je
<            do k=ks,ke
<             do i=is,ie
<                denomj= (arcj(je,k,i)- arcj(js,k,i))
<                if(real(denomj).lt.real(tol)) then
<                  eta = 0.
<                else
<                  eta = (arcj(j,k,i) - arcj(js,k,i))
<      .                  / denomj
<                end if
<                psi(1) = eta
<                psi(2) = 1.-eta
<                denomk= (arck(j,ke,i)- arck(j,ks,i))
<                if(real(denomk).lt.real(tol)) then
<                  zeta = 0.
<                else
<                  zeta = (arck(j,k,i) - arck(j,ks,i))
<      .                  / denomk
<                end if
---
>          end do
>       end do
> c 
> c     zeta projector  -  2nd step
> c
>       do k=1,kdim
>          do j=1,jdim
>             do i=1,idim
>                zeta = arck(j,k,i)
206,212c53,68
<                denomi = (arci(j,k,ie)- arci(j,k,is))
<                if(real(denomi).lt.real(tol)) then
<                  xi = 0.
<                else
<                  xi = (arci(j,k,i) - arci(j,k,is))
<      .                  / denomi
<                end if
---
>                x2(j,k,i) = omg(2)*(x(j,1,i)    - x1(j,1,i))
>      .                   + omg(1)*(x(j,kdim,i) - x1(j,kdim,i))
>                y2(j,k,i) = omg(2)*(y(j,1,i)    - y1(j,1,i))
>      .                   + omg(1)*(y(j,kdim,i) - y1(j,kdim,i))
>                z2(j,k,i) = omg(2)*(z(j,1,i)    - z1(j,1,i))
>      .                   + omg(1)*(z(j,kdim,i) - z1(j,kdim,i))
>             end do
>          end do
>       end do
> c 
> c     xi projector  -  3rd step
> c
>       do i=1,idim
>          do j=1,jdim
>             do k=1,kdim
>                xi = arci(j,k,i)
215,283c71,82
<                x1(j,k,i) = psi(2)*x(js,k,i) + psi(1)*x(je,k,i)
<                y1(j,k,i) = psi(2)*y(js,k,i) + psi(1)*y(je,k,i)
<                z1(j,k,i) = psi(2)*z(js,k,i) + psi(1)*z(je,k,i)
<                x2(j,k,i) = omg(2)*x(j,ks,i) + omg(1)*x(j,ke,i)
<                y2(j,k,i) = omg(2)*y(j,ks,i) + omg(1)*y(j,ke,i)
<                z2(j,k,i) = omg(2)*z(j,ks,i) + omg(1)*z(j,ke,i)
<                x3(j,k,i) = phi(2)*x(j,k,is) + phi(1)*x(j,k,ie)
<                y3(j,k,i) = phi(2)*y(j,k,is) + phi(1)*y(j,k,ie)
<                z3(j,k,i) = phi(2)*z(j,k,is) + phi(1)*z(j,k,ie)
<                x4(j,k,i) = psi(2)*omg(2)     *x(js,ks,i)
<      .                    +psi(2)*omg(1)     *x(js,ke,i)
<      .                    +psi(1)*omg(2)     *x(je,ks,i)
<      .                    +psi(1)*omg(1)     *x(je,ke,i)
<                y4(j,k,i) = psi(2)*omg(2)     *y(js,ks,i)
<      .                    +psi(2)*omg(1)     *y(js,ke,i)
<      .                    +psi(1)*omg(2)     *y(je,ks,i)
<      .                    +psi(1)*omg(1)     *y(je,ke,i)
<                z4(j,k,i) = psi(2)*omg(2)     *z(js,ks,i)
<      .                    +psi(2)*omg(1)     *z(js,ke,i)
<      .                    +psi(1)*omg(2)     *z(je,ks,i)
<      .                    +psi(1)*omg(1)     *z(je,ke,i)
<                x5(j,k,i) = psi(2)*phi(2)     *x(js,k,is)
<      .                    +psi(2)*phi(1)     *x(js,k,ie)
<      .                    +psi(1)*phi(2)     *x(je,k,is)
<      .                    +psi(1)*phi(1)     *x(je,k,ie)
<                y5(j,k,i) = psi(2)*phi(2)     *y(js,k,is)
<      .                    +psi(2)*phi(1)     *y(js,k,ie)
<      .                    +psi(1)*phi(2)     *y(je,k,is)
<      .                    +psi(1)*phi(1)     *y(je,k,ie)
<                z5(j,k,i) = psi(2)*phi(2)     *z(js,k,is)
<      .                    +psi(2)*phi(1)     *z(js,k,ie)
<      .                    +psi(1)*phi(2)     *z(je,k,is)
<      .                    +psi(1)*phi(1)     *z(je,k,ie)
<                x6(j,k,i) = omg(2)*phi(2)     *x(j,ks,is)
<      .                    +omg(2)*phi(1)     *x(j,ks,ie)
<      .                    +omg(1)*phi(2)     *x(j,ke,is)
<      .                    +omg(1)*phi(1)     *x(j,ke,ie)
<                y6(j,k,i) = omg(2)*phi(2)     *y(j,ks,is)
<      .                    +omg(2)*phi(1)     *y(j,ks,ie)
<      .                    +omg(1)*phi(2)     *y(j,ke,is)
<      .                    +omg(1)*phi(1)     *y(j,ke,ie)
<                z6(j,k,i) = omg(2)*phi(2)     *z(j,ks,is)
<      .                    +omg(2)*phi(1)     *z(j,ks,ie)
<      .                    +omg(1)*phi(2)     *z(j,ke,is)
<      .                    +omg(1)*phi(1)     *z(j,ke,ie)
<                x7(j,k,i) = psi(2)*omg(2)*phi(2)*x(js,ks,is)
<      .                    +psi(2)*omg(2)*phi(1)*x(js,ks,ie)
<      .                    +psi(2)*omg(1)*phi(2)*x(js,ke,is)
<      .                    +psi(2)*omg(1)*phi(1)*x(js,ke,ie)
<      .                    +psi(1)*omg(2)*phi(2)*x(je,ks,is)
<      .                    +psi(1)*omg(2)*phi(1)*x(je,ks,ie)
<      .                    +psi(1)*omg(1)*phi(2)*x(je,ke,is)
<      .                    +psi(1)*omg(1)*phi(1)*x(je,ke,ie)
<                y7(j,k,i) = psi(2)*omg(2)*phi(2)*y(js,ks,is)
<      .                    +psi(2)*omg(2)*phi(1)*y(js,ks,ie)
<      .                    +psi(2)*omg(1)*phi(2)*y(js,ke,is)
<      .                    +psi(2)*omg(1)*phi(1)*y(js,ke,ie)
<      .                    +psi(1)*omg(2)*phi(2)*y(je,ks,is)
<      .                    +psi(1)*omg(2)*phi(1)*y(je,ks,ie)
<      .                    +psi(1)*omg(1)*phi(2)*y(je,ke,is)
<      .                    +psi(1)*omg(1)*phi(1)*y(je,ke,ie)
<                z7(j,k,i) = psi(2)*omg(2)*phi(2)*z(js,ks,is)
<      .                    +psi(2)*omg(2)*phi(1)*z(js,ks,ie)
<      .                    +psi(2)*omg(1)*phi(2)*z(js,ke,is)
<      .                    +psi(2)*omg(1)*phi(1)*z(js,ke,ie)
<      .                    +psi(1)*omg(2)*phi(2)*z(je,ks,is)
<      .                    +psi(1)*omg(2)*phi(1)*z(je,ks,ie)
<      .                    +psi(1)*omg(1)*phi(2)*z(je,ke,is)
<      .                    +psi(1)*omg(1)*phi(1)*z(je,ke,ie)
---
>                x3(j,k,i) = phi(2)*(x(j,k,1)    - x1(j,k,1)
>      .                   - x2(j,k,1))
>      .                   + phi(1)*(x(j,k,idim) - x1(j,k,idim)
>      .                   - x2(j,k,idim))
>                y3(j,k,i) = phi(2)*(y(j,k,1)    - y1(j,k,1)
>      .                   - y2(j,k,1))
>      .                   + phi(1)*(y(j,k,idim) - y1(j,k,idim)
>      .                   - y2(j,k,idim))
>                z3(j,k,i) = phi(2)*(z(j,k,1)    - z1(j,k,1)
>      .                   - z2(j,k,1))
>      .                   + phi(1)*(z(j,k,idim) - z1(j,k,idim)
>      .                   - z2(j,k,idim))
285,286c84,87
<            end do
<           end do
---
>          end do
>       end do
> c
> c     summation of xi, eta, and zeta projectors  -  4th step
288,290c89,91
<           do i=is+1,ie-1
<            do j=js+1,je-1
<             do k=ks+1,ke-1
---
>       do i=1,idim
>          do j=1,jdim
>             do k=1,kdim
292,293d92
<      .                   - x4(j,k,i) - x5(j,k,i) - x6(j,k,i)
<      .                   + x7(j,k,i)
295,296d93
<      .                   - y4(j,k,i) - y5(j,k,i) - y6(j,k,i)
<      .                   + y7(j,k,i)
298,299d94
<      .                   - z4(j,k,i) - z5(j,k,i) - z6(j,k,i)
<      .                   + z7(j,k,i)
301,308c96,98
<            end do
<           end do
<          enddo
<         enddo
<        enddo
<  
<       end if
< 
---
>          end do
>       end do
> c
Index: source/cfl3d/libs/twoeqn.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/cfl3d/libs/twoeqn.F,v
retrieving revision 1.14
retrieving revision 1.5
diff -r1.14 -r1.5
8,16c8
<      + maxbl,maxseg,volj0,volk0,voli0,nou,bou,nbuf,ibufdim,iex,iex2,
<      + iex3,
<      + dkdx,dkdy,dkdz,dzdx,dzdy,dzdz,dw1dx,dw1dy,dw1dz,
<      + dw2dx,dw2dy,dw2dz,dw3dx,dw3dy,dw3dz,drdx,drdy,drdz,
<      + dpdx,dpdy,dpdz,
<      + dkdj,dkdk,dkdi,dzdj,dzdk,dzdi,dw1dj,dw1dk,dw1di,
<      + dw2dj,dw2dk,dw2di,dw3dj,dw3dk,dw3di,drdj,drdk,drdi,
<      + dpdj,dpdk,dpdi,
<      + w1,w2,w3,srce,vx)
---
>      + maxbl,maxseg,volj0,volk0,voli0,nou,bou,nbuf,ibufdim)
18c10
< c     $Id: twoeqn.F,v 1.14 2005/09/19 14:52:02 rumsey Exp $
---
> c     $Id: twoeqn.F,v 1.5 2003/05/09 19:48:04 rumsey Exp $
48d39
<       common /zero/ iexp
51,52c42
<      .                  iwarneddy,itime2read,itaturb,tur1cut,tur2cut,
<      .                  iturbord,tur1cutlev,tur2cutlev
---
>      .                  iwarneddy,itime2read,itaturb,tur1cut
54,55d43
<       common /konew/ ikoprod,isstdenom,pklimterm,ibeta8kzeta
<       common /curvat/ isarc2d,sarccr3,ieasmcc2d
62,63c50
<       dimension damp1(jdim-1,kdim-1,idim-1),
<      + fnu(0:jdim,0:kdim,0-iex3:idim+iex3)
---
>       dimension damp1(jdim-1,kdim-1,idim-1),fnu(0:jdim,0:kdim,0:idim)
77,78c64
<       dimension turre(0-iex:jdim+iex,0-iex:kdim+iex,0-iex2:idim+iex2,2),
<      + blank(jdim,kdim,idim),
---
>       dimension turre(0:jdim,0:kdim,0:idim,2),blank(jdim,kdim,idim),
85c71
<      + v3dtmp(0:jdim,0:kdim,0-iex3:idim+iex3)
---
>      + v3dtmp(0:jdim,0:kdim,0:idim)
93,111d78
<       dimension  dkdx(jdim),dkdy(jdim),dkdz(jdim),
<      +           dzdx(jdim),dzdy(jdim),dzdz(jdim),
<      +           dw1dx(jdim),dw1dy(jdim),dw1dz(jdim),
<      +           dw2dx(jdim),dw2dy(jdim),dw2dz(jdim),
<      +           dw3dx(jdim),dw3dy(jdim),dw3dz(jdim),
<      +           drdx(jdim),drdy(jdim),drdz(jdim),
<      +           dpdx(jdim),dpdy(jdim),dpdz(jdim)
<       dimension dkdj(jdim),dkdk(jdim),dkdi(jdim),
<      +          dzdj(jdim),dzdk(jdim),dzdi(jdim),
<      +          dw1dj(jdim),dw1dk(jdim),dw1di(jdim),
<      +          dw2dj(jdim),dw2dk(jdim),dw2di(jdim),
<      +          dw3dj(jdim),dw3dk(jdim),dw3di(jdim),
<      +          drdj(jdim),drdk(jdim),drdi(jdim),
<      +          dpdj(jdim),dpdk(jdim),dpdi(jdim)
<       dimension w1(0:jdim,0:kdim,0:idim),
<      +          w2(0:jdim,0:kdim,0:idim),
<      +          w3(0:jdim,0:kdim,0:idim)
<       dimension srce(0:jdim,0:kdim,0:idim,2)
<       dimension vx(0:jdim,0:kdim,idim-1,4)
182,188d148
<         if(iturbord .eq. 1) then
<            nou(1) = min(nou(1)+1,ibufdim)
<            write(bou(nou(1),1),'(''     1st order advection on RHS'')')
<         else
<            nou(1) = min(nou(1)+1,ibufdim)
<            write(bou(nou(1),1),'(''     2nd order advection on RHS'')')
<         end if
194,202d153
<            if(ikoprod .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     strain-based production'',
<      +       '' term'')')
<            else
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     approx (vort) production'',
<      .         '' term'')')
<            end if
207,222d157
<            if(ikoprod .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     strain-based production'',
<      +       '' term'')')
<            else
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     approx (vort) production'',
<      .         '' term'')')
<            end if
<            if(isstdenom .eq. 0) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     vort in denom of mut term'')')
<            else
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     S in denom of mut term'')')
<            end if
230,231c165
<              write(bou(nou(1),1),'(''     strain-based production'',
<      .         '' term'')')
---
>              write(bou(nou(1),1),'(''     approx production term'')')
236,242d169
<            if (ieasmcc2d .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     curvature correction ON'')')
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''       WARNING: curv terms are'',
<      +      '' active in 2-D sense only!!!'')')
<            end if
250,251c177
<              write(bou(nou(1),1),'(''     strain-based production'',
<      .         '' term'')')
---
>              write(bou(nou(1),1),'(''     approx production term'')')
256,262d181
<            if (ieasmcc2d .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     curvature correction ON'')')
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''       WARNING: curv terms are'',
<      +      '' active in 2-D sense only!!!'')')
<            end if
267,275d185
<            if(ikoprod .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     strain-based production'',
<      +       '' term'')')
<            else
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     approx (vort) production'',
<      .         '' term'')')
<            end if
281,287d190
<            if (ieasmcc2d .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     curvature correction ON'')')
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''       WARNING: curv terms are'',
<      +      '' active in 2-D sense only!!!'')')
<            end if
293,299d195
<            if (ieasmcc2d .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     curvature correction ON'')')
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''       WARNING: curv terms are'',
<      +      '' active in 2-D sense only!!!'')')
<            end if
307,308c203
<              write(bou(nou(1),1),'(''     strain-based production'',
<      .         '' term'')')
---
>              write(bou(nou(1),1),'(''     approx production term'')')
313,319d207
<            if (ieasmcc2d .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     curvature correction ON'')')
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''       WARNING: curv terms are'',
<      +      '' active in 2-D sense only!!!'')')
<            end if
327,328c215
<              write(bou(nou(1),1),'(''     strain-based production'',
<      .         '' term'')')
---
>              write(bou(nou(1),1),'(''     approx production term'')')
333,356d219
<            if (ieasmcc2d .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     curvature correction ON'')')
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''       WARNING: curv terms are'',
<      +      '' active in 2-D sense only!!!'')')
<            end if
<         end if
<         if(ivmx .eq.15) then
<            nou(1) = min(nou(1)+1,ibufdim)
<            write(bou(nou(1),1),'(''     k-enstrophy (Note: default '',
<      .   ''tur1cut=-1 if no keyword)'')')
<            if(ikoprod .eq. 2) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     exact production term'')')
<            else if (ikoprod .eq. 1) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     strain-based production'',
<      .         '' term'')')
<            else
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     approx (vort) production'',
<      .         '' term'')')
<            end if
360c223
<      .     ivmx .eq. 13.or. ivmx .eq .15) then
---
>      .     ivmx .eq. 13) then
362,363c225,226
<            write(bou(nou(1),1),'(''     WARNING: k-epsilon and '',
<      .     ''k-enstrophy models sometimes fail to go turbulent!'')')
---
>            write(bou(nou(1),1),'(''     WARNING: k-epsilon models can'',
>      .     '' easily fail to go turbulent!'')')
371,375c234,235
<            write(bou(nou(1),1),'(''         levels (using keyword'',
<      .     '' NFREEZE) until the flowfield is converged enough'')')
<            nou(1) = min(nou(1)+1,ibufdim)
<            write(bou(nou(1),1),'(''         for turbulence to'',
<      .     '' sustain itself'')')
---
>            write(bou(nou(1),1),'(''         levels (using NFREEZE)'',
>      .     '' until the flowfield is converged enough'')')
379,389d238
<            if (ikoprod .ne. 0) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     Also check that there is'',
<      .       '' not excessive turbulence at stagnation regions.'')')
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''         Try ikoprod=0 if'',
<      .       '' there is.'')')
<            end if
<         end if
<         if(ivmx .eq. 9 .or. ivmx .eq.10 .or. ivmx .eq.11 .or.
<      .     ivmx .eq. 13) then
396,403d244
<            if (iturbord .eq. 2) then
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''     WARNING: 2nd order'',
<      .       '' advection (iturbord=2)'')')
<              nou(1) = min(nou(1)+1,ibufdim)
<              write(bou(nou(1),1),'(''          can converge poorly'',
<      .       '' for k-epsilon models'')')
<            end if
405,406c246
<         if(ivmx .eq. 11 .or. ivmx .eq. 12 .or. ivmx .eq. 13 .or.
<      .     ivmx .eq. 14) then
---
>         if(ivmx .ge. 11) then
417c257
< c
---
> 
420,422d259
< c   Note: (10.**(-iexp) is machine zero)
<       xminn=10.**(-iexp+1)
< c
439d275
<       if(ivmx .eq. 15) factor=10.
497c333
< c  sigo1 (constant in omega, epsilon, or zeta diffusion term):
---
> c  sigo1 (constant in omega or epsilon diffusion term):
502,503d337
<       if(ivmx.eq.15)                                sigo1=1.46
< c
511,512d344
<       if(ivmx.eq.15)                                sigk1 = 1.8
< c
525,531d356
< c
< c Coefficient for fnu in diffusion term
<       sigkmu = 1.0
<       if(ivmx.eq.15) then
<         sigkmu = 1./3.
<       endif
< c
611d435
<       if (i2d .ne. 1) then
620d443
<       end if
768d590
<         if (i2d .ne. 1) then
783,829d604
<         end if
<         if (iturbord .ne. 1) then
< c      (1) k=0 boundary:
<         do i=1,idim-1
<           do j=1,jdim-1
<             turre(j,-1,i,1)=tk0(j,i,1,2)
<             turre(j,-1,i,2)=tk0(j,i,2,2)
<           enddo
<         enddo
< c      (2) k=kdim boundary:
<         do i=1,idim-1
<           do j=1,jdim-1
<             turre(j,kdim+1,i,1)=tk0(j,i,1,4)
<             turre(j,kdim+1,i,2)=tk0(j,i,2,4)
<           enddo
<         enddo
< c      (3) j=0 boundary:
<         do i=1,idim-1
<           do k=1,kdim-1
<             turre(-1,k,i,1)=tj0(k,i,1,2)
<             turre(-1,k,i,2)=tj0(k,i,2,2)
<           enddo
<         enddo
< c      (4) j=jdim boundary:
<         do i=1,idim-1
<           do k=1,kdim-1
<             turre(jdim+1,k,i,1)=tj0(k,i,1,4)
<             turre(jdim+1,k,i,2)=tj0(k,i,2,4)
<           enddo
<         enddo
<         if (i2d .ne. 1) then
< c      (5) i=0 boundary:
<         do k=1,kdim-1
<           do j=1,jdim-1
<             turre(j,k,-1,1)=ti0(j,k,1,2)
<             turre(j,k,-1,2)=ti0(j,k,2,2)
<           enddo
<         enddo
< c      (6) i=idim boundary:
<         do k=1,kdim-1
<           do j=1,jdim-1
<             turre(j,k,idim+1,1)=ti0(j,k,1,4)
<             turre(j,k,idim+1,2)=ti0(j,k,2,4)
<           enddo
<         enddo
<         end if
<         end if
973,974c748,749
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
1029,1030c804,805
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
1084,1085c859,860
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
1094d868
<         if (iturbord .eq. 1) then
1119,1151d892
<         else
< c       2nd order upwind; LHS remains 1st order everywhere
<         do k=1,kdim-1
<           do i=1,idim-1
<             do j=1,jdim-1
<               xc=0.5*(sk(j,k+1,i,1)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,1)*sk(j,k,i  ,4))/vol(j,k,i)
<               yc=0.5*(sk(j,k+1,i,2)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,2)*sk(j,k,i  ,4))/vol(j,k,i)
<               zc=0.5*(sk(j,k+1,i,3)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,3)*sk(j,k,i  ,4))/vol(j,k,i)
<               tc=0.5*(sk(j,k+1,i,5)*sk(j,k+1,i,4)+
<      +                sk(j,k,i  ,5)*sk(j,k,i  ,4))/vol(j,k,i)
<               uu=xc*q(j,k,i,2)+yc*q(j,k,i,3)+zc*q(j,k,i,4)+tc
<               sgnu=ccsignrc(1.,uu)
<               app=0.5*(1.+sgnu)
<               apm=0.5*(1.-sgnu)
<              rhside(j,k,i,1)=rhside(j,k,i,1)-0.5*uu*app*turre(j,k-2,i,1)
<      +                                    +2.*uu*app*turre(j,k-1,i,1)
<      +                                   -1.5*uu*app*turre(j,k,i,1)
<      +                                   +1.5*uu*apm*turre(j,k,i,1)
<      +                                    -2.*uu*apm*turre(j,k+1,i,1)
<      +                                   +0.5*uu*apm*turre(j,k+2,i,1)
<              rhside(j,k,i,2)=rhside(j,k,i,2)-0.5*uu*app*turre(j,k-2,i,2)
<      +                                    +2.*uu*app*turre(j,k-1,i,2)
<      +                                   -1.5*uu*app*turre(j,k,i,2)
<      +                                   +1.5*uu*apm*turre(j,k,i,2)
<      +                                    -2.*uu*apm*turre(j,k+1,i,2)
<      +                                   +0.5*uu*apm*turre(j,k+2,i,2)
<             enddo
<           enddo
<         enddo
<         end if
1199,1200c940,941
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
1255,1256c996,997
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
1310,1311c1051,1052
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
1320d1060
<         if (iturbord .eq. 1) then
1345,1377d1084
<         else
< c       2nd order upwind; LHS remains 1st order everywhere
<         do i=1,idim-1
<           do k=1,kdim-1
<             do j=1,jdim-1
<               xc=0.5*(sj(j+1,k,i,1)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,1)*sj(j,k,i  ,4))/vol(j,k,i)
<               yc=0.5*(sj(j+1,k,i,2)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,2)*sj(j,k,i  ,4))/vol(j,k,i)
<               zc=0.5*(sj(j+1,k,i,3)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,3)*sj(j,k,i  ,4))/vol(j,k,i)
<               tc=0.5*(sj(j+1,k,i,5)*sj(j+1,k,i,4)+
<      +                sj(j,k,i  ,5)*sj(j,k,i  ,4))/vol(j,k,i)
<               uu=xc*q(j,k,i,2)+yc*q(j,k,i,3)+zc*q(j,k,i,4)+tc
<               sgnu=ccsignrc(1.,uu)
<               app=0.5*(1.+sgnu)
<               apm=0.5*(1.-sgnu)
<              rhside(j,k,i,1)=rhside(j,k,i,1)-0.5*uu*app*turre(j-2,k,i,1)
<      +                                    +2.*uu*app*turre(j-1,k,i,1)
<      +                                   -1.5*uu*app*turre(j,k,i,1)
<      +                                   +1.5*uu*apm*turre(j,k,i,1)
<      +                                    -2.*uu*apm*turre(j+1,k,i,1)
<      +                                   +0.5*uu*apm*turre(j+2,k,i,1)
<              rhside(j,k,i,2)=rhside(j,k,i,2)-0.5*uu*app*turre(j-2,k,i,2)
<      +                                    +2.*uu*app*turre(j-1,k,i,2)
<      +                                   -1.5*uu*app*turre(j,k,i,2)
<      +                                   +1.5*uu*apm*turre(j,k,i,2)
<      +                                    -2.*uu*apm*turre(j+1,k,i,2)
<      +                                   +0.5*uu*apm*turre(j+2,k,i,2)
<             enddo
<           enddo
<         enddo
<         end if
1426,1427c1133,1134
<                 cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<                 cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>                 cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>                 cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
1482,1483c1189,1190
<                 cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<                 cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>                 cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>                 cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
1537,1538c1244,1245
<                 cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<                 cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>                 cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>                 cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
1547d1253
<           if (iturbord .eq. 1) then
1572,1604d1277
<           else
< c       2nd order upwind; LHS remains 1st order everywhere
<           do i=1,idim-1
<             do k=1,kdim-1
<               do j=1,jdim-1
<                 xc=0.5*(si(j,k,i+1,1)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,1)*si(j,k,i  ,4))/vol(j,k,i)
<                 yc=0.5*(si(j,k,i+1,2)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,2)*si(j,k,i  ,4))/vol(j,k,i)
<                 zc=0.5*(si(j,k,i+1,3)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,3)*si(j,k,i  ,4))/vol(j,k,i)
<                 tc=0.5*(si(j,k,i+1,5)*si(j,k,i+1,4)+
<      +                  si(j,k,i  ,5)*si(j,k,i  ,4))/vol(j,k,i)
<                 uu=xc*q(j,k,i,2)+yc*q(j,k,i,3)+zc*q(j,k,i,4)+tc
<               sgnu=ccsignrc(1.,uu)
<               app=0.5*(1.+sgnu)
<               apm=0.5*(1.-sgnu)
<              rhside(j,k,i,1)=rhside(j,k,i,1)-0.5*uu*app*turre(j,k,i-2,1)
<      +                                    +2.*uu*app*turre(j,k,i-1,1)
<      +                                   -1.5*uu*app*turre(j,k,i,1)
<      +                                   +1.5*uu*apm*turre(j,k,i,1)
<      +                                    -2.*uu*apm*turre(j,k,i+1,1)
<      +                                   +0.5*uu*apm*turre(j,k,i+2,1)
<              rhside(j,k,i,2)=rhside(j,k,i,2)-0.5*uu*app*turre(j,k,i-2,2)
<      +                                    +2.*uu*app*turre(j,k,i-1,2)
<      +                                   -1.5*uu*app*turre(j,k,i,2)
<      +                                   +1.5*uu*apm*turre(j,k,i,2)
<      +                                    -2.*uu*apm*turre(j,k,i+1,2)
<      +                                   +0.5*uu*apm*turre(j,k,i+2,2)
<               enddo
<             enddo
<           enddo
<           end if
1607,1633d1279
< c   Curvature terms for EASMCC
<         if ((ivmx.eq.8 .or. ivmx.eq.9 .or. ivmx.eq.11 .or. 
<      .       ivmx.eq.12.or. ivmx.eq.13.or. ivmx.eq.14) .and. 
<      .       ieasmcc2d .eq. 1) then
< c   Note EASMCC currently only set up for curvature in x-z plane, with
< c   y direction (necessarily) in the i-direction
< c   Get vx(3)=DS11/Dt and vx(4)=DS13/Dt:
<         call sijrate2d(idim,jdim,kdim,q,qj0,qk0,
<      .  bcj,bck,vol,sj,sk,vx)
< c   compute curvature term Dalpha/Dt: store in vx(1)
< c   modify Sij such that its diagonal terms are traceless in the 2D sense
<         do i=1,idim-1
<           do j=1,jdim-1
<             do k=1,kdim-1
<               s11 = ux(j,k,i,1)
<      +           -(ux(j,k,i,1)+ux(j,k,i,9))/2.
<               s13 = 0.5*(ux(j,k,i,3) + ux(j,k,i,7))
< c             denom=2.*(s11**2+s13**2)+
< c    +              (xmach*reue/2.3e6)**2
<               denom=2.*(s11**2+s13**2)
<               denom=ccmax(denom,xminn)
<               vx(j,k,i,1)=(s11*vx(j,k,i,4)-
<      +         s13*vx(j,k,i,3))/denom
<             enddo
<           enddo
<         enddo
<         end if
1675,1689d1320
<               if (ikoprod .eq. 1) then
< c            Determine Sij values:
<               s11 = ux(j,k,i,1)
<               s22 = ux(j,k,i,5)
<               s33 = ux(j,k,i,9)
<               s12 = 0.5*(ux(j,k,i,2) + ux(j,k,i,4))
<               s13 = 0.5*(ux(j,k,i,3) + ux(j,k,i,7))
<               s23 = 0.5*(ux(j,k,i,6) + ux(j,k,i,8))
<               xis = s11*s11 + s22*s22 + s33*s33 +
<      +              2.*s12*s12 + 2.*s13*s13 + 2.*s23*s23
<               rhside(j,k,i,1)=rhside(j,k,i,1)+cutoff*alp/re*
<      +         2.*xis - re*betax*turre(j,k,i,1)**2
<      +         +(1.-blend(j,k,i))*damp1(j,k,i)
<               pk=vist3d(j,k,i)/(q(j,k,i,1)*re)*2.*xis
<               else
1694d1324
<               end if
1696c1326
<               pk=ccmin(pk,(pklimterm*dk))
---
>               pk=ccmin(pk,(20.*dk))
1794c1424
<               pk = ccmin(pk,(pklimterm*dk))
---
>               pk = ccmin(pk,(20.*dk))
1818,1834d1447
<               if (ikoprod .eq. 1) then
< c            Determine Sij values:
<               s11 = ux(j,k,i,1)
<               s22 = ux(j,k,i,5)
<               s33 = ux(j,k,i,9)
<               s12 = 0.5*(ux(j,k,i,2) + ux(j,k,i,4))
<               s13 = 0.5*(ux(j,k,i,3) + ux(j,k,i,7))
<               s23 = 0.5*(ux(j,k,i,6) + ux(j,k,i,8))
<               xis = s11*s11 + s22*s22 + s33*s33 +
<      +              2.*s12*s12 + 2.*s13*s13 + 2.*s23*s23
<               rhside(j,k,i,1)=rhside(j,k,i,1)+cutoff*alp1*
<      +         turre(j,k,i,1)*
<      +         vist3d(j,k,i)*2.*xis/(re*turre(j,k,i,2)*
<      +         q(j,k,i,1)) - re*beta1*(turre(j,k,i,1)**2)*f2/
<      +         turre(j,k,i,2)
<               pk = vist3d(j,k,i)/(q(j,k,i,1)*re)*2.*xis
<               else
1841d1453
<               end if
1843c1455
<               pk = ccmin(pk,(pklimterm*dk))
---
>               pk = ccmin(pk,(20.*dk))
1956c1568
<               pk = ccmin(pk,(pklimterm*dk))
---
>               pk = ccmin(pk,(20.*dk))
2058c1670
<               pk = ccmin(pk,(pklimterm*dk))
---
>               pk = ccmin(pk,(20.*dk))
2154c1766
<               pk = ccmin(pk,(pklimterm*dk))
---
>               pk=ccmin(pk,(20.*dk))
2159,2462d1770
< c
<       else if (ivmx .eq. 15) then
< c ---- enstrophy equation additions
< c      see AIAA J, Vol 36, No 10, Oct 1998, p. 1825-1833
< c
< c ---- define constants
< c
<         cmu = 0.09
<         rcmu = 1./cmu
<         alpha3 = 0.35  
<         beta4 = 0.42
<         beta5 = 2.37
<         beta6 = 0.10
<         beta7 = 1.50
< c   beta8=0 (default) often required to prevent numerical oscillations
<         if (ibeta8kzeta .ne. 0) then
<           beta8 = 2.3
<         else
<           beta8 = 0.0
<         end if
<         sigr = 0.07
<         c1 = 0.6
<         czeta1 = 2.1
<         ck = 2.0
<         sigp = 0.13
<         sigrho = 91.9
<         fnuef = 198.6/tinf
<         delta = 0.1
< c
<         wt1 = 1.0
<         wt2 = (1.-wt1)
< c
<         wlim = 1.e-6  
<         slim = 1.e-6  
< c
<         do i=1,idim-1
<           do k=1,kdim-1
<             do j=1,jdim-1
<               w1(j,k,i) = ux(j,k,i,8) - ux(j,k,i,6)
<               w2(j,k,i) = ux(j,k,i,3) - ux(j,k,i,7)
<               w3(j,k,i) = ux(j,k,i,4) - ux(j,k,i,2)
<             end do
<           end do
<         end do
< c
<         do i=1,idim-1
<           ip=1
<           im=1
<           if(i.eq.1)im=0
<           if(i.eq.idim-1)ip=0
<           if(idim-1.eq.1) then
<             ti=1.
<           else
<             ti=1./float(ip+im)
<           end if
<           do k=1,kdim-1
<             kp=1
<             km=1
<             if(k.eq.1)km=0
<             if(k.eq.kdim-1)kp=0
<             if(kdim-1.eq.1) then
<               tk=1.
<             else
<               tk=1./float(kp+km)
<             end if
< c
< c ---- compute gradients of vorticity and turbulence variables
< c
<             j=1
<             dkdj(j)=(turre(j+1,k,i,2)-turre(j,k,i,2))
<             dzdj(j)=(turre(j+1,k,i,1)-turre(j,k,i,1))
<             dw1dj(j)=(w1(j+1,k,i)-w1(j,k,i))
<             dw2dj(j)=(w2(j+1,k,i)-w2(j,k,i))
<             dw3dj(j)=(w3(j+1,k,i)-w3(j,k,i))
<             dpdj(j)=(q(j+1,k,i,5)-q(j,k,i,5))
<             drdj(j)=(q(j+1,k,i,1)-q(j,k,i,1))
< c
<             do j=2,jdim-2
<               dkdj(j)=0.5*(turre(j+1,k,i,2)-turre(j-1,k,i,2))
<               dzdj(j)=0.5*(turre(j+1,k,i,1)-turre(j-1,k,i,1))
<               dw1dj(j)=0.5*(w1(j+1,k,i)-w1(j-1,k,i))
<               dw2dj(j)=0.5*(w2(j+1,k,i)-w2(j-1,k,i))
<               dw3dj(j)=0.5*(w3(j+1,k,i)-w3(j-1,k,i))
<               dpdj(j)=0.5*(q(j+1,k,i,5)-q(j-1,k,i,5))
<               drdj(j)=0.5*(q(j+1,k,i,1)-q(j-1,k,i,1))
<             enddo
< c
<             j=jdim-1
<             dkdj(j)=(turre(j,k,i,2)-turre(j-1,k,i,2))
<             dzdj(j)=(turre(j,k,i,1)-turre(j-1,k,i,1))
<             dw1dj(j)=(w1(j,k,i)-w1(j-1,k,i))
<             dw2dj(j)=(w2(j,k,i)-w2(j-1,k,i))
<             dw3dj(j)=(w3(j,k,i)-w3(j-1,k,i))
<             dpdj(j)=(q(j,k,i,5)-q(j-1,k,i,5))
<             drdj(j)=(q(j,k,i,1)-q(j-1,k,i,1))
< c
<             do j=1,jdim-1
< c
<               dkdk(j)=tk*(turre(j,k+kp,i,2)-turre(j,k-km,i,2))
<               dkdi(j)=ti*(turre(j,k,i+ip,2)-turre(j,k,i-im,2))
< c
<               dzdk(j)=tk*(turre(j,k+kp,i,1)-turre(j,k-km,i,1))
<               dzdi(j)=ti*(turre(j,k,i+ip,1)-turre(j,k,i-im,1))
< c
<               dw1dk(j)=tk*(w1(j,k+kp,i)-w1(j,k-km,i))
<               dw1di(j)=ti*(w1(j,k,i+ip)-w1(j,k,i-im)) 
< c
<               dw2dk(j)=tk*(w2(j,k+kp,i)-w2(j,k-km,i))
<               dw2di(j)=ti*(w2(j,k,i+ip)-w2(j,k,i-im)) 
< c
<               dw3dk(j)=tk*(w3(j,k+kp,i)-w3(j,k-km,i))
<               dw3di(j)=ti*(w3(j,k,i+ip)-w3(j,k,i-im)) 
< c
<               dpdk(j)=tk*(q(j,k+kp,i,5)-q(j,k-km,i,5))
<               dpdi(j)=ti*(q(j,k,i+ip,5)-q(j,k,i-im,5))
< c
<               drdk(j)=tk*(q(j,k+kp,i,1)-q(j,k-km,i,1))
<               drdi(j)=ti*(q(j,k,i+ip,1)-q(j,k,i-im,1))
< c
<             enddo
<             do j=1,jdim-1
< c
<               rvol = 1.0/vol(j,k,i)
<               sj4=sj(j,k,i,4)
<               sj4p=sj(j+1,k,i,4)
<               xjp=0.5*(sj(j,k,i,1)*sj4+sj(j+1,k,i,1)*sj4p) 
<               yjp=0.5*(sj(j,k,i,2)*sj4+sj(j+1,k,i,2)*sj4p)
<               zjp=0.5*(sj(j,k,i,3)*sj4+sj(j+1,k,i,3)*sj4p)
< c
<               sk4=sk(j,k,i,4)
<               sk4p=sk(j,k+1,i,4)
<               xkp=0.5*(sk(j,k,i,1)*sk4+sk(j,k+1,i,1)*sk4p)
<               ykp=0.5*(sk(j,k,i,2)*sk4+sk(j,k+1,i,2)*sk4p)
<               zkp=0.5*(sk(j,k,i,3)*sk4+sk(j,k+1,i,3)*sk4p)
< c
<               si4=si(j,k,i,4)
<               si4p=si(j,k,i+1,4)
<               xip=0.5*(si(j,k,i,1)*si4+si(j,k,i+1,1)*si4p)
<               yip=0.5*(si(j,k,i,2)*si4+si(j,k,i+1,2)*si4p)
<               zip=0.5*(si(j,k,i,3)*si4+si(j,k,i+1,3)*si4p)
< c
<               dkdx(j)=(xjp*dkdj(j)+xkp*dkdk(j)+xip*dkdi(j))*rvol
<               dkdy(j)=(yjp*dkdj(j)+ykp*dkdk(j)+yip*dkdi(j))*rvol
<               dkdz(j)=(zjp*dkdj(j)+zkp*dkdk(j)+zip*dkdi(j))*rvol
< c
<               dzdx(j)=(xjp*dzdj(j)+xkp*dzdk(j)+xip*dzdi(j))*rvol
<               dzdy(j)=(yjp*dzdj(j)+ykp*dzdk(j)+yip*dzdi(j))*rvol
<               dzdz(j)=(zjp*dzdj(j)+zkp*dzdk(j)+zip*dzdi(j))*rvol
< c
<               dw1dx(j)=(xjp*dw1dj(j)+xkp*dw1dk(j)+xip*dw1di(j))*rvol
<               dw1dy(j)=(yjp*dw1dj(j)+ykp*dw1dk(j)+yip*dw1di(j))*rvol
<               dw1dz(j)=(zjp*dw1dj(j)+zkp*dw1dk(j)+zip*dw1di(j))*rvol
< c
<               dw2dx(j)=(xjp*dw2dj(j)+xkp*dw2dk(j)+xip*dw2di(j))*rvol
<               dw2dy(j)=(yjp*dw2dj(j)+ykp*dw2dk(j)+yip*dw2di(j))*rvol
<               dw2dz(j)=(zjp*dw2dj(j)+zkp*dw2dk(j)+zip*dw2di(j))*rvol
< c
<               dw3dx(j)=(xjp*dw3dj(j)+xkp*dw3dk(j)+xip*dw3di(j))*rvol
<               dw3dy(j)=(yjp*dw3dj(j)+ykp*dw3dk(j)+yip*dw3di(j))*rvol
<               dw3dz(j)=(zjp*dw3dj(j)+zkp*dw3dk(j)+zip*dw3di(j))*rvol
< c
<               dpdx(j)=(xjp*dpdj(j)+xkp*dpdk(j)+xip*dpdi(j))*rvol
<               dpdy(j)=(yjp*dpdj(j)+ykp*dpdk(j)+yip*dpdi(j))*rvol
<               dpdz(j)=(zjp*dpdj(j)+zkp*dpdk(j)+zip*dpdi(j))*rvol
< c
<               drdx(j)=(xjp*drdj(j)+xkp*drdk(j)+xip*drdi(j))*rvol
<               drdy(j)=(yjp*drdj(j)+ykp*drdk(j)+yip*drdi(j))*rvol
<               drdz(j)=(zjp*drdj(j)+zkp*drdk(j)+zip*drdi(j))*rvol
< c
<             enddo
<             do j=1,jdim-1
< c
<               fnut=vist3d(j,k,i)
< c
< c ----- determine strain and vorticity values
< c               
<               s11 = ux(j,k,i,1)
<               s22 = ux(j,k,i,5)
<               s33 = ux(j,k,i,9)
<               divv = s11 + s22 + s33   
< c
<               s12 = 0.5*(ux(j,k,i,2) + ux(j,k,i,4))
<               s13 = 0.5*(ux(j,k,i,3) + ux(j,k,i,7))
<               s23 = 0.5*(ux(j,k,i,6) + ux(j,k,i,8))
<               wis = w1(j,k,i)**2 + w2(j,k,i)**2 + w3(j,k,i)**2 
<               omemag = sqrt(wis)
<               xis = s11*s11 + s22*s22 + s33*s33 +
<      +              2.*s12*s12 + 2.*s13*s13 + 2.*s23*s23
<      +            + slim
< c
< c ----- compute tau_i,j 
< c
<               t11 = 2.*q(j,k,i,1)*turre(j,k,i,2)*re/3.
<      +             -2.*fnut*(s11 - 0.33333*divv)
<               t11=ccmaxcr(t11,0.)
<               t22 = 2.*q(j,k,i,1)*turre(j,k,i,2)*re/3.
<      +             -2.*fnut*(s22 - 0.33333*divv)
<               t22=ccmaxcr(t22,0.)
<               t33 = 2.*q(j,k,i,1)*turre(j,k,i,2)*re/3.
<      +             -2.*fnut*(s33 - 0.33333*divv)
<               t33=ccmaxcr(t33,0.)
<               t12 =-2.*fnut*s12
<               t13 =-2.*fnut*s13
<               t23 =-2.*fnut*s23
< c
< c ---- calculate enstrophy production terms
< c
<               p3 = 2.0*fnut*alpha3*turre(j,k,i,1)*(xis-slim)
<      +           / turre(j,k,i,2) 
<      +           + 2.0*q(j,k,i,1)*re*turre(j,k,i,1)*divv/3.
< c
<               p8 = -2.0*beta8/turre(j,k,i,2)/(xis+0.5*wis)*
<      +           ((w1(j,k,i)*t13+w2(j,k,i)*t23+w3(j,k,i)*t33)
<      +           *(dkdx(j)*dzdy(j)-dkdy(j)*dzdx(j)) +
<      +           (w1(j,k,i)*t11+w2(j,k,i)*t12+w3(j,k,i)*t13)
<      +           *(dkdy(j)*dzdz(j)-dkdz(j)*dzdy(j)) +
<      +           (w1(j,k,i)*t12+w2(j,k,i)*t22+w3(j,k,i)*t23)
<      +           *(dkdz(j)*dzdx(j)-dkdx(j)*dzdz(j)))
< c         
<               wiwjtauij =   
<      +            w1(j,k,i)**2*t11 + w2(j,k,i)**2*t22 + w3(j,k,i)**2*t33 
<      +      + 2.*(w1(j,k,i)*w2(j,k,i)*t12 + w1(j,k,i)*w3(j,k,i)*t13
<      +      + w2(j,k,i)*w3(j,k,i)*t23)
< c
<               p4p6 = (beta4*turre(j,k,i,1)/(omemag + wlim)
<      +           + 2.0*beta6*fnut*omemag/(fnu(j,k,i)*re*re))
<      +             *wiwjtauij/turre(j,k,i,2)
< c
<               p7 = beta7*re*q(j,k,i,1)*turre(j,k,i,1)*
<      +           (w1(j,k,i)**2*s11 + w2(j,k,i)**2*s22 + w3(j,k,i)**2*s33 
<      +      + 2.*(w1(j,k,i)*w2(j,k,i)*s12 + w1(j,k,i)*w3(j,k,i)*s13 
<      +      + w2(j,k,i)*w3(j,k,i)*s23))
<      +          /(wis+wlim)
< c
<               p5 = fnut/(sigr*re*re)*
<      +           (2.*(dw1dx(j)**2+dw2dy(j)**2+dw3dz(j)**2)+
<      +           (dw2dx(j)+dw1dy(j))**2+(dw3dx(j)+dw1dz(j))**2+
<      +           (dw3dy(j)+dw2dz(j))**2)
< c
< c ---- calculate enstrophy destruction term (already divided by density)
< c
<               xnu = fnu(j,k,i)/q(j,k,i,1)
<               rt = (turre(j,k,i,2)/xnu)**2/turre(j,k,i,1)
<               ft = 1.90*(1. + 
<      +        (beta5/1.90-1.)*cctanh(turre(j,k,i,1)/tur10))/beta5
<               ft= 1.0
<               d5 = re*beta5*ft*turre(j,k,i,1)**1.5/(sqrt(rt)+delta)
< c
< c ---- calculate compressibility terms for k-equation
< c
<               ct1 = -fnut*(drdx(j)*dpdx(j) + drdy(j)*dpdy(j) 
<      +            + drdz(j)*dpdz(j))/(re*ck*q(j,k,i,1)**3)  
<               rtaurho = sqrt(turre(j,k,i,2)*(drdx(j)**2 + drdy(j)**2 +
<      +                                       drdz(j)**2))/q(j,k,i,1)
<               ct2 = -c1*turre(j,k,i,2)*rtaurho
< c
< c ---- calculate compressibility terms for enstrophy equation
< c
<               DpDt = q(j,k,i,2)*dpdx(j) + q(j,k,i,3)*dpdy(j) +
<      +               q(j,k,i,4)*dpdz(j)
< 
<               termn = (q(j,k,i,1)*turre(j,k,i,2)*omemag)/
<      +                (xnu*q(j,k,i,5)*sigp)   
<               termd = 1. + sigrho*rtaurho*sqrt(rt/turre(j,k,i,1))/re
<               ct3 = ccmaxcr(termn*DpDt/termd,0.)
<               ct4 = -czeta1*fnut*omemag*turre(j,k,i,1)*rtaurho
<      +             /turre(j,k,i,2)
<               ct5 = -2.0*re*q(j,k,i,1)*turre(j,k,i,1)*divv
< c                     
< c ---- calculate source terms for k-equation
< c
<               if (ikoprod .eq. 2) then
<               pk = -(t11*ux(j,k,i,1) + t22*ux(j,k,i,5)
<      +              +t33*ux(j,k,i,9) + t12*(ux(j,k,i,2)+ux(j,k,i,4))
<      +                               + t13*(ux(j,k,i,3)+ux(j,k,i,7))
<      +                               + t23*(ux(j,k,i,6)+ux(j,k,i,8)))/
<      +              (q(j,k,i,1)*re)
<               else if (ikoprod .eq. 1) then
<               pk=2.*vist3d(j,k,i)*xis/(q(j,k,i,1)*re)
<               else
<               pk=vist3d(j,k,i)*vor(j,k,i)**2/(q(j,k,i,1)*re)
<               end if
< c
<               rtauk=re*fnu(j,k,i)*turre(j,k,i,1)/(turre(j,k,i,2)*
<      +           q(j,k,i,1))
< c
<               dk = turre(j,k,i,2)*rtauk
< c
<               pklim = ccmin(pk,pklimterm*dk)
<               pk = pklim
< c
<               srce(j,k,i,2) = pk + ct1 + ct2 - dk 
<               rhside(j,k,i,2) = rhside(j,k,i,2)
<      +       + srce(j,k,i,2)
< c
<               srce(j,k,i,1) = 
<      +        (p3+p4p6 + p5 + p7 + p8 + ct3 + ct4 + ct5)
<      +        /(q(j,k,i,1)*re) - d5
<               rhside(j,k,i,1) = rhside(j,k,i,1) 
<      +       + srce(j,k,i,1)
< c
<             enddo
<           enddo
<         enddo
2509,2510c1817,1818
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
2557,2565d1864
<               else if (ivmx .eq.  15) then
< c
<                 term1 = -0.5*(srce(j,k,i,1) 
<      c                  - ccabs(srce(j,k,i,1)))
<                 term2 = -0.5*(srce(j,k,i,2) 
<      c                  - ccabs(srce(j,k,i,2)))
<                 cyadd = term1/turre(j,k,i,1)   
<                 cy2add = term2/turre(j,k,i,2)   
< c
2632,2633c1931,1932
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
2680,2687d1978
<               else if (ivmx .eq.  15) then
< c
<                 term1 = -0.5*(srce(j,k,i,1) 
<      c                  - ccabs(srce(j,k,i,1)))
<                 term2 = -0.5*(srce(j,k,i,2) 
<      c                  - ccabs(srce(j,k,i,2)))
<                 cyadd = term1/turre(j,k,i,1)   
<                 cy2add = term2/turre(j,k,i,2)   
2753,2754c2044,2045
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
2801,2808d2091
<               else if (ivmx .eq.  15) then
< c
<                 term1 = -0.5*(srce(j,k,i,1) 
<      c                  - ccabs(srce(j,k,i,1)))
<                 term2 = -0.5*(srce(j,k,i,2) 
<      c                  - ccabs(srce(j,k,i,2)))
<                 cyadd = term1/turre(j,k,i,1)   
<                 cy2add = term2/turre(j,k,i,2)   
2900,2901c2183,2184
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
2980,2981c2263,2264
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
3059,3060c2342,2343
<               cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<               cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>               cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>               cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
3165,3166c2448,2449
<                 cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<                 cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>                 cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>                 cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
3245,3246c2528,2529
<                 cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<                 cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>                 cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>                 cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
3324,3325c2607,2608
<                 cdp=(sigkmu*fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
<                 cdm=(sigkmu*fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
---
>                 cdp=(fnup+sigkp*anutp)*ttp/(q(j,k,i,1)*re)
>                 cdm=(fnum+sigkm*anutm)*ttm/(q(j,k,i,1)*re)
3396,3397c2679
<               if((real(turre(j,k,i,1)+rhside(j,k,i,1))) .le. 
<      +          tur1cutlev) then
---
>               if((real(turre(j,k,i,1)+rhside(j,k,i,1))) .lt. 0.) then
3399c2681
<                 if (tur1cut.gt.0.) turre(j,k,i,1)=tur1cut
---
>                 turre(j,k,i,1)=tur1cut
3404,3405c2686
<               if((real(turre(j,k,i,2)+rhside(j,k,i,2))) .le. 
<      +          tur2cutlev) then
---
>               if((real(turre(j,k,i,2)+rhside(j,k,i,2))) .lt. 0.) then
3407c2688
<                 if (tur2cut.gt.0.) turre(j,k,i,2)=tur2cut
---
>                 turre(j,k,i,2)=1.e-20
3413a2695
> c  
3451,3463d2732
<             if (isstdenom .eq. 1) then
< c            Determine Sij values:
<               s11 = ux(j,k,i,1)
<               s22 = ux(j,k,i,5)
<               s33 = ux(j,k,i,9)
<               s12 = 0.5*(ux(j,k,i,2) + ux(j,k,i,4))
<               s13 = 0.5*(ux(j,k,i,3) + ux(j,k,i,7))
<               s23 = 0.5*(ux(j,k,i,6) + ux(j,k,i,8))
<               xis = s11*s11 + s22*s22 + s33*s33 +
<      +              2.*s12*s12 + 2.*s13*s13 + 2.*s23*s23
<             xxx=sqrt(2.*xis)
<             denom=ccmax(a1*turre(j,k,i,1),xxx*f2/re)
<             else
3465d2733
<             end if
3490,3492d2757
<             if (ieasmcc2d .eq. 1) then
<               w13=w13+(2./(c4-2.))*vx(j,k,i,1)
<             end if
3553,3555d2817
<             if (ieasmcc2d .eq. 1) then
<               w13=w13+(2./(c4-2.))*vx(j,k,i,1)
<             end if
3608,3610d2869
<             if (ieasmcc2d .eq. 1) then
<               w13=w13+(2./(c4-2.))*vx(j,k,i,1)
<             end if
3692,3694d2950
<             if (ieasmcc2d .eq. 1) then
<               w13=w13+(2./(c4-2.))*vx(j,k,i,1)
<             end if
3748,3762d3003
< c
<       else if (ivmx .eq. 15) then
< c
<         do i=1,idim-1
<         do k=1,kdim-1
<         do j=1,jdim-1
<           vist3d(j,k,i)=q(j,k,i,1)**2*cmu*turre(j,k,i,2)**2/
<      +                   (fnu(j,k,i)*turre(j,k,i,1))
<           vist3d(j,k,i)=ccmin(vist3d(j,k,i),edvislim)
<           zksav(j,k,i,1)=turre(j,k,i,1)
<           zksav(j,k,i,2)=turre(j,k,i,2)
<         end do
<         end do
<         end do
< c
3776,3777c3017
<         if(abs(kbcinfo(nbl,kset,1,kk)).eq.2004 .or.
<      .     abs(kbcinfo(nbl,kset,1,kk)).eq.2016) then
---
>         if(abs(kbcinfo(nbl,kset,1,kk)).eq.2004) then
3807,3810d3046
<                 else if(ivmx .eq. 15) then
<                   zksav(j,k,i,1)=omegatemp*cmuc1*zktemp*q(j,k,i,1)/
<      +              fnu(j,k,i)
<                   zksav(j,k,i,2)=zktemp
3833,3834c3069
<         if(abs(jbcinfo(nbl,jset,1,jj)).eq.2004 .or.
<      .     abs(jbcinfo(nbl,jset,1,jj)).eq.2016) then
---
>         if(abs(jbcinfo(nbl,jset,1,jj)).eq.2004) then
3864,3867d3098
<                 else if(ivmx .eq. 15) then
<                   zksav(j,k,i,1)=omegatemp*cmuc1*zktemp*q(j,k,i,1)/
<      +              fnu(j,k,i)
<                   zksav(j,k,i,2)=zktemp
3890,3891c3121
<         if(abs(ibcinfo(nbl,iset,1,ii)).eq.2004 .or.
<      .     abs(ibcinfo(nbl,iset,1,ii)).eq.2016) then
---
>         if(abs(ibcinfo(nbl,iset,1,ii)).eq.2004) then
3921,3924d3150
<                 else if(ivmx .eq. 15) then
<                   zksav(j,k,i,1)=omegatemp*cmuc1*zktemp*q(j,k,i,1)/
<      +              fnu(j,k,i)
<                   zksav(j,k,i,2)=zktemp
3972d3197
< c     Note: the following works for k-epsilon model only:
Index: source/ronnie/main.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/ronnie/main.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
3c3
< c     $Id: main.F,v 1.4 2004/04/19 19:44:07 biedron Exp $
---
> c     $Id: main.F,v 1.3 2001/05/25 21:24:08 biedron Exp $
107,112d106
< #if defined IBM
<       call signal(8,usrint)
<       call signal(9,usrint)
<       call signal(10,usrint)
<       call signal(11,usrint)
< #else
115,117d108
< #  if defined LINUX
<       call signal(7,usrint,-1)
< #  else
119d109
< #  endif
121d110
< #endif
Index: source/ronnie/main_pre.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/ronnie/main_pre.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
3c3
< c     $Id: main_pre.F,v 1.4 2004/04/19 19:44:07 biedron Exp $
---
> c     $Id: main_pre.F,v 1.3 2001/05/25 21:24:08 biedron Exp $
75,80d74
< #if defined IBM
<       call signal(8,usrint)
<       call signal(9,usrint)
<       call signal(10,usrint)
<       call signal(11,usrint)
< #else
83,85d76
< #  if defined LINUX
<       call signal(7,usrint,-1)
< #  else
87d77
< #  endif
89d78
< #endif
Index: source/splitter/getdhdr.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/splitter/getdhdr.F,v
retrieving revision 1.4
retrieving revision 1.3
diff -r1.4 -r1.3
3c3
< c     $Id: getdhdr.F,v 1.4 2003/10/27 17:30:40 biedron Exp $
---
> c     $Id: getdhdr.F,v 1.3 2003/05/13 20:01:47 rumsey Exp $
54,63d53
<       if (abs(ibctyp).eq.2016) then
<          datahdr(1)  = '   tw/tinf'
<          datahdr(2)  = '        cq'
<          datahdr(3)  = '       cqu'
<          datahdr(4)  = '     sjetx'
<          datahdr(5)  = '     sjety'
<          datahdr(6)  = '     sjetz'
<          datahdr(7)  = '     rfreq'
<       end if
< c
Index: source/tools/plot3dg_to_cgns.F
===================================================================
RCS file: /ump/fldmd/home/biedron/CVS_REPOSITORIES/cfl3dv6/source/tools/plot3dg_to_cgns.F,v
retrieving revision 1.10
retrieving revision 1.8
diff -r1.10 -r1.8
3c3
< c     $Id: plot3dg_to_cgns.F,v 1.10 2005/08/04 18:12:51 rumsey Exp $
---
> c     $Id: plot3dg_to_cgns.F,v 1.8 2003/05/13 20:01:14 rumsey Exp $
16c16
<       character*80 file2,file3
---
>       character*80 file2
37,44d36
<       write(6,'('' Does this case use a patch file (e.g., '',
<      +  ''patch.bin)? (1=yes)'')')
<       read(5,*) ipatch
<       if (ipatch .eq. 1) then
<         write(6,'('' input patch filename:'')')
<         read(5,'(a80)') file3
<         open(22,file=file3,form='unformatted',status='old')
<       end if
344c336
<      + '' from the file solutiononly.cgns'')')
---
>      + '' from the CGNS file soln.cgns'')')
1601,1604c1593
<      + '' into the file'')')
< c
<       write(6,'(/,'' Be sure to set keyword icgns=1 in the input'',
<      + '' file'')')
---
>      + '' into the CGNS file'')')
